[{"id":271,"title":"html-meme-detection-js","code":"\/**************************************\r\n * detection.js \u2013 Live Gesture Detection (MediaPipe Version)\r\n **************************************\/\r\n\r\n\r\n\r\n\r\n\r\n\/\/ \/\/ Additional finger-check functions...\r\nfunction checkIndexFinger(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return false;\r\n    const index_tip = landmarks[8];\r\n    const index_pip = landmarks[6];\r\n    return index_tip.y < index_pip.y;\r\n}\r\n\r\nfunction checkRingFinger(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return false;\r\n    const ring_tip = landmarks[16];\r\n    const ring_pip = landmarks[14];\r\n    return ring_tip.y < ring_pip.y;\r\n}\r\n\r\nfunction checkPinkyFinger(landmarks) {\r\n    if (!landmarks || landmarks.length < 21) return false;\r\n    const pinky_tip = landmarks[20];\r\n    const pinky_pip = landmarks[18];\r\n    return pinky_tip.y < pinky_pip.y;\r\n}\r\n\r\nfunction checkHandGesture(landmarks) {\r\n    return checkMiddleFinger(landmarks) && !checkIndexFinger(landmarks);\r\n}\r\n\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-01 08:32:22","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":110,"title":"12 hour limit","code":"\/\/<?php\r\n\/\/\r\n\/\/ \u2705 Get the user's IP address\r\nfunction get_user_ip_address() {\r\n    if (!empty($_SERVER['HTTP_CLIENT_IP'])) {\r\n        return sanitize_text_field($_SERVER['HTTP_CLIENT_IP']);\r\n    } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {\r\n        return sanitize_text_field(explode(',', $_SERVER['HTTP_X_FORWARDED_FOR'])[0]);\r\n    } else {\r\n        return sanitize_text_field($_SERVER['REMOTE_ADDR']);\r\n    }\r\n}\r\n\r\n\/\/ \u2705 Limit submissions based on IP address, action type, and page title\r\nfunction limit_ip_submissions($action_type, $page_title) {\r\n    $time_limit = 12 * 60 * 60; \/\/ 12 hours\r\n    $ip = get_user_ip_address();\r\n    $log = get_option('meme_ip_action_log', array());\r\n\r\n    if (isset($log[$ip][$action_type][$page_title]) && (time() - $log[$ip][$action_type][$page_title]) < $time_limit) {\r\n        wp_die('<p style=\"color:red; font-weight:bold;\">You can only perform this action once every 12 hours on this page. Try again later.<\/p>', 'Limit Reached', array('back_link' => true));\r\n    }\r\n}\r\n\r\n\/\/ \u2705 Save the timestamp of a successful submission by IP, action type, and page title\r\nfunction save_ip_submission_time($action_type, $page_title) {\r\n    $ip = get_user_ip_address();\r\n    $log = get_option('meme_ip_action_log', array());\r\n    $log[$ip][$action_type][$page_title] = time();\r\n    update_option('meme_ip_action_log', $log);\r\n}\r\n\r\n\/\/ \u2705 Custom AJAX action for checking IP limit including page title\r\nadd_action('wp_ajax_check_ip_limit', 'check_ip_limit');\r\nadd_action('wp_ajax_nopriv_check_ip_limit', 'check_ip_limit');\r\n\r\nfunction check_ip_limit() {\r\n    $action_type = sanitize_text_field($_GET['action_type']);\r\n    $page_title = sanitize_text_field($_GET['page_title']);\r\n    $ip = get_user_ip_address();\r\n    $log = get_option('meme_ip_action_log', array());\r\n    $time_limit = 12 * 60 * 60; \/\/ 12 hours\r\n\r\n    $allowed = !isset($log[$ip][$action_type][$page_title]) || (time() - $log[$ip][$action_type][$page_title]) >= $time_limit;\r\n\r\n    wp_send_json(array('allowed' => $allowed));\r\n}\r\n\r\n\/\/ \u2705 Log action after a successful submission by IP, action type, and page title\r\nadd_action('wp_ajax_log_ip_action', 'log_ip_action_ajax');\r\nadd_action('wp_ajax_nopriv_log_ip_action', 'log_ip_action_ajax');\r\n\r\nfunction log_ip_action_ajax() {\r\n    $action_type = sanitize_text_field($_GET['action_type']);\r\n    $page_title = sanitize_text_field($_GET['page_title']);\r\n    save_ip_submission_time($action_type, $page_title);\r\n    wp_send_json_success();\r\n}\r\n\r\n\/\/ \u2705 Automatically clear old logs daily\r\nif (!wp_next_scheduled('wp_scheduled_clear_ip_logs')) {\r\n    wp_schedule_event(time(), 'daily', 'wp_scheduled_clear_ip_logs');\r\n}\r\n\r\nadd_action('wp_scheduled_clear_ip_logs', 'clear_old_ip_logs');\r\nfunction clear_old_ip_logs() {\r\n    $log = get_option('meme_ip_action_log', array());\r\n    $expiration_time = 12 * 60 * 60; \/\/ 12 hours\r\n\r\n    foreach ($log as $ip => $actions) {\r\n        foreach ($actions as $action => $pages) {\r\n            foreach ($pages as $page_title => $timestamp) {\r\n                if (time() - $timestamp > $expiration_time) {\r\n                    unset($log[$ip][$action][$page_title]);\r\n                }\r\n            }\r\n            if (empty($log[$ip][$action])) {\r\n                unset($log[$ip][$action]);\r\n            }\r\n        }\r\n        if (empty($log[$ip])) {\r\n            unset($log[$ip]); \/\/ Remove IP if no actions remain\r\n        }\r\n    }\r\n\r\n    update_option('meme_ip_action_log', $log);\r\n}\r\n\r\n\/\/ \u2705 Custom AJAX action to clear IP limits for testing\r\nadd_action('wp_ajax_clear_ip_limits', 'clear_ip_limits_ajax');\r\nadd_action('wp_ajax_nopriv_clear_ip_limits', 'clear_ip_limits_ajax');\r\n\r\nfunction clear_ip_limits_ajax() {\r\n    delete_option('meme_ip_action_log'); \/\/ Clears all stored limits\r\n    wp_send_json_success();\r\n}\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-24 19:10:34","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":319,"title":"wrap_text","code":"function wrapText(ctx, text, x, y, maxWidth, lineHeight) {\r\n    \/\/ \u2705 Explicitly apply the current font and styling\r\n    const currentFont = ctx.font;\r\n    const currentFillStyle = ctx.fillStyle;\r\n    const currentStrokeStyle = ctx.strokeStyle;\r\n    const currentLineWidth = ctx.lineWidth;\r\n\r\n    const sentences = text.split(\/(?<=[.!?])\\s+\/); \/\/ Split by sentences\r\n\r\n    sentences.forEach(sentence => {\r\n        if (ctx.measureText(sentence).width <= maxWidth) {\r\n            \/\/ Draw sentence in one line\r\n            ctx.font = currentFont;\r\n            ctx.fillStyle = currentFillStyle;\r\n            ctx.strokeStyle = currentStrokeStyle;\r\n            ctx.lineWidth = currentLineWidth;\r\n\r\n            ctx.fillText(sentence, x, y);\r\n            ctx.strokeText(sentence, x, y);\r\n            y += lineHeight;\r\n        } else {\r\n            \/\/ Break sentence into multiple lines if too long\r\n            const words = sentence.split(' ');\r\n            let line = '';\r\n\r\n            for (let i = 0; i < words.length; i++) {\r\n                const testLine = line + words[i] + ' ';\r\n                const testWidth = ctx.measureText(testLine).width;\r\n\r\n                if (testWidth > maxWidth && i > 0) {\r\n                    ctx.font = currentFont;\r\n                    ctx.fillStyle = currentFillStyle;\r\n                    ctx.strokeStyle = currentStrokeStyle;\r\n                    ctx.lineWidth = currentLineWidth;\r\n\r\n                    ctx.fillText(line, x, y);\r\n                    ctx.strokeText(line, x, y);\r\n                    line = words[i] + ' ';\r\n                    y += lineHeight;\r\n                } else {\r\n                    line = testLine;\r\n                }\r\n            }\r\n\r\n            \/\/ Draw last remaining line\r\n            ctx.fillText(line, x, y);\r\n            ctx.strokeText(line, x, y);\r\n            y += lineHeight;\r\n        }\r\n    });\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-20 13:23:12","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":512,"title":"html-upload-submit-php","code":"\/\/<?php\r\n\r\n\/\/ \u2705 Google Vision Image Analysis (For JavaScript Validation)\r\nadd_action('wp_ajax_analyze_image', 'analyze_image_for_upload');\r\nadd_action('wp_ajax_nopriv_analyze_image', 'analyze_image_for_upload');\r\n\r\nfunction analyze_image_for_upload() {\r\n    $request_body = json_decode(file_get_contents('php:\/\/input'), true);\r\n    $base64_image = $request_body['image_data'];\r\n\r\n    if (!$base64_image) {\r\n        wp_send_json_error(['message' => 'No image data provided.']);\r\n        return;\r\n    }\r\n\r\n    \/\/ Google Vision API Request\r\n    $credentials = file_get_contents('https:\/\/elonandtrumpnumberone.com\/wp-content\/uploads\/2025\/02\/zee-coach-b0a5a711e22f.json');\r\n    $access_token = get_google_access_token($credentials);\r\n    if (!$access_token) {\r\n        wp_send_json_error(['message' => \"Unable to authenticate with Google Vision.\"]);\r\n        return;\r\n    }\r\n\r\n    $vision_url = 'https:\/\/vision.googleapis.com\/v1\/images:annotate?access_token=' . $access_token;\r\n\r\n    $request_body = json_encode([\r\n        'requests' => [\r\n            [\r\n                'image' => ['content' => $base64_image],\r\n                'features' => [['type' => 'SAFE_SEARCH_DETECTION']],\r\n            ],\r\n        ],\r\n    ]);\r\n\r\n    $response = wp_remote_post($vision_url, [\r\n        'body'    => $request_body,\r\n        'headers' => ['Content-Type' => 'application\/json'],\r\n    ]);\r\n\r\n    if (is_wp_error($response)) {\r\n        wp_send_json_error(['message' => \"Failed to process image.\"]);\r\n        return;\r\n    }\r\n\r\n    $body = json_decode(wp_remote_retrieve_body($response), true);\r\n    $safe_search = $body['responses'][0]['safeSearchAnnotation'];\r\n\r\n    $allowed_ratings = ['VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE'];\r\n\r\n    if (!in_array($safe_search['adult'], $allowed_ratings)) {\r\n        wp_send_json_error(['message' => \"Image contains adult content.\"]);\r\n        return;\r\n    }\r\n\r\n    if (!in_array($safe_search['violence'], $allowed_ratings)) {\r\n        wp_send_json_error(['message' => \"Image contains violent content.\"]);\r\n        return;\r\n    }\r\n\r\n    \/\/ \u2705 If Passed\r\n    wp_send_json_success(['message' => \"Image is safe.\"]);\r\n}\r\n\r\n\/\/ \u2705 Generate Nonce for Upload Form\r\nadd_action('wp_ajax_get_meme_nonce', 'generate_meme_nonce');\r\nadd_action('wp_ajax_nopriv_get_meme_nonce', 'generate_meme_nonce');\r\n\r\nfunction generate_meme_nonce() {\r\n    $nonce = wp_create_nonce('get_meme_nonce');\r\n    wp_send_json_success(['nonce' => $nonce]);\r\n}\r\n\r\n\/\/ \u2705 Meme Upload Handler\r\nadd_action('wp_ajax_upload_meme', 'handle_meme_upload');\r\nadd_action('wp_ajax_nopriv_upload_meme', 'handle_meme_upload');\r\n\r\nfunction handle_meme_upload() {\r\n    \/\/ Verify Nonce\r\n    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'get_meme_nonce')) {\r\n        wp_send_json_error(['message' => 'Invalid nonce.']);\r\n        return;\r\n    }\r\n\r\n    \/\/ Check if a file is uploaded\r\n    if (!isset($_FILES['file'])) {\r\n        wp_send_json_error(['message' => 'No file uploaded']);\r\n        return;\r\n    }\r\n\r\n    \/\/ Validate and Upload Image\r\n    $file = $_FILES['file'];\r\n    $allowed_types = ['image\/jpeg', 'image\/png', 'image\/gif'];\r\n    if (!in_array($file['type'], $allowed_types)) {\r\n        wp_send_json_error(['message' => 'Invalid file type.']);\r\n        return;\r\n    }\r\n\r\n    $uploaded_file = wp_handle_upload($file, ['test_form' => false]);\r\n\r\n    if (isset($uploaded_file['error'])) {\r\n        wp_send_json_error(['message' => $uploaded_file['error']]);\r\n        return;\r\n    }\r\n\r\n    $file_url = $uploaded_file['url'];\r\n\r\n    \/\/ \u2705 Skip Google Vision Check Here (Already Validated in JavaScript)\r\n\r\n    \/\/ \u2705 Analyze text for inappropriate language\r\n    $post_content = sanitize_text_field($_POST['post_content']);\r\n    $text_safe = analyze_text_safety($post_content);\r\n    if ($text_safe !== true) {\r\n        wp_send_json_error(['message' => \"Text rejected: $text_safe\"]);\r\n        return;\r\n    }\r\n\r\n    \/\/ \u2705 Create Post\r\n    $post_status = 'publish';\r\n\r\n    $image_html = '<div style=\"margin-bottom:20px;\"><img src=\"' . esc_url($file_url) . '\" alt=\"User Uploaded Meme\" style=\"max-width:100%; height:auto; border: 2px solid #ddd; padding: 5px; border-radius: 5px;\"><\/div>';\r\n    \r\n    $post_data = [\r\n        'post_title'    => wp_strip_all_tags(substr($post_content, 0, 50)),\r\n        'post_content'  => $image_html . $post_content,\r\n        'post_status'   => $post_status,\r\n        'post_author'   => get_current_user_id(),\r\n        'post_type'     => 'post',\r\n    ];\r\n\r\n    $post_id = wp_insert_post($post_data);\r\n\r\n    if (is_wp_error($post_id)) {\r\n        wp_send_json_error(['message' => 'Failed to create post']);\r\n        return;\r\n    }\r\n\r\n    \/\/ \u2705 Upload the image and attach it to the post\r\n    $attachment_id = media_handle_sideload([\r\n        'name'     => basename($uploaded_file['file']),\r\n        'tmp_name' => $uploaded_file['file'],\r\n    ], $post_id);\r\n\r\n    if (is_wp_error($attachment_id)) {\r\n        wp_send_json_error(['message' => 'Failed to upload media']);\r\n        return;\r\n    }\r\n\r\n    \/\/ \u2705 Set the uploaded image as the featured image\r\n    set_post_thumbnail($post_id, $attachment_id);\r\n\r\n    \/\/ \u2705 Insert the image directly into post content\r\n    $image_url = wp_get_attachment_url($attachment_id);\r\n    $image_html = wp_get_attachment_image($attachment_id, 'full', false, [\r\n        'class' => 'meme-image',\r\n        'style' => 'max-width:100%; height:auto; border:2px solid #ddd; padding:5px; border-radius:5px;'\r\n    ]);\r\n\r\n    $updated_post_data = [\r\n        'ID' => $post_id,\r\n        'post_content' => $image_html . $post_content\r\n    ];\r\n\r\n    wp_update_post($updated_post_data);\r\n\r\n    \/\/ \u2705 Return success response\r\n    $post_url = get_permalink($post_id);\r\n    wp_send_json_success(['message' => 'Meme uploaded successfully.', 'url' => $post_url]);\r\n}\r\n\r\n\/\/ \u2705 Get Google OAuth Access Token from Service Account JSON\r\nfunction get_google_access_token($credentials_json) {\r\n    $credentials = json_decode($credentials_json, true);\r\n\r\n    $jwt_header = base64_encode(json_encode(['alg' => 'RS256', 'typ' => 'JWT']));\r\n    $now = time();\r\n    $jwt_claim = base64_encode(json_encode([\r\n        'iss'   => $credentials['client_email'],\r\n        'scope' => 'https:\/\/www.googleapis.com\/auth\/cloud-platform',\r\n        'aud'   => 'https:\/\/oauth2.googleapis.com\/token',\r\n        'iat'   => $now,\r\n        'exp'   => $now + 3600\r\n    ]));\r\n\r\n    $signature = '';\r\n    openssl_sign($jwt_header . '.' . $jwt_claim, $signature, $credentials['private_key'], 'sha256');\r\n    $jwt = $jwt_header . '.' . $jwt_claim . '.' . base64_encode($signature);\r\n\r\n    $response = wp_remote_post('https:\/\/oauth2.googleapis.com\/token', [\r\n        'body' => [\r\n            'grant_type' => 'urn:ietf:params:oauth:grant-type:jwt-bearer',\r\n            'assertion'  => $jwt,\r\n        ],\r\n    ]);\r\n\r\n    if (is_wp_error($response)) {\r\n        return false;\r\n    }\r\n\r\n    $body = json_decode(wp_remote_retrieve_body($response), true);\r\n    return $body['access_token'] ?? false;\r\n}\r\n\r\n\/\/ \u2705 Basic Text Content Filter with Clear Rejection Reason\r\nfunction analyze_text_safety($text) {\r\n    $banned_words = ['piss', 'shit', 'fuck', 'cunt', 'cock', 'fag'];\r\n    foreach ($banned_words as $word) {\r\n        if (stripos($text, $word) !== false) {\r\n            return \"Contains inappropriate language: '$word'.\";\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-27 11:01:24","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":535,"title":"allow-json-upload","code":"\/\/<?php\r\n\r\n\/\/ \u2705 Allow JSON and JS file uploads in WordPress\r\nfunction allow_custom_upload_mimes($mimes) {\r\n    $mimes['json'] = 'application\/json'; \/\/ Allow JSON uploads\r\n    $mimes['js'] = 'application\/javascript'; \/\/ Allow JS uploads\r\n    return $mimes;\r\n}\r\nadd_filter('upload_mimes', 'allow_custom_upload_mimes');\r\n\r\n\/\/ \u2705 Verify file type and extension for JS uploads\r\nfunction fix_mime_types($data, $file, $filename, $mimes) {\r\n    $ext = pathinfo($filename, PATHINFO_EXTENSION);\r\n    \r\n    if ($ext === 'js') {\r\n        $data['ext'] = 'js';\r\n        $data['type'] = 'application\/javascript';\r\n    }\r\n\r\n    return $data;\r\n}\r\nadd_filter('wp_check_filetype_and_ext', 'fix_mime_types', 10, 4);\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-24 09:36:17","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":537,"title":"block-json-access","code":"\/\/<?php\r\n\r\n\/\/ \u2705 Block direct access to JSON and JS files for security\r\nfunction block_json_and_js_file_access() {\r\n    if (preg_match('\/\\.(json|js)$\/', $_SERVER['REQUEST_URI'])) {\r\n        wp_die('You are not allowed to access this file.');\r\n    }\r\n}\r\nadd_action('template_redirect', 'block_json_and_js_file_access');\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-24 16:03:36","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":575,"title":"html-sitewide-head","code":"<head>\r\n<meta charset=\"UTF-8\" \/>\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" \/>\r\n<title>Middle Finger Meme Generator<\/title>\r\n\r\n<!-- \u2705 Fingerpose (for more robust gesture recognition) -->\r\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/fingerpose@0.1.0\/dist\/fingerpose.min.js\"><\/script>\r\n\r\n<!-- \u2705 Old MediaPipe Hands API (Backwards Compatibility) -->\r\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/hands\/hands.js\"><\/script>\r\n\r\n<!-- \u2705 New MediaPipe Tasks API (Gesture Recognition & AI-Based Detection) -->\r\n<script type=\"module\">\r\n  import { FilesetResolver, HandLandmarker } from \"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/tasks-vision@0.10.3\";\r\n  window.FilesetResolver = FilesetResolver;\r\n  window.HandLandmarker = HandLandmarker;\r\n<\/script>\r\n\t\r\n<!-- \u2705 Import Drawing Utilities for Hand Skeletons -->\r\n<script type=\"module\">\r\n  import { HAND_CONNECTIONS, drawConnectors, drawLandmarks } \r\n  from \"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/tasks-vision@0.10.3\";\r\n  \r\n  window.HAND_CONNECTIONS = HAND_CONNECTIONS;\r\n  window.drawConnectors = drawConnectors;\r\n  window.drawLandmarks = drawLandmarks;\r\n<\/script>\r\n\t\r\n<!-- \u2705 Import Gesture Recognition API -->\r\n<script type=\"module\">\r\n  import { FilesetResolver, HandLandmarker, GestureRecognizer } \r\n  from \"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/tasks-vision@0.10.3\";\r\n\r\n  window.FilesetResolver = FilesetResolver;\r\n  window.HandLandmarker = HandLandmarker;\r\n  window.GestureRecognizer = GestureRecognizer;\r\n<\/script>\r\n\t\r\n<!-- \u2705 Import MediaPipe Face Detector -->\r\n<script type=\"module\">\r\n  import { FilesetResolver, FaceDetector } \r\n  from \"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/tasks-vision@0.10.3\";\r\n  \r\n  window.FilesetResolver = FilesetResolver;\r\n  window.FaceDetector = FaceDetector;\r\n<\/script>\r\n\r\n<!-- \u2705 WebAssembly Path for MediaPipe Tasks -->\r\n<script>\r\n  window.Module = {\r\n    locateFile: function(file) {\r\n      return \"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/tasks-vision@0.10.3\/wasm\/\" + file;\r\n    }\r\n  };\r\n<\/script>\r\n\r\n<!-- \u2705 Other MediaPipe Features (Face Detection, Avatars, Face Stylizer) -->\r\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/face_detection\/face_detection.js\"><\/script>\r\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/face_mesh\/face_mesh.js\"><\/script>\r\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/face_stylizer\/face_stylizer.js\"><\/script>\r\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/avatar_render\/avatar_render.js\"><\/script>\r\n\r\n<\/head>\r\n","code_type":"html","location":"","auto_insert":0,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-01 00:57:16","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":590,"title":"html-meme-body","code":"<div id=\"container\">\r\n  <p id=\"result\">Awaiting gesture...<\/p>\r\n\r\n  <div class=\"image-controls-wrapper\">\r\n    <button id=\"startCameraBtn\" onclick=\"handleStartCamera()\">\ud83c\udfa5 Start Camera<\/button>\r\n<div id=\"videoContainer\" style=\"position: relative; display: inline-block;\">\r\n  <video id=\"webcam\" autoplay playsinline><\/video>\r\n<\/div>\r\n\t  <canvas id=\"memeCanvas\" style=\"display:none;\"><\/canvas>\r\n\r\n    <div class=\"preview-container\">\r\n      <img id=\"preview\" style=\"display:none;\" alt=\"Captured Meme\">\r\n      <div id=\"memeEditorBlurb\"\r\n        style=\"display: none; text-align: center; margin: 20px 0; padding: 10px; background-color: #f9f9f9; border-radius: 8px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\">\r\n        <h2>\ud83c\udfa8 Meme Editor Guide<\/h2>\r\n        <p>Customize your captured meme with top and bottom text, change colors, and add a disclaimer if you like! When\r\n          you're done, hit <strong>Save Meme<\/strong> to download it and prepare for upload.<\/p>\r\n      <\/div>\r\n\r\n      <div id=\"sticky-footer\" class=\"sticky-footer\" style=\"display: none;\">\r\n        <hr class=\"divider\">\r\n        <h2 class=\"editor-label\">Meme Editor<\/h2>\r\n        <div id=\"button-container\" class=\"button-container\">\r\n          <div class=\"dropdown-wrapper\">\r\n            <div class=\"controls-container\">\r\n              <label for=\"topText\">\ud83d\udcdd Top Text:<\/label>\r\n              <select id=\"topText\" onchange=\"updateMemeText()\"><\/select>\r\n            <\/div>\r\n            <div class=\"controls-container\">\r\n              <label for=\"bottomText\">\ud83d\udcdd Bottom Text:<\/label>\r\n              <select id=\"bottomText\" onchange=\"updateMemeText()\"><\/select>\r\n            <\/div>\r\n          <\/div>\r\n          <div class=\"controls-row-web\">\r\n            <div class=\"controls-container\">\r\n              <label for=\"textColor\">\ud83c\udfa8 Text Color:<\/label>\r\n              <div id=\"colorDisplay\" class=\"color-display\" onclick=\"document.getElementById('textColor').click()\"><\/div>\r\n              <input type=\"color\" id=\"textColor\" value=\"#ffffff\" style=\"display: none;\"\r\n                oninput=\"updateColor(); updateMemeText();\">\r\n            <\/div>\r\n            <div class=\"controls-container\">\r\n              <label for=\"includeDisclaimer\">\ud83d\udcdc Include Disclaimer:<\/label>\r\n              <input type=\"checkbox\" id=\"includeDisclaimer\" checked onchange=\"updateMemeText()\">\r\n            <\/div>\r\n          <\/div>\r\n          <div class=\"button-row\">\r\n            <button class=\"save-btn\" onclick=\"saveMeme()\">\u2705 Save Meme<\/button>\r\n            <button class=\"retry-btn\" onclick=\"restartDetection()\">\ud83d\udd04 Retry<\/button>\r\n          <\/div>\r\n        <\/div>\r\n      <\/div>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<script>\r\n  let savedImageHeight = 0;\r\n  let savedBorderThickness = 10;\r\n  let savedImage = null;\r\n  let savedVideoWidth = 0;\r\n  let pageConfig = null;\r\n  let disclaimerMessage = [];\r\n  let fileNamePrefix = \"meme_\"; \/\/ Default fallback prefix\r\n\r\n  async function loadPageConfig(configFile) {\r\n    console.log(`Config File Path: ${configFile}`);\r\n    try {\r\n      const response = await fetch(configFile);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load config: ${response.status} - ${response.statusText}`);\r\n      }\r\n      pageConfig = await response.json();\r\n      console.log(\"Config loaded successfully:\", pageConfig);\r\n      fileNamePrefix = pageConfig.fileNamePrefix || fileNamePrefix; \/\/ Use prefix from JSON\r\n      populateDropdowns();\r\n      populateDisclaimerMessages();\r\n      populateSection(\"accomplishments-list\", \"accomplishments\");\r\n      populateSection(\"title-list\", \"titleList\");\r\n      populateSection(\"intro-list\", \"introList\");\r\n      populateSection(\"meme-instructions-list\", \"memeInstructionsList\");\r\n    } catch (error) {\r\n      console.error(\"Error loading page config:\", error);\r\n      displayErrorMessage(\"Failed to load configuration. Please try refreshing the page or contact support.\");\r\n    }\r\n  }\r\n  window.onload = () => {\r\n    const path = window.location.pathname.toLowerCase();\r\n    const pageTitle = document.title.toLowerCase();\r\n\r\n    console.log(`Current URL Path: ${path}`);\r\n    console.log(`Current Page Title: ${pageTitle}`);\r\n\r\n    if (path.includes(\"trump\")) {\r\n      console.log(\"Detected: Trump page from path.\");\r\n      if (pageTitle.includes(\"not!\")) {\r\n        console.log(\"Detected from title: 'Not' version for Trump. Loading satirical config.\");\r\n        loadPageConfig(\"https:\/\/elonandtrumpnumberone.com\/wp-content\/uploads\/2025\/02\/trumpConfigNot-2.json\");\r\n      } else {\r\n        console.log(\"Detected from title: Team Trump supporter version. Loading team config.\");\r\n        loadPageConfig(\"https:\/\/elonandtrumpnumberone.com\/wp-content\/uploads\/2025\/02\/trumpConfigTeam-2.json\");\r\n      }\r\n    } else if (path.includes(\"musk\") || path.includes(\"elon\")) {\r\n      console.log(\"Detected: Musk page from path.\");\r\n      if (pageTitle.includes(\"not!\")) {\r\n        console.log(\"Detected from title: 'Not' version for Musk. Loading satirical config.\");\r\n        loadPageConfig(\"https:\/\/elonandtrumpnumberone.com\/wp-content\/uploads\/2025\/02\/muskConfigNot-2.json\");\r\n      } else {\r\n        console.log(\"Detected from title: Team Musk supporter version. Loading team config.\");\r\n        loadPageConfig(\"https:\/\/elonandtrumpnumberone.com\/wp-content\/uploads\/2025\/02\/muskConfigTeam-2.json\");\r\n      }\r\n    } else {\r\n      console.warn(\"No matching page detected from title or path.\");\r\n    }\r\n  };\r\n\r\n\r\n\r\n  function populateSection(divId, jsonSection) {\r\n    try {\r\n      const sectionData = pageConfig[jsonSection];\r\n\r\n      \/\/ Find or create the container to display the list\r\n      const container = document.getElementById(divId);\r\n      if (!container) {\r\n        console.error(`No container found with ID '${divId}'.`);\r\n        return;\r\n      }\r\n\r\n      \/\/ Clear any existing content\r\n      container.innerHTML = '';\r\n\r\n      \/\/ Loop through section data and add div elements\r\n      sectionData.forEach(item => {\r\n        const div = document.createElement(\"div\");\r\n        div.classList.add(`${jsonSection}-item`);\r\n\r\n        \/\/ Generic handling for all sections, including accomplishments\r\n        if (jsonSection === \"accomplishments\") {\r\n          \/\/ Use HTML formatting directly from JSON and add source link\r\n          div.innerHTML = `${item.text} <a href=\"${item.source || '#'}\" target=\"_blank\">(source)<\/a>`;\r\n        } else {\r\n          \/\/ Render plain or HTML-formatted content for other sections\r\n          div.innerHTML = item;\r\n        }\r\n\r\n        container.appendChild(div);\r\n      });\r\n\r\n      console.log(`${jsonSection} populated successfully.`);\r\n    } catch (error) {\r\n      console.error(`Error populating ${jsonSection}:`, error);\r\n      displayErrorMessage(`Error loading ${jsonSection}. Please try again.`);\r\n    }\r\n  }\r\n\r\n\r\n  function populateAccomplishments() {\r\n    try {\r\n      const accomplishments = pageConfig.accomplishments;\r\n\r\n      \/\/ Find or create the container to display the list\r\n      const container = document.getElementById(\"accomplishments-list\");\r\n      if (!container) {\r\n        console.error(\"No container found with ID 'accomplishments-list'.\");\r\n        return;\r\n      }\r\n\r\n      \/\/ Clear any existing content\r\n      container.innerHTML = '';\r\n\r\n      \/\/ Loop through accomplishments and add div elements\r\n      accomplishments.forEach(item => {\r\n        const div = document.createElement(\"div\");\r\n        div.classList.add(\"accomplishment-item\");\r\n\r\n        const text = item.text;\r\n\r\n        \/\/ Find the end of the first sentence based on '. ' occurrence\r\n        const sentenceEnd = text.indexOf('.  ') + 1; \/\/ Include the period\r\n\r\n        let formattedText;\r\n        if (sentenceEnd > 0) {\r\n          const firstSentence = text.substring(0, sentenceEnd + 1); \/\/ Include space after the period\r\n          const restOfText = text.substring(sentenceEnd + 1);\r\n          formattedText = `<strong>${firstSentence}<\/strong>${restOfText}`;\r\n        } else {\r\n          \/\/ If no '. ' found, bold the entire text\r\n          formattedText = `<strong>${text}<\/strong>`;\r\n        }\r\n\r\n        \/\/ Insert the formatted text with the source link\r\n        div.innerHTML = `${formattedText} <a href=\"${item.source || '#'}\" target=\"_blank\">(source)<\/a>`;\r\n        container.appendChild(div);\r\n      });\r\n\r\n      console.log(\"Accomplishments populated successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error populating accomplishments:\", error);\r\n      displayErrorMessage(\"Error loading accomplishments. Please try again.\");\r\n    }\r\n  }\r\n\r\n  function populateDropdowns() {\r\n    try {\r\n      const topTextSelect = document.getElementById(\"topText\");\r\n      const bottomTextSelect = document.getElementById(\"bottomText\");\r\n      topTextSelect.innerHTML = '';\r\n      bottomTextSelect.innerHTML = '';\r\n\r\n      pageConfig.topTexts.forEach(text => {\r\n        const option = document.createElement(\"option\");\r\n        option.text = text;\r\n        topTextSelect.add(option);\r\n      });\r\n\r\n      pageConfig.bottomTexts.forEach(text => {\r\n        const option = document.createElement(\"option\");\r\n        option.text = text;\r\n        bottomTextSelect.add(option);\r\n      });\r\n      console.log(\"Dropdowns populated successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error populating dropdowns:\", error);\r\n      displayErrorMessage(\"Error loading meme options. Please try again.\");\r\n    }\r\n  }\r\n\r\n  function populateDisclaimerMessages() {\r\n    try {\r\n      if (pageConfig.disclaimerMessages) {\r\n        disclaimerMessage = [...pageConfig.disclaimerMessages];\r\n        console.log(\"Disclaimer messages loaded successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading disclaimer messages:\", error);\r\n      displayErrorMessage(\"Error loading disclaimers. Please try again.\");\r\n    }\r\n  }\r\n\r\n  function displayErrorMessage(message) {\r\n    const resultElement = document.getElementById('result');\r\n    resultElement.textContent = message;\r\n    resultElement.style.color = 'red';\r\n  }\r\n\r\n  function updateColor() {\r\n    const colorPicker = document.getElementById(\"textColor\");\r\n    const colorDisplay = document.getElementById(\"colorDisplay\");\r\n    colorDisplay.style.backgroundColor = colorPicker.value;\r\n  }\r\n\r\n  function handleStartCamera() {\r\n    document.getElementById(\"startCameraBtn\").style.display = \"none\"; \/\/ Hide the button\r\n    startCamera(); \/\/ Start the camera and detection\r\n\r\n    \/\/ Scroll to meme-create-section\r\n    setTimeout(() => {\r\n      const memeCreateSection = document.getElementById(\"meme-create-section\");\r\n      if (memeCreateSection) {\r\n        console.log(\"Element #meme-create-section was found.\");\r\n        memeCreateSection.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n      } else {\r\n        console.error(\"Element #meme-create-section not found.\");\r\n      }\r\n    }, 500); \/\/ Delay to ensure the camera starts before scrolling\r\n  }\r\n\r\n\r\n  function updateMemeText() {\r\n    const memeCanvas = document.getElementById(\"memeCanvas\");\r\n    const ctx = memeCanvas.getContext(\"2d\");\r\n    const previewImage = document.getElementById(\"preview\");\r\n    const textColor = document.getElementById(\"textColor\").value;\r\n    const topText = document.getElementById(\"topText\").value;\r\n    const bottomText = document.getElementById(\"bottomText\").value;\r\n    const includeDisclaimer = document.getElementById(\"includeDisclaimer\").checked;\r\n\r\n    if (!savedImage) return;\r\n\r\n    const disclaimerLineHeight = 24;\r\n    const fontSize = 50;\r\n    const lineHeight = fontSize * 1.2;\r\n\r\n    function wrapText(ctx, text, maxWidth) {\r\n      const words = text.split(\" \");\r\n      let lines = [];\r\n      let currentLine = \"\";\r\n      words.forEach(word => {\r\n        let testLine = currentLine ? currentLine + \" \" + word : word;\r\n        if (ctx.measureText(testLine).width > maxWidth && currentLine !== \"\") {\r\n          lines.push(currentLine);\r\n          currentLine = word;\r\n        } else {\r\n          currentLine = testLine;\r\n        }\r\n      });\r\n      lines.push(currentLine);\r\n      return lines;\r\n    }\r\n\r\n    memeCanvas.width = savedVideoWidth + 2 * savedBorderThickness;\r\n    const effectiveMaxWidth = memeCanvas.width - 40;\r\n\r\n    let totalDisclaimerLines = 0;\r\n    if (includeDisclaimer) {\r\n      disclaimerMessage.forEach(sentence => {\r\n        totalDisclaimerLines += wrapText(ctx, sentence, effectiveMaxWidth).length;\r\n      });\r\n    }\r\n    let disclaimerHeight = includeDisclaimer ? totalDisclaimerLines * disclaimerLineHeight + 20 : 0;\r\n    if (includeDisclaimer && window.innerWidth <= 768) {\r\n      disclaimerHeight = Math.max(disclaimerHeight, 186);\r\n    }\r\n\r\n    memeCanvas.height = savedImageHeight + 2 * savedBorderThickness + disclaimerHeight;\r\n\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(0, 0, memeCanvas.width, memeCanvas.height);\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fillRect(savedBorderThickness, savedBorderThickness, memeCanvas.width - 2 * savedBorderThickness, memeCanvas.height - 2 * savedBorderThickness);\r\n    ctx.drawImage(\r\n      savedImage,\r\n      savedBorderThickness, savedBorderThickness,\r\n      savedVideoWidth, savedImageHeight,\r\n      savedBorderThickness, savedBorderThickness,\r\n      savedVideoWidth, savedImageHeight\r\n    );\r\n\r\n    ctx.font = `bold ${fontSize}px Impact`;\r\n    ctx.textAlign = \"center\";\r\n    ctx.fillStyle = textColor;\r\n    ctx.strokeStyle = \"black\";\r\n    ctx.lineWidth = 8;\r\n    ctx.shadowColor = \"rgba(0, 0, 0, 0.7)\";\r\n    ctx.shadowBlur = 6;\r\n    ctx.shadowOffsetX = 3;\r\n    ctx.shadowOffsetY = 3;\r\n\r\n    function drawWrappedText(text, yPosition) {\r\n      if (ctx.measureText(text).width <= (memeCanvas.width - 40)) {\r\n        ctx.strokeText(text, memeCanvas.width \/ 2, yPosition);\r\n        ctx.fillText(text, memeCanvas.width \/ 2, yPosition);\r\n      } else {\r\n        const middleIndex = Math.floor(text.length \/ 2);\r\n        let splitIndex = text.lastIndexOf(' ', middleIndex);\r\n        if (splitIndex === -1) splitIndex = text.indexOf(' ', middleIndex);\r\n        const firstLine = text.substring(0, splitIndex);\r\n        const secondLine = text.substring(splitIndex + 1);\r\n        ctx.strokeText(firstLine, memeCanvas.width \/ 2, yPosition);\r\n        ctx.fillText(firstLine, memeCanvas.width \/ 2, yPosition);\r\n        ctx.strokeText(secondLine, memeCanvas.width \/ 2, yPosition + lineHeight);\r\n        ctx.fillText(secondLine, memeCanvas.width \/ 2, yPosition + lineHeight);\r\n      }\r\n    }\r\n\r\n    drawWrappedText(topText, savedBorderThickness + 60);\r\n    const wrappedBottomText = wrapText(ctx, bottomText, effectiveMaxWidth);\r\n    const bottomY = savedBorderThickness + savedImageHeight - 20 - (wrappedBottomText.length - 1) * lineHeight;\r\n    drawWrappedText(bottomText, bottomY);\r\n\r\n    ctx.shadowColor = \"transparent\";\r\n    ctx.shadowBlur = 0;\r\n    if (includeDisclaimer) {\r\n      ctx.fillStyle = \"black\";\r\n      ctx.font = \"bold 18px Arial\";\r\n      let disclaimerY = savedBorderThickness + savedImageHeight + 35;\r\n      disclaimerMessage.forEach(sentence => {\r\n        wrapText(ctx, sentence, effectiveMaxWidth).forEach(line => {\r\n          ctx.fillText(line, memeCanvas.width \/ 2, disclaimerY);\r\n          disclaimerY += disclaimerLineHeight;\r\n        });\r\n      });\r\n    }\r\n    previewImage.src = memeCanvas.toDataURL(\"image\/png\");\r\n  }\r\n\r\n  function saveMeme() {\r\n    const memeDataUrl = document.getElementById(\"preview\").src;\r\n    const fileName = `${fileNamePrefix}${Date.now()}.png`;\r\n\r\n    \/\/ \u2705 Convert Data URL to Blob\r\n    fetch(memeDataUrl)\r\n      .then(res => res.blob())\r\n      .then(blob => {\r\n        const file = new File([blob], fileName, { type: \"image\/png\" });\r\n\r\n        \/\/ \u2705 Automatically trigger file selection in upload form\r\n        prepopulateMemeUpload(file);\r\n\r\n        \/\/ \u2705 Trigger download for user (optional)\r\n        const link = document.createElement(\"a\");\r\n        link.href = memeDataUrl;\r\n        link.download = fileName;\r\n        link.click();\r\n\r\n        \/\/ \u2705 Smooth scroll to the meme upload section\r\n        scrollToUploadSection();\r\n      });\r\n  }\r\n\r\n  function prepopulateMemeUpload(file) {\r\n    const dataTransfer = new DataTransfer();\r\n    dataTransfer.items.add(file);\r\n\r\n    const fileInput = document.getElementById(\"memeFile\");\r\n    fileInput.files = dataTransfer.files;\r\n\r\n    previewImage();\r\n  }\r\n\r\n  function scrollToUploadSection() {\r\n    const uploadSection = document.getElementById(\"meme-upload-section\");\r\n\r\n    if (uploadSection) {\r\n      uploadSection.style.display = \"block\"; \/\/ \u2705 Make it visible\r\n      uploadSection.scrollIntoView({ behavior: \"smooth\", block: \"start\" }); \/\/ \u2705 Smooth scroll to it\r\n    }\r\n  }\r\n\r\n  function restartDetection() {\r\n    document.getElementById(\"result\").innerText = \"Awaiting gesture...\";\r\n    document.getElementById(\"result\").style.color = \"red\";\r\n    \/\/ Hide the sticky footer and preview image on retry\r\n    document.getElementById(\"sticky-footer\").style.display = \"none\";\r\n    document.getElementById(\"preview\").style.display = \"none\";\r\n    detectionStopped = false;\r\n    isMiddleFingerDetected = false;\r\n    detectionStartTime = null;\r\n    handleStartCamera();\r\n  }\r\n<\/script>","code_type":"html","location":"","auto_insert":0,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-03 09:52:10","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":738,"title":"html-meme-gallery-php","code":"\/\/ Meme gallery shortcode with masonry layout using actual photo sizes and fallback to post content images\r\n?>\r\n\r\n<div id=\"meme-gallery\" class=\"masonry-layout\">\r\n    <script>console.log(\"Meme gallery shortcode triggered.\");<\/script>\r\n    <?php\r\n    $args = array(\r\n        'post_type' => 'post', \/\/ Assuming memes are uploaded as posts\r\n        'posts_per_page' => -1\r\n    );\r\n    $meme_query = new WP_Query($args);\r\n\r\n    if ($meme_query->have_posts()) :\r\n        echo \"<script>console.log('Meme posts found: \" . $meme_query->found_posts . \"');<\/script>\";\r\n\r\n        while ($meme_query->have_posts()) : $meme_query->the_post();\r\n            $image_url = get_the_post_thumbnail_url(get_the_ID(), 'full'); \/\/ Use full-size images\r\n\r\n            \/\/ Fallback: Extract first image from post content\r\n            if (!$image_url) {\r\n                $content = get_the_content();\r\n                preg_match('\/<img.+src=[\\'\"]([^\\'\"]+)[\\'\"].*>\/i', $content, $matches);\r\n                if (isset($matches[1])) {\r\n                    $image_url = $matches[1];\r\n                    echo \"<script>console.log('Fallback image found for post ID: \" . get_the_ID() . \"');<\/script>\";\r\n                }\r\n            }\r\n\r\n            if ($image_url) :\r\n                echo \"<script>console.log('Meme image found for post ID: \" . get_the_ID() . \"');<\/script>\";\r\n    ?>\r\n                <div class=\"meme-item\">\r\n                    <img src=\"<?php echo esc_url($image_url); ?>\" alt=\"<?php the_title(); ?>\">\r\n                    <p><?php the_title(); ?><\/p>\r\n                <\/div>\r\n    <?php\r\n            else :\r\n                echo \"<script>console.log('No image found for post ID: \" . get_the_ID() . \"');<\/script>\";\r\n            endif;\r\n        endwhile;\r\n\r\n        wp_reset_postdata();\r\n    else :\r\n        echo \"<script>console.log('No meme posts found.');<\/script>\";\r\n        echo \"<p>No memes found.<\/p>\";\r\n    endif;\r\n    ?>\r\n<\/div>\r\n\r\n<?php\r\n","code_type":"php","location":"","auto_insert":0,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-27 10:51:27","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":999,"title":"extend-wpcode-php","code":"\/\/<?php\r\n\/\/\r\nfunction my_wpcode_extension_enqueue($hook) {\r\n    \/\/ Only load on WPCode snippet editor pages\r\n    if (strpos($hook, 'wpcode') === false) {\r\n        return;\r\n    }\r\n\r\n    wp_enqueue_script('jquery');\r\n\r\n    $custom_js = <<<JS\r\njQuery(document).ready(function($) {\r\n    \/\/ Function to determine the correct file extension based on snippet type\r\n    function getFileExtension(snippetType) {\r\n        switch (snippetType.toLowerCase()) {\r\n            case 'php':\r\n            case 'php_code':\r\n                return 'php';\r\n            case 'js':\r\n            case 'javascript':\r\n            case 'javascript_code':\r\n                return 'js';\r\n            case 'css':\r\n            case 'css_code':\r\n                return 'css';\r\n            case 'html':\r\n            case 'html_code':\r\n                return 'html';\r\n            default:\r\n                return 'txt'; \/\/ Default fallback\r\n        }\r\n    }\r\n\r\n    \/\/ Always prompt user for file save location with correct extension\r\n    async function manualFileSave(fileName, fileContent) {\r\n        try {\r\n            const options = {\r\n                suggestedName: fileName,\r\n                types: [{\r\n                    description: 'Code Files',\r\n                    accept: { 'text\/plain': ['.txt', '.js', '.php', '.html', '.css'] }\r\n                }]\r\n            };\r\n            const handle = await window.showSaveFilePicker(options);\r\n            const writable = await handle.createWritable();\r\n\r\n            await writable.write(fileContent);\r\n            await writable.close();\r\n\r\n            wpcodeShowMessage(`File successfully saved as \\${fileName}`);\r\n        } catch (error) {\r\n            console.error('Failed to manually save file:', error);\r\n            wpcodeShowMessage('Manual save failed or was canceled.');\r\n        }\r\n    }\r\n\r\n    \/\/ Poll for the WPCode editor container until it appears\r\n    var checkExist = setInterval(function() {\r\n        var editorContainer = $('.wpcode-code-textarea');\r\n        if (editorContainer.length) {\r\n            clearInterval(checkExist);\r\n\r\n            \/\/ Add custom buttons for clipboard and file together without Dummy button\r\n            var customButtons = '<div id=\"my-custom-buttons\" style=\"margin-bottom: 10px;\">' +\r\n                '<div style=\"display: flex; gap: 10px; align-items: center;\">' +\r\n                    '<button id=\"import-clipboard\" class=\"button\">Import from Clipboard<\/button>' +\r\n                    '<button id=\"export-clipboard\" class=\"button\">Copy to Clipboard<\/button>' +\r\n                    '<button id=\"export-file-picker\" class=\"button\">Export to File<\/button>' +\r\n                    '<button id=\"import-file\" class=\"button\">Import from File<\/button>' +\r\n                '<\/div>' +\r\n                '<\/div>';\r\n            editorContainer.prepend(customButtons);\r\n\r\n            \/\/ Prevent auto-save from triggering when clicking custom buttons\r\n            wpcodePreventAutoSave('#export-clipboard');\r\n            wpcodePreventAutoSave('#import-clipboard');\r\n            wpcodePreventAutoSave('#export-file-picker');\r\n            wpcodePreventAutoSave('#import-file');\r\n\r\n            \/\/ Import from Clipboard\r\n            $('#import-clipboard').on('click', function() {\r\n                navigator.clipboard.readText().then(function(clipboardText) {\r\n                    if (clipboardText.trim() === \"\") {\r\n                        wpcodeShowMessage('Clipboard is empty. Nothing to import.');\r\n                        return;\r\n                    }\r\n                    insertCodeIntoEditor(clipboardText);\r\n                }).catch(function(err) {\r\n                    console.error('Failed to read clipboard: ', err);\r\n                    var manualPaste = prompt('Clipboard access denied by browser. Please paste your code manually:');\r\n                    if (manualPaste && manualPaste.trim() !== \"\") {\r\n                        insertCodeIntoEditor(manualPaste);\r\n                    } else {\r\n                        wpcodeShowMessage('No code imported.');\r\n                    }\r\n                });\r\n            });\r\n\r\n            \/\/ Export to Clipboard\r\n            $('#export-clipboard').on('click', function() {\r\n                var code = $('#wpcode_snippet_code').val();\r\n                navigator.clipboard.writeText(code).then(function() {\r\n                    wpcodeShowMessage('Code copied to clipboard!');\r\n                }).catch(function(err) {\r\n                    wpcodeShowMessage('Error copying code: ' + err);\r\n                });\r\n            });\r\n\r\n            \/\/ Export using File Picker with correct file extension\r\n            $('#export-file-picker').on('click', async function () {\r\n                var code = $('#wpcode_snippet_code').val();\r\n                var snippetName = $('input[name=\"wpcode_snippet_title\"]').val() || 'extend_wpcode';\r\n                var snippetType = $('#wpcode_snippet_type').val() || 'custom_code';\r\n                var extension = getFileExtension(snippetType);\r\n\r\n                var fileName = snippetName + '.' + extension;\r\n\r\n                await manualFileSave(fileName, code);\r\n            });\r\n\r\n            \/\/ Import from File (read file content and insert directly into editor)\r\n            $('#import-file').on('click', function() {\r\n                var input = $('<input type=\"file\" accept=\".txt,.js,.php,.html,.css\" style=\"display: none;\">');\r\n                $('body').append(input);\r\n                input.trigger('click');\r\n                input.on('change', function(event) {\r\n                    var file = event.target.files[0];\r\n                    if (!file) {\r\n                        wpcodeShowMessage('No file selected.');\r\n                        return;\r\n                    }\r\n\r\n                    var reader = new FileReader();\r\n\r\n                    reader.onload = function(e) {\r\n                        var importedCode = e.target.result;\r\n                        insertCodeIntoEditor(importedCode); \/\/ Directly insert the file contents\r\n                    };\r\n\r\n                    reader.onerror = function() {\r\n                        wpcodeShowMessage('Error reading the file.');\r\n                    };\r\n\r\n                    reader.readAsText(file);\r\n                    input.remove();\r\n                });\r\n            });\r\n\r\n            \/\/ Directly insert code into editor\r\n            function insertCodeIntoEditor(code) {\r\n                $('#wpcode_snippet_code').val(code);\r\n                var cmElement = $('#wpcode_snippet_code').next('.CodeMirror')[0];\r\n                if (cmElement && cmElement.CodeMirror) {\r\n                    cmElement.CodeMirror.setValue(code);\r\n                    cmElement.CodeMirror.refresh();\r\n                }\r\n                wpcodeShowMessage('Code successfully imported!');\r\n            }\r\n        }\r\n    }, 500);\r\n});\r\nJS;\r\n\r\n    wp_add_inline_script('jquery', $custom_js);\r\n}\r\nadd_action('admin_enqueue_scripts', 'my_wpcode_extension_enqueue');\r\n","code_type":"php","location":"admin_only","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-27 10:50:44","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1000,"title":"extend-wpcode-search-php","code":"\/\/<?php\r\n\/\/\r\nfunction my_wpcode_search_extension_enqueue($hook) {\r\n    \/\/ Only load on WPCode snippet editor pages\r\n    if (strpos($hook, 'wpcode') === false) {\r\n        return;\r\n    }\r\n\r\n    wp_enqueue_script('jquery');\r\n\r\n    $custom_js = <<<'JS'\r\njQuery(document).ready(function($) {\r\n    let folderHandle = null; \/\/ Store the folder handle for the session\r\n    let mappingData = {};\r\n\r\n    \/\/ Load saved mapping from localStorage\r\n    function loadMappingFromStorage() {\r\n        const savedMapping = localStorage.getItem('wpcodeMappingData');\r\n        if (savedMapping) {\r\n            mappingData = JSON.parse(savedMapping);\r\n            console.log(\"[WPCode Search]: Mapping data loaded from localStorage.\");\r\n            populateMappingDropdown();\r\n        }\r\n    }\r\n\r\n\r\n    \/\/ Save mapping to localStorage\r\n    function saveMappingToStorage() {\r\n        localStorage.setItem('wpcodeMappingData', JSON.stringify(mappingData));\r\n        console.log(\"[WPCode Mapping]: Mapping data saved to localStorage.\");\r\n    }\r\n\r\n    \/\/ Populate the dropdown with the current mapping data (sorted)\r\n    function populateMappingDropdown() {\r\n        let $dropdown = $('#mapping-dropdown');\r\n        $dropdown.empty();\r\n        $dropdown.append('<option value=\"\">Select a Code Snippet to load<\/option>');\r\n\r\n        \/\/ Convert object to array, sort by filename, and populate dropdown\r\n        Object.entries(mappingData)\r\n            .sort(([fileA], [fileB]) => fileA.localeCompare(fileB)) \/\/ Sort alphabetically by filename\r\n            .forEach(([filename, snippetId]) => {\r\n                $dropdown.append('<option value=\"' + snippetId + '\">' + filename + '<\/option>');\r\n            });\r\n    }\r\n\r\n    \/\/ Function to import mapping file\r\n    async function importMappingFile() {\r\n        try {\r\n            mappingData = {};\r\n            const [fileHandle] = await window.showOpenFilePicker();\r\n            const file = await fileHandle.getFile();\r\n            const content = await file.text();\r\n            const jsonData = JSON.parse(content);\r\n\r\n            jsonData.forEach(snippet => {\r\n                if (snippet.title && snippet.id && snippet.code_type) {\r\n                    let fileExtension = snippet.code_type.toLowerCase();\r\n                    mappingData[`${snippet.title}.${fileExtension}`] = snippet.id;\r\n                }\r\n            });\r\n\r\n            saveMappingToStorage();\r\n            populateMappingDropdown();\r\n            wpcodeShowMessage('Mapping data imported successfully.');\r\n        } catch (error) {\r\n            console.error('[WPCode Mapping]: Error importing file:', error);\r\n            wpcodeShowMessage('Failed to import mapping.');\r\n        }\r\n    }\r\n\r\n\/\/ Function to display mappings\r\nfunction showMappings() {\r\n    if (Object.keys(mappingData).length === 0) {\r\n        wpcodeShowMessage('No mapping data loaded.');\r\n        return;\r\n    }\r\n\r\n    let sortedMappings = Object.entries(mappingData)\r\n        .sort(([fileA], [fileB]) => fileA.localeCompare(fileB)); \/\/ Sort alphabetically by file name\r\n\r\n    let mappingInfo = 'Current Snippet Mappings:\\n\\n';\r\n    for (let [file, id] of sortedMappings) {\r\n        mappingInfo += `${file} -> Snippet ID: ${id}\\n`;\r\n    }\r\n\r\n    alert(mappingInfo);\r\n}\r\n\r\n\r\n    \/\/ Function to select folder using File Picker\r\n    async function selectSearchFolder() {\r\n        try {\r\n            folderHandle = await window.showDirectoryPicker();\r\n            wpcodeShowMessage('Search folder set successfully.');\r\n        } catch (error) {\r\n            console.error('[WPCode Search]: Error selecting folder:', error);\r\n            wpcodeShowMessage('Failed to set search folder.');\r\n        }\r\n    }\r\n\r\n    \/\/ Function to clear search results and hide the container and button\r\n    function clearSearchResults() {\r\n        $('#wpcode-search-results').empty().hide();\r\n        $('#clear-results').hide();\r\n    }\r\n\r\n    \/\/ Function to search snippets in selected folder\r\n    async function searchSnippetsInFolder() {\r\n        if (!folderHandle) {\r\n            try {\r\n                folderHandle = await window.showDirectoryPicker();\r\n                wpcodeShowMessage('Search folder selected successfully.');\r\n            } catch (error) {\r\n                wpcodeShowMessage('Search canceled. No folder selected.');\r\n                return;\r\n            }\r\n        }\r\n\r\n        let searchAllFiles = $('#all-files-checkbox').is(':checked');\r\n        let matchCase = $('#match-case-checkbox').is(':checked');\r\n\r\n        let searchTerm = prompt('Enter search term:');\r\n        if (!searchTerm || searchTerm.trim() === '') {\r\n            wpcodeShowMessage('No search term entered.');\r\n            return;\r\n        }\r\n\r\n        let results = [];\r\n\r\n        for await (const entry of folderHandle.values()) {\r\n            if (entry.kind === 'file') {\r\n                if (!searchAllFiles && !(entry.name in mappingData)) {\r\n                    continue;\r\n                }\r\n\r\n                const file = await entry.getFile();\r\n                const content = await file.text();\r\n                const lines = content.split('\\n');\r\n\r\n                lines.forEach((line, lineIndex) => {\r\n                    const effectiveLine = matchCase ? line : line.toLowerCase();\r\n                    const effectiveSearchTerm = matchCase ? searchTerm : searchTerm.toLowerCase();\r\n                    let columnIndex = effectiveLine.indexOf(effectiveSearchTerm);\r\n                    while (columnIndex !== -1) {\r\n                        let contextSnippet = line.substring(Math.max(0, columnIndex - 30), Math.min(line.length, columnIndex + searchTerm.length + 30));\r\n                        results.push({\r\n                            name: entry.name,\r\n                            handle: entry,\r\n                            file,\r\n                            context: contextSnippet.replace(\/\\n\/g, ' '),\r\n                            line: lineIndex + 1,\r\n                            column: columnIndex + 1\r\n                        });\r\n                        columnIndex = effectiveLine.indexOf(effectiveSearchTerm, columnIndex + effectiveSearchTerm.length);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        const resultsContainer = $('#wpcode-search-results');\r\n        resultsContainer.empty();\r\n\r\n        if (results.length > 0) {\r\n            let resultsHTML = '<h3>Search Results<\/h3><ul>';\r\n            for (let result of results) {\r\n                let snippetId = mappingData[result.name];\r\n                if (snippetId) {\r\n                    let snippetUrl = `${window.location.origin}\/wp-admin\/admin.php?page=wpcode-snippet-manager&snippet_id=${snippetId}`;\r\n                    resultsHTML += `<li><a href=\"${snippetUrl}\" target=\"_blank\">${result.name} (Line ${result.line}, Column ${result.column})<\/a><br><small>...${result.context}...<\/small><\/li>`;\r\n                }\r\n            }\r\n            resultsHTML += '<\/ul>';\r\n            resultsContainer.html(resultsHTML).show();\r\n            $('#clear-results').show();\r\n        } else {\r\n            wpcodeShowMessage('No matching snippets found.');\r\n        }\r\n    }\r\n\r\n    \/\/ Add custom buttons, checkboxes, dropdown, and result container\r\n    var searchSection = '<div id=\"wpcode-search-section\" style=\"margin-bottom: 20px;\">' +\r\n        '<div style=\"display: flex; flex-wrap: wrap; gap: 10px; align-items: center; margin-bottom: 10px;\">' +\r\n            '<button id=\"search-folder\" class=\"button\">Search Snippets<\/button>' +\r\n            '<button id=\"select-folder\" class=\"button\">Set Search Folder<\/button>' +\r\n            '<button id=\"clear-results\" class=\"button\" style=\"display: none;\">Clear Search Results<\/button>' +\r\n            '<label style=\"display: flex; align-items: center; gap: 5px;\">' +\r\n                '<input type=\"checkbox\" id=\"all-files-checkbox\"> All Files' +\r\n            '<\/label>' +\r\n            '<label style=\"display: flex; align-items: center; gap: 5px;\">' +\r\n                '<input type=\"checkbox\" id=\"match-case-checkbox\"> Match Case' +\r\n            '<\/label>' +\r\n            '<select id=\"mapping-dropdown\" class=\"button\">' +\r\n                '<option value=\"\">Select a snippet<\/option>' +\r\n            '<\/select>' +\r\n            '<button id=\"show-mappings\" class=\"button\">Show Mappings<\/button>' +\r\n            '<button id=\"import-mapping\" class=\"button\">Import Mapping<\/button>' +\r\n        '<\/div>' +\r\n        '<div id=\"wpcode-search-results\" style=\"display: none; background: #f1f1f1; padding: 15px; border: 1px solid #ccc; border-radius: 5px; max-height: 300px; overflow-y: auto;\"><\/div>' +\r\n    '<\/div>';\r\n    $('.wpcode-code-textarea').prepend(searchSection);\r\n\r\n    wpcodePreventAutoSave('#search-folder');\r\n    wpcodePreventAutoSave('#select-folder');\r\n    wpcodePreventAutoSave('#clear-results');\r\n    wpcodePreventAutoSave('#import-mapping');\r\n    wpcodePreventAutoSave('#show-mappings');\r\n\r\n    \/\/ Event listener for dropdown change\r\n    $(document).on('change', '#mapping-dropdown', function() {\r\n        var snippetId = $(this).val();\r\n        if (snippetId) {\r\n            var snippetUrl = `${window.location.origin}\/wp-admin\/admin.php?page=wpcode-snippet-manager&snippet_id=${snippetId}`;\r\n            window.open(snippetUrl, '_blank');\r\n            $(this).val('');\r\n        }\r\n    });\r\n\r\n    \/\/ Attach event listeners for buttons\r\n    $('#search-folder').on('click', function() {\r\n        searchSnippetsInFolder();\r\n    });\r\n\r\n    $('#select-folder').on('click', function() {\r\n        selectSearchFolder();\r\n    });\r\n\r\n    $('#clear-results').on('click', function() {\r\n        clearSearchResults();\r\n    });\r\n\r\n    $('#import-mapping').on('click', function() {\r\n        importMappingFile();\r\n    });\r\n\r\n    $('#show-mappings').on('click', function() {\r\n        showMappings();\r\n    });\r\n\r\n    \/\/ Load mappings on page load\r\n    loadMappingFromStorage();\r\n});\r\nJS;\r\n\r\n    wp_add_inline_script('jquery', $custom_js);\r\n}\r\nadd_action('admin_enqueue_scripts', 'my_wpcode_search_extension_enqueue');\r\n","code_type":"php","location":"admin_only","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-27 11:27:44","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1013,"title":"extend-wpcode-common-php","code":"\/\/<?php\r\n\/\/\r\nadd_action('admin_enqueue_scripts', 'wpcode_common_enqueue');\r\n\r\nfunction wpcode_common_enqueue($hook) {\r\n    \/\/ Only load on WPCode snippet editor pages\r\n    if (strpos($hook, 'wpcode') === false) {\r\n        return;\r\n    }\r\n\r\n    wp_enqueue_script('jquery');\r\n\r\n    \/\/ Inject common JavaScript functions\r\n    $common_js = <<<JS\r\njQuery(document).ready(function($) {\r\n    \/\/ Function to display temporary messages\r\n    function showMessage(message, source = 'WPCode Common') {\r\n        console.log(\"[\" + source + \"]: \" + message);\r\n        var messageBox = $('<div class=\"my-temp-message\">' + message + '<\/div>');\r\n        $('body').append(messageBox);\r\n        messageBox.css({\r\n            position: 'fixed',\r\n            bottom: '20px',\r\n            right: '20px',\r\n            background: '#007cba',\r\n            color: '#fff',\r\n            padding: '10px 20px',\r\n            borderRadius: '5px',\r\n            boxShadow: '0 2px 6px rgba(0, 0, 0, 0.2)',\r\n            zIndex: 9999\r\n        }).fadeIn();\r\n\r\n        setTimeout(function() {\r\n            messageBox.fadeOut(function() {\r\n                $(this).remove();\r\n            });\r\n        }, 3000);\r\n    }\r\n\r\n    \/\/ Function to prevent WPCode auto-save from triggering during custom actions\r\n    function preventAutoSaveOnButtonClick(buttonSelector) {\r\n        $(buttonSelector).on('mousedown click focus', function(event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        });\r\n    }\r\n\r\n    \/\/ Expose the functions globally for use in other snippets\r\n    window.wpcodeShowMessage = showMessage;\r\n    window.wpcodePreventAutoSave = preventAutoSaveOnButtonClick;\r\n});\r\nJS;\r\n\r\n    wp_add_inline_script('jquery', $common_js);\r\n}\r\n","code_type":"php","location":"admin_only","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-27 10:50:00","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1032,"title":"html-upload-markup","code":"<!-- \u2705 Stylish Meme Upload Form Without Title -->\r\n<form id=\"memeUploadForm\" class=\"meme-upload-card\">\r\n\t<div class=\"form-group\">\r\n\t\t<label for=\"memeFile\">\ud83d\udcc1 Select Your Meme:<\/label>\r\n\t\t<input type=\"file\" id=\"memeFile\" accept=\"image\/png, image\/jpeg, image\/gif\" required onchange=\"previewImage()\">\r\n\t<\/div>\r\n\r\n\t<div class=\"form-group\">\r\n\t\t<label for=\"postContent\">\ud83d\udcdd Why are you posting this meme?<\/label>\r\n\t\t<textarea id=\"postContent\" rows=\"3\" placeholder=\"Share your reason for posting...\" required><\/textarea>\r\n\t<\/div>\r\n\r\n\t<input type=\"hidden\" id=\"memeUploadNonce\" value=\"\">\r\n\r\n\t<div class=\"button-group\">\r\n\t\t<button type=\"button\" id=\"uploadMemeButton\" class=\"action-btn\" onclick=\"uploadMeme()\">\u2705 Upload<\/button>\r\n\t\t<button type=\"button\" id=\"emailMemeButton\" class=\"action-btn\" onclick=\"emailMeme()\">\ud83d\udce7 Email<\/button>\r\n\t\t<button type=\"button\" id=\"twitterMemeButton\" class=\"action-btn\" onclick=\"twitterMeme()\">\ud83d\udc26 Twitter<\/button>\r\n        <br> <!-- This forces a new row -->\r\n\t\t<button type=\"button\" id=\"clearLimitButton\" class=\"action-btn clear-btn\" onclick=\"clearLimits()\">\ud83d\uddd1\ufe0f Clear Limits (Test)<\/button>\r\n\t\t<button type=\"button\" id=\"testMemeButton\" class=\"action-btn\" onclick=\"testMeme()\">TEST<\/button>\r\n\t\t<button type=\"button\" id=\"batchMemeButton\" class=\"action-btn\" onclick=\"batchTestImages()\">BATCH<\/button>\r\n    <br> <!-- This forces a new row -->\r\n\t\t<button type=\"button\" id=\"detect1Button\" class=\"action-btn\" onclick=\"detectHandsFromWebcam()\">LIVE HANDS<\/button>\r\n\t\t<button type=\"button\" id=\"detect2Button\" class=\"action-btn\" onclick=\"detectHandsFromFile()\">FILE HANDS<\/button>\r\n    <br> <!-- This forces a new row -->\r\n\t\t<button type=\"button\" id=\"detect3Button\" class=\"action-btn\" onclick=\"detectGesturesFromWebcam()\">LIVE GESTURE<\/button>\r\n\t\t<button type=\"button\" id=\"detect4Button\" class=\"action-btn\" onclick=\"detectGesturesFromFile()\">FILE GESTURE<\/button>\r\n    <br> <!-- This forces a new row -->\r\n\t\t<button type=\"button\" id=\"detect5Button\" class=\"action-btn\" onclick=\"detectFaceFromWebcam()\">LIVE FACE<\/button>\r\n\t\t<button type=\"button\" id=\"detect6Button\" class=\"action-btn\" onclick=\"detectFaceFromFile()\">FILE FACE<\/button>\r\n\t<\/div>\r\n\r\n\t<p id=\"uploadStatus\" class=\"status-text\"><\/p>\r\n\r\n\t<div id=\"imagePreviewContainer\" class=\"image-preview\" style=\"display: none;\">\r\n\t\t<img id=\"imagePreview\" src=\"none\" alt=\"Meme Preview\">\r\n\t<\/div>\r\n<\/form>\r\n\r\n<!-- \u2705 Modern Styling Without Title -->\r\n<style>\r\n\t\/* Main form container *\/\r\n\t.meme-upload-card {\r\n\t\tmax-width: 500px;\r\n\t\tmargin: 20px auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground: #fff;\r\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\t\tborder-radius: 15px;\r\n\t\tfont-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n\t}\r\n\r\n\t\/* Group styling *\/\r\n\t.form-group {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tmargin-bottom: 15px;\r\n\t}\r\n\r\n\tlabel {\r\n\t\tfont-weight: 600;\r\n\t\tmargin-bottom: 5px;\r\n\t\tcolor: #555;\r\n\t}\r\n\r\n\tinput[type=\"file\"],\r\n\ttextarea {\r\n\t\tborder: 1px solid #ccc;\r\n\t\tborder-radius: 8px;\r\n\t\tpadding: 10px;\r\n\t\tfont-size: 1rem;\r\n\t}\r\n\r\n\ttextarea {\r\n\t\tresize: vertical;\r\n\t\tmin-height: 100px;\r\n\t}\r\n\r\n\t\/* Button group styling *\/\r\n\t.button-group {\r\n\t\tdisplay: flex;\r\n\t\tflex-wrap: wrap;\r\n\t\tjustify-content: space-between;\r\n\t\tgap: 10px;\r\n\t}\r\n\r\n\t.action-btn {\r\n\t\tflex: 1;\r\n\t\tpadding: 10px;\r\n\t\tfont-size: 1rem;\r\n\t\tborder: none;\r\n\t\tborder-radius: 10px;\r\n\t\tbackground: #007bff;\r\n\t\tcolor: white;\r\n\t\tcursor: pointer;\r\n\t\ttransition: background 0.3s ease;\r\n\t}\r\n\r\n\t.action-btn:hover {\r\n\t\tbackground: #0056b3;\r\n\t}\r\n\r\n\t.clear-btn {\r\n\t\tbackground: #dc3545;\r\n\t}\r\n\r\n\t.clear-btn:hover {\r\n\t\tbackground: #a71d2a;\r\n\t}\r\n\r\n\t\/* Disabled button *\/\r\n\t.action-btn:disabled {\r\n\t\tbackground: #ccc;\r\n\t\tcursor: not-allowed;\r\n\t}\r\n\r\n\t\/* Upload status text *\/\r\n\t.status-text {\r\n\t\tmargin-top: 15px;\r\n\t\ttext-align: center;\r\n\t\tcolor: #555;\r\n\t\tfont-style: italic;\r\n\t}\r\n\r\n\t\/* Image preview container *\/\r\n\t.image-preview {\r\n\t\tmargin-top: 20px;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.image-preview img {\r\n\t\twidth: 100%;\r\n\t\tmax-width: 300px;\r\n\t\tborder-radius: 10px;\r\n\t\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n\t\tborder: 2px solid #ddd;\r\n\t\tpadding: 5px;\r\n\t}\r\n<\/style>\r\n","code_type":"html","location":"","auto_insert":0,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-28 21:47:01","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1033,"title":"html-upload-body","code":"<script>\r\n\/\/ \u2705 Get a fresh Nonce when the page loads\r\nfetch('\/wp-admin\/admin-ajax.php?action=get_meme_nonce')\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            document.getElementById(\"memeUploadNonce\").value = data.data.nonce;\r\n        }\r\n    })\r\n    .catch(error => console.error(\"Nonce Error:\", error));\r\n\r\n\/\/ \u2705 Run limit checks immediately after page load\r\ndocument.addEventListener(\"DOMContentLoaded\", enforceIpLimitsOnLoad);\r\n\t\r\n\/\/ \u2705 Re-enable Upload and Email Buttons on Input Change\r\ndocument.getElementById(\"memeFile\").addEventListener(\"change\", function () {\r\n    document.getElementById(\"uploadStatus\").innerText = \"\";\r\n\tpreviewImage();\r\n});\r\n\r\n\/\/ \u2705 \r\ndocument.getElementById(\"postContent\").addEventListener(\"input\", function () {\r\n    document.getElementById(\"uploadStatus\").innerText = \"\";\r\n});\r\n\r\n\/\/ \u2705 Test Function\r\nasync function testMeme() {\r\n    console.log(\"DEBUG: testMeme invoked\");\r\n    \r\n    const pageTitle = document.title;\r\n    console.log(\"DEBUG: Page title is:\", pageTitle);\r\n    \r\n    const fileInput = document.getElementById(\"memeFile\");\r\n    if (!fileInput) {\r\n        console.error(\"ERROR: File input element with id 'memeFile' not found.\");\r\n        return;\r\n    }\r\n    \r\n    const file = fileInput.files[0];\r\n    const fileBlob = new Blob([file], { type: file.type });\r\n    const fileURL = URL.createObjectURL(fileBlob);\r\n    if (!file) {\r\n        console.error(\"ERROR: No file selected.\");\r\n        document.getElementById(\"uploadStatus\").innerText = \"\u274c Please select a file.\";\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n        return;\r\n    }\r\n    console.log(\"DEBUG: File selected:\", file.name);\r\n    \r\n    console.log(\"DEBUG: Starting gesture detection for the file...\");\r\n    const isGestureDetected = await detectGestureFromFile(fileURL);\r\n    console.log(\"DEBUG: Final detection result object:\", isGestureDetected);\r\n\r\n    \/\/ Check the detected property instead of the whole object\r\n    if (!isGestureDetected || !isGestureDetected.detected) {\r\n      let gestureType = pageTitle.indexOf(\"NOT\") > -1 ? \"middle finger\" : \"thumbs up\";\r\n      document.getElementById(\"uploadStatus\").innerText = `\u274c Upload rejected: No ${gestureType} detected.`;\r\n      await restoreButtons();\r\n      return;\r\n    }\r\n    \r\n    console.log(\"DEBUG: Gesture detected successfully. Meme upload accepted.\");\r\n    document.getElementById(\"uploadStatus\").innerHTML = `\u2705 Meme tested successfully!`;\r\n}\r\n\r\n\/\/ \u2705 Email Function\r\nasync function emailMeme() {\r\n\tdisableAllButtons();\r\n\r\n\tconst pageTitle = document.title;\r\n\tconst emailAllowed = await checkIpLimit('email', pageTitle);\r\n\tconst fileInput = document.getElementById(\"memeFile\");\r\n\tconst file = fileInput.files[0];\r\n\tconst postContent = document.getElementById(\"postContent\").value.trim();\r\n\tconst previewImage = document.getElementById(\"imagePreview\").src;\r\n    const fileBlob = new Blob([file], { type: file.type });\r\n    const fileURL = URL.createObjectURL(fileBlob);\r\n\t\r\n\tif (!file) {\r\n\t\tconsole.error(\"No file selected.\");\r\n\t\tdocument.getElementById(\"uploadStatus\").innerText = \"\u274c Please select a file.\";\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n\t\treturn;\r\n\t}\r\n\tif (!postContent) {\r\n\t\tconsole.error(\"No post content provided.\");\r\n\t\tdocument.getElementById(\"uploadStatus\").innerText = \"\u274c Please enter some text for your post.\";\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n\t\treturn;\r\n\t}\r\n   const isGestureDetected = await detectGestureFromFile(fileURL);\r\n    if (!isGestureDetected) {\r\n        let gestureType = pageTitle.indexOf(\"NOT\") > -1 ? \"middle finger\" : \"thumbs up\";\r\n        document.getElementById(\"uploadStatus\").innerText = `\u274c Upload rejected: No ${gestureType} detected.`;\r\n        await restoreButtons();\r\n        return;\r\n    }\r\n\tif (!await validateBeforeAction(\"email\")) {\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n\t\treturn;\r\n\t}\r\n    if (!visionCheckPassed) {\r\n        document.getElementById(\"uploadStatus\").innerText = \"\u274c You must select a valid image first.\";\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n        return;\r\n    }\r\n\r\n\tif (!emailAllowed) {\r\n\t\tdocument.getElementById(\"uploadStatus\").innerText = `\u274c Email limit reached for \"${pageTitle}\". You can only send one email every 12 hours on this page.`;\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n\t\treturn;\r\n\t}\r\n\r\n\ttry {\r\n\t\tlet pasteInstructions = \"The meme could not be copied automatically. Please attach the meme manually.\\n\\nHighlight and delete these instructions before attaching your meme.\\n\\n\";\r\n\r\n\t\t\/\/ Attempt to copy the image to clipboard\r\n\t\tconst response = await fetch(previewImage);\r\n\t\tconst blob = await response.blob();\r\n\r\n\t\tif (navigator.clipboard && navigator.clipboard.write) {\r\n\t\t\tawait navigator.clipboard.write([new ClipboardItem({ [blob.type]: blob })]);\r\n\t\t\tpasteInstructions = \"The meme has been copied to your clipboard. Paste it here using Ctrl+V (Cmd+V on Mac).\\n\\nHighlight and delete these instructions before pasting your meme.\\n\\n\";\r\n\t\t\tdocument.getElementById(\"uploadStatus\").innerText = \"\u2705 Meme copied to clipboard! Paste it into the email using Ctrl+V (Cmd+V on Mac).\";\r\n\t\t} else {\r\n\t\t\tdocument.getElementById(\"uploadStatus\").innerText = \"\u274c Clipboard image copy is not supported. Attach manually.\";\r\n\t\t}\r\n\r\n\t\tconst recipient = pageTitle.toLowerCase().includes(\"trump\")\r\n\t\t\t? \"president@whitehouse.gov\"\r\n\t\t\t: \"elon@example.com\";\r\n\t\tconst encodedSubject = urlEncode(\"You're #1\");\r\n\t\tconst encodedBody = legacyURLEncode(`${postContent}\\n\\n${pasteInstructions}`);\r\n\r\n\t\tconst mailtoLink = `mailto:${recipient}?subject=${encodedSubject}&body=${encodedBody}`;\r\n\r\n\t\t\/\/ Open email client and log action\r\n\t\twindow.location.href = mailtoLink;\r\n\t\tawait logIpAction('email', pageTitle); \/\/ \u2705 Log successful email action\r\n\t} catch (error) {\r\n\t\tconsole.error(\"Email or clipboard error:\", error);\r\n\t\tdocument.getElementById(\"uploadStatus\").innerText = `\u274c Email failed: ${error.message}`;\r\n\t}\r\n\tawait restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n}\r\n\r\nasync function twitterMeme() {\r\n\t\r\n\tdisableAllButtons();\r\n\r\n    const fileInput = document.getElementById(\"memeFile\");\r\n    const file = fileInput.files[0];\r\n    const postContent = encodeURIComponent(document.getElementById(\"postContent\").value);\r\n    const fileBlob = new Blob([file], { type: file.type });\r\n    const fileURL = URL.createObjectURL(fileBlob);\r\n    \r\n    if (!file) {\r\n        document.getElementById(\"uploadStatus\").innerText = \"\u274c No file selected.\";\r\n\t\tawait restoreButtons();\r\n        return;\r\n    }\r\n\tif (!postContent) {\r\n\t\tconsole.error(\"No post content provided.\");\r\n\t\tdocument.getElementById(\"uploadStatus\").innerText = \"\u274c Please enter some text for your post.\";\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n\t\treturn;\r\n\t}\r\n\tif (!await validateBeforeAction(\"twitter\")) {\r\n\t\tawait restoreButtons();\r\n\t\treturn;\r\n\t}\r\n    if (!visionCheckPassed) {\r\n        document.getElementById(\"uploadStatus\").innerText = \"\u274c You must select a valid image first.\";\r\n\t\tawait restoreButtons();\r\n        return;\r\n    }\r\n\r\n    \/\/ Upload Image First\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    formData.append(\"action\", \"upload_twitter_meme\");\r\n\r\n    try {\r\n        const response = await fetch(\"\/wp-admin\/admin-ajax.php\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (data.success) {\r\n            const imageUrl = encodeURIComponent(data.data.url);\r\n            const tweetUrl = `https:\/\/twitter.com\/intent\/tweet?text=${postContent}&url=${imageUrl}`;\r\n            window.open(tweetUrl, '_blank');\r\n        } else {\r\n            document.getElementById(\"uploadStatus\").innerText = \"\u274c Twitter upload failed.\";\r\n        }\r\n    } catch (error) {\r\n        document.getElementById(\"uploadStatus\").innerText = \"\u274c Twitter upload error.\";\r\n    }\r\n\tawait restoreButtons();\r\n}\r\n\r\n\/\/ \u2705 Upload Function\r\nasync function uploadMeme() {\r\n\tdisableAllButtons();\r\n\t\r\n\tconst pageTitle = document.title;\r\n\tconst uploadAllowed = await checkIpLimit('upload', pageTitle);\r\n\tconst fileInput = document.getElementById(\"memeFile\");\r\n\tconst file = fileInput.files[0];\r\n\tconst postContent = document.getElementById(\"postContent\").value.trim();\r\n\tconst nonce = document.getElementById(\"memeUploadNonce\").value;\r\n    const fileBlob = new Blob([file], { type: file.type });\r\n    const fileURL = URL.createObjectURL(fileBlob);\r\n\r\n\tif (!file) {\r\n\t\tconsole.error(\"No file selected.\");\r\n\t\tdocument.getElementById(\"uploadStatus\").innerText = \"\u274c Please select a file.\";\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n\t\treturn;\r\n\t}\r\n\tif (!postContent) {\r\n\t\tconsole.error(\"No post content provided.\");\r\n\t\tdocument.getElementById(\"uploadStatus\").innerText = \"\u274c Please enter some text for your post.\";\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n\t\treturn;\r\n\t}\r\n   const isGestureDetected = await detectGestureFromFile(fileURL);\r\n    if (!isGestureDetected) {\r\n        let gestureType = pageTitle.indexOf(\"NOT\") > -1 ? \"middle finger\" : \"thumbs up\";\r\n        document.getElementById(\"uploadStatus\").innerText = `\u274c Upload rejected: No ${gestureType} detected.`;\r\n        await restoreButtons();\r\n        return;\r\n    }\r\n\tif (!await validateBeforeAction(\"upload\")) {\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n\t\treturn;\r\n\t}\r\n    if (!visionCheckPassed) {\r\n        document.getElementById(\"uploadStatus\").innerText = \"\u274c You must select a valid image first.\";\r\n        await restoreButtons(); \/\/ \ud83d\udd25 Restore all buttons\r\n        return;\r\n    }\r\n\r\n    if (!uploadAllowed) {\r\n        document.getElementById(\"uploadStatus\").innerText = \r\n            `\u274c Upload limit reached for \"${pageTitle}\". You can only upload one meme every 12 hours on this page.`;\r\n        await restoreButtons();\r\n        return;\r\n    }\r\n\r\n    \r\n    \/\/ Perform the upload and log the IP action\r\n    await performUpload(file, postContent, nonce, 1, pageTitle);\r\n    \r\n    \/\/ Now call restoreButtons; enforceIpLimitsOnLoad (called inside restoreButtons) will check the new IP limit state\r\n    await restoreButtons();\r\n}\r\n\r\n\/\/ \u2705 Perform Upload with Page Title\r\nasync function performUpload(file, postContent, nonce, attempt, pageTitle) {\r\n\tconst uploadButton = document.getElementById(\"uploadMemeButton\");\r\n\tconst formData = new FormData();\r\n\tformData.append(\"file\", file);\r\n\tformData.append(\"post_content\", postContent);\r\n\tformData.append(\"action\", \"upload_meme\");\r\n\tformData.append(\"nonce\", nonce);\r\n\r\n\ttry {\r\n\t\tconst response = await fetch(\"\/wp-admin\/admin-ajax.php\", {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: formData\r\n\t\t});\r\n\t\tconst data = await response.json();\r\n\r\n\t\tif (data.success) {\r\n\t\t\tdocument.getElementById(\"uploadStatus\").innerHTML = `\u2705 Meme uploaded successfully! <br> <a href=\"${data.data.url}\" target=\"_blank\">View Meme<\/a>`;\r\n\t\t\tawait logIpAction('upload', pageTitle); \/\/ \u2705 Log successful upload action\r\n\t\t} else {\r\n\t\t\tif (attempt < 2) {\r\n\t\t\t\tawait performUpload(file, postContent, nonce, attempt + 1, pageTitle);\r\n\t\t\t} else {\r\n\t\t\t\tdocument.getElementById(\"uploadStatus\").innerText = `\u274c Upload failed: ${data.data.message || \"Unknown error\"}`;\r\n\t\t\t}\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tif (attempt < 2) {\r\n\t\t\tawait performUpload(file, postContent, nonce, attempt + 1, pageTitle);\r\n\t\t} else {\r\n\t\t\tdocument.getElementById(\"uploadStatus\").innerText = `\u274c Upload error: ${error.message}`;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n<\/script>","code_type":"html","location":"site_wide_footer","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-28 17:39:56","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1072,"title":"html-all-post-images-gallery-php","code":"\/\/ Default value if not set\r\n$rows_per_page = isset($rows_per_page) && is_numeric($rows_per_page) ? intval($rows_per_page) : 20;\r\n\r\n\/\/ Dynamic title based on $rows_per_page\r\n$gallery_title = ($rows_per_page === -1) ? \"All Memes\" : \"Latest $rows_per_page Memes\";\r\n?>\r\n\r\n<!-- Divider and Title -->\r\n<hr id=\"gallery-divider\">\r\n<h2 id=\"gallery-title\"><?php echo esc_html($gallery_title); ?><\/h2>\r\n\r\n<!-- Empty Meme Container (Content will load via AJAX) -->\r\n<div id=\"meme-gallery\">\r\n    <script>console.log(\"Meme gallery initialized.\");<\/script>\r\n<\/div>\r\n\r\n<!-- Loading Indicator -->\r\n<div id=\"loadingIndicator\">\ud83d\udd04 Loading more memes...<\/div>\r\n\r\n<script>\r\n\tdocument.addEventListener(\"DOMContentLoaded\", function () {\r\n\t\tlet page = 1;\r\n\t\tlet isLoading = false;\r\n\t\tlet hasMoreMemes = true; \/\/ \u2705 Tracks if more memes exist\r\n\t\tlet memesLoaded = 0; \/\/ \u2705 Counter to track memes loaded\r\n\t\tconst maxMemes = <?php echo $rows_per_page; ?>; \/\/ Pass PHP value to JS\r\n\t\tconst memeGallery = document.getElementById(\"meme-gallery\");\r\n\t\tconst loadingIndicator = document.getElementById(\"loadingIndicator\");\r\n\r\n\t\tconsole.log(\"\ud83d\udce2 Meme gallery initialized. First load triggered.\");\r\n\r\n\t\tasync function loadMoreMemes(initialLoad = false) {\r\n\t\t\tif (isLoading || !hasMoreMemes) {\r\n\t\t\t\tconsole.log(\"\u26a0\ufe0f Load attempt ignored (already loading or no more memes).\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tisLoading = true;\r\n\t\t\tloadingIndicator.style.display = \"block\";\r\n\t\t\tconsole.log(`\ud83d\udd04 Fetching memes for page ${page}...`);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(meme_ajax.ajax_url, {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\theaders: { \"Content-Type\": \"application\/x-www-form-urlencoded\" },\r\n\t\t\t\t\tbody: new URLSearchParams({\r\n\t\t\t\t\t\taction: \"load_memes\",\r\n\t\t\t\t\t\tnonce: meme_ajax.nonce,  \r\n\t\t\t\t\t\tpage: page\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tconsole.log(\"\u2705 Response received:\", data);\r\n\r\n\t\t\t\tif (data.success && data.data.length > 0) {\r\n\t\t\t\t\tconsole.log(`\ud83c\udf89 Successfully loaded ${data.data.length} memes.`);\r\n\r\n\t\t\t\t\tdata.data.forEach(meme => {\r\n\t\t\t\t\t\tif (maxMemes !== -1 && memesLoaded >= maxMemes) {\r\n\t\t\t\t\t\t\tconsole.log(\"\u26d4 Max memes reached. Stopping further loads.\");\r\n\t\t\t\t\t\t\thasMoreMemes = false;\r\n\t\t\t\t\t\t\twindow.removeEventListener(\"scroll\", handleScroll);\r\n\t\t\t\t\t\t\treturn; \/\/ Stop adding more memes\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst memeItem = document.createElement(\"div\");\r\n\t\t\t\t\t\tmemeItem.classList.add(\"meme-item\");\r\n\t\t\t\t\t\tmemeItem.innerHTML = `\r\n\t\t\t\t\t\t\t<img src=\"${meme.thumbnail}\" alt=\"Meme\" loading=\"lazy\">\r\n\t\t\t\t\t\t\t<p>${meme.caption}<\/p>\r\n\t\t\t\t\t\t`;\r\n\t\t\t\t\t\tmemeGallery.appendChild(memeItem);\r\n\r\n\t\t\t\t\t\tmemesLoaded++; \/\/ \u2705 Increment count\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tpage++;\r\n\t\t\t\t\tconsole.log(`\ud83d\udcc4 Page number incremented to ${page}. Ready for next load.`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"\ud83d\udeab No more memes available. Stopping infinite scroll.\");\r\n\t\t\t\t\thasMoreMemes = false; \/\/ \u2705 Prevents unnecessary requests\r\n\t\t\t\t\twindow.removeEventListener(\"scroll\", handleScroll);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"\u274c Error loading more memes:\", error);\r\n\t\t\t}\r\n\r\n\t\t\tisLoading = false;\r\n\t\t\tloadingIndicator.style.display = \"none\";\r\n\t\t}\r\n\r\n\t\tfunction handleScroll() {\r\n\t\t\tif (window.innerHeight + window.scrollY >= memeGallery.offsetHeight - 100) {\r\n\t\t\t\tconsole.log(\"\ud83d\udcdc Scroll detected near bottom. Attempting to load more memes...\");\r\n\t\t\t\tloadMoreMemes();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tloadMoreMemes(true); \/\/ Load first batch on page load\r\n\t\twindow.addEventListener(\"scroll\", handleScroll);\r\n\t});\r\n<\/script>\r\n\r\n<style>\r\n    #gallery-divider {\r\n        width: 80%;\r\n        margin: 40px auto 20px;\r\n        border: 0;\r\n        height: 2px;\r\n        background: linear-gradient(to right, #ccc, #333, #ccc);\r\n    }\r\n\r\n    #gallery-title {\r\n        text-align: center;\r\n        font-size: 2rem;\r\n        font-weight: bold;\r\n        margin: 20px 0;\r\n        color: #333;\r\n    }\r\n\r\n    #meme-gallery {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n        grid-auto-flow: dense;\r\n        gap: 15px;\r\n        padding: 0;\r\n        margin: 0 auto;\r\n        width: 100%;\r\n        max-width: 1600px;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .meme-item {\r\n        background: #fff;\r\n        border-radius: 8px;\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n        overflow: hidden;\r\n        text-align: center;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .meme-item img {\r\n        width: 100%;\r\n        height: auto;\r\n        display: block;\r\n    }\r\n\r\n    .meme-item p {\r\n        padding: 10px;\r\n        margin: 0;\r\n        font-size: 1rem;\r\n        font-weight: bold;\r\n        background-color: #f7f7f7;\r\n    }\r\n\r\n    #loadingIndicator {\r\n        text-align: center;\r\n        padding: 20px;\r\n        font-size: 1.2rem;\r\n        color: #666;\r\n        display: none;\r\n    }\r\n<\/style>","code_type":"php","location":"","auto_insert":0,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":["rows_per_page"],"compiled_code":"","modified":"2025-02-27 10:49:04","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1106,"title":"html-meme-gallery-load-php","code":"function load_memes_ajax() {\r\n    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'load_more_memes_nonce')) {\r\n        wp_send_json(['success' => false, 'message' => 'Security check failed.'], 403);\r\n        exit;\r\n    }\r\n\r\n    nocache_headers();\r\n\r\n    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;\r\n    $posts_per_page = 20;\r\n\r\n    \/\/ \ud83d\udd39 Ensure first page correctly loads expected results\r\n    if ($page === 1) {\r\n        $offset = 0;\r\n    \t$posts_per_page = $posts_per_page + 1;\r\n    } else {\r\n        $offset = ($page - 1) * $posts_per_page;\r\n    }\r\n\t\r\n    $query = new WP_Query([\r\n        'post_type'      => 'post',\r\n        'posts_per_page' => $posts_per_page,\r\n        'paged'          => $page,\r\n        'offset'         => $offset, \/\/ \ud83d\udd39 Fix for pagination loading correctly\r\n        'orderby'        => 'date',\r\n        'order'          => 'DESC'\r\n    ]);\r\n\r\n    $memes = [];\r\n    if ($query->have_posts()) {\r\n        while ($query->have_posts()) {\r\n            $query->the_post();\r\n            $image_url = get_the_post_thumbnail_url(get_the_ID(), 'medium');\r\n\r\n            if (!$image_url) {\r\n                $content = get_the_content();\r\n                preg_match('\/<img.+src=[\\'\"]([^\\'\"]+)[\\'\"].*>\/i', $content, $matches);\r\n                if (isset($matches[1])) {\r\n                    $image_url = $matches[1];\r\n                }\r\n            }\r\n\r\n            if ($image_url) {\r\n                $memes[] = [\r\n                    'thumbnail' => esc_url($image_url),\r\n                    'caption'   => esc_html(get_the_title()),\r\n                ];\r\n            }\r\n        }\r\n        wp_reset_postdata();\r\n    }\r\n\r\n    if (!empty($memes)) {\r\n        wp_send_json([\r\n            'success' => true,\r\n            'data'    => $memes\r\n        ]);\r\n    } else {\r\n        wp_send_json([\r\n            'success' => false,\r\n            'message' => 'No more memes.'\r\n        ]);\r\n    }\r\n}\r\n\r\nadd_action('wp_ajax_load_memes', 'load_memes_ajax');\r\nadd_action('wp_ajax_nopriv_load_memes', 'load_memes_ajax');\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-27 11:00:41","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1107,"title":"extend-wpcode-enqueue-scripts-php","code":"function enqueue_meme_scripts() {\r\n    wp_enqueue_script('meme-gallery-script', get_template_directory_uri() . '\/js\/meme-gallery.js', array('jquery'), null, true);\r\n\r\n    wp_localize_script('meme-gallery-script', 'meme_ajax', [\r\n        'ajax_url' => admin_url('admin-ajax.php'),\r\n        'nonce'    => wp_create_nonce('load_more_memes_nonce')\r\n    ]);\r\n}\r\n\r\nadd_action('wp_enqueue_scripts', 'enqueue_meme_scripts');\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-27 10:54:48","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1114,"title":"html-welcome-page-body","code":"<div class=\"container\">\r\n\t<h1>\ud83d\udd25 Trump & Musk Are #1! \u2026 Or Are They? \ud83d\udd25<\/h1>\r\n\t<p>\r\n\t\tWelcome to the most <i>honest<\/i> fan page on the internet!  \r\n\t\tWhether you're <b>TEAM Trump\/Musk<\/b> or <b>definitely NOT<\/b>,  \r\n\t\texpress yourself with a meme.\r\n\t<\/p>\r\n\r\n\t<!-- Selection for Trump or Elon -->\r\n\t<div class=\"selection\">\r\n\t\t<label>\r\n\t\t\t<input type=\"radio\" name=\"person\" value=\"trump\" checked> <span>Donald Trump<\/span>\r\n\t\t<\/label>\r\n\t\t<label>\r\n\t\t\t<input type=\"radio\" name=\"person\" value=\"elon\"> <span>Elon Musk<\/span>\r\n\t\t<\/label>\r\n\t<\/div>\r\n\r\n\t<!-- TEAM & NOT Buttons -->\r\n\t<div class=\"buttons\">\r\n\t\t<button class=\"button button-not\" onclick=\"goToPage('not')\">\ud83d\udd95 NOT - Create a Disapproval Meme<\/button>\r\n\t\t<button class=\"button button-neutral\" onclick=\"openModal('awarenessModal')\">\ud83e\udd37 I Don't Care About Politics!<\/button>\r\n\t\t<button class=\"button button-team\" onclick=\"goToPage('team')\">\ud83d\udc4d TEAM - Create an Approval Meme<\/button>\r\n\t\t<button class=\"button button-donate\" onclick=\"window.location.href='https:\/\/elonandtrumpnumberone.com\/donate-page\/'\">\ud83d\udcb0 DONATE - Share Your Generosity<\/button>\r\n\t\t<button class=\"button button-info\" onclick=\"openModal('infoModal')\">\u2139\ufe0f More Info & Instructions<\/button>\r\n\t\t<button class=\"button button-inspire\" onclick=\"openModal('inspirationModal')\">\ud83e\udd14 What Inspired This Site?<\/button>\r\n\t<\/div>\r\n<\/div>\r\n\r\n<!-- New Modal: Why You Should Care About Politics -->\r\n<div id=\"awarenessModal\" class=\"modal\">\r\n\t<div class=\"modal-content scrollable\">\r\n\t\t<span class=\"close\" onclick=\"closeModal('awarenessModal')\">&times;<\/span>\r\n\t\t<h2>\ud83e\udd37 \"I Don't Care About Politics!\"<\/h2>\r\n\t\t<p>\r\n\t\t\tNot long ago, you could afford to ignore politics. You could go about your life,\r\n\t\t\ttrust that America stood for democracy, and assume that leaders would make decisions\r\n\t\t\tin the best interests of the people.\r\n\t\t<\/p>\r\n\t\t<p><b>But this is not normal politics.<\/b><\/p>\r\n\t\t<p>\r\n\t\t\tWhat is happening today is <b>not just \"politics as usual.\"<\/b>  \r\n\t\t\tPeople lump politics into a big bucket to ignore it,  \r\n\t\t\tbut this is <b>not politics as we\u2019ve ever known it.<\/b>\r\n\t\t<\/p>\r\n\r\n\t\t<!-- \ud83d\udd34 Press Suppression -->\r\n\t\t<h3>\ud83d\udce2 The White House is Controlling the Press<\/h3>\r\n\t\t<p>A free press is the foundation of democracy. But the White House is now:<\/p>\r\n\t\t<ul>\r\n\t\t\t<li><b>Handpicking which journalists can cover Trump<\/b>, bypassing the independent White House Press Corps.<\/li>\r\n\t\t\t<li><b>Banning major news outlets like the Associated Press<\/b> for refusing to use government-approved language.<\/li>\r\n\t\t\t<li><b>Directly controlling the press pool<\/b>, deciding who gets access to presidential events.<\/li>\r\n\t\t<\/ul>\r\n\t\t<p>\r\n\t\t\tThese are <b>tactics used by authoritarian regimes<\/b> to silence criticism and manipulate public perception.  \r\n\t\t\t<a href=\"https:\/\/www.thetimes.co.uk\/article\/we-decide-who-gets-close-to-trump-white-house-tells-press-pool-x3wgbvg9p\" target=\"_blank\">[Source]<\/a>  \r\n\t\t\t<a href=\"https:\/\/www.axios.com\/2025\/02\/24\/trump-ap-access-lawsuit-white-house-filing\" target=\"_blank\">[Source]<\/a>  \r\n\t\t\t<a href=\"https:\/\/apnews.com\/article\/25c77f617418dd3ca2791af90b263a59\" target=\"_blank\">[Source]<\/a>\r\n\t\t<\/p>\r\n\r\n\t\t<!-- \ud83d\udd34 Trump\u2019s Rhetoric and Historical Parallels -->\r\n\t\t<h3>\u26a0\ufe0f The Return of Fascist Language<\/h3>\r\n\t\t<p>\r\n\t\t\t<b>Donald Trump has used Hitler\u2019s exact words<\/b> to describe immigrants,  \r\n\t\t\tsaying they are <i>\u201cpoisoning the blood of our country.\u201d<\/i>  \r\n\t\t\t<a href=\"https:\/\/www.theguardian.com\/us-news\/2023\/dec\/16\/trump-immigrants-new-hampshire-rally\" target=\"_blank\">[Source]<\/a>\r\n\t\t<\/p>\r\n\r\n\t\t<!-- \ud83d\udea8 Project 2025 -->\r\n\t\t<h3>\ud83d\udea8 Project 2025 is Happening Right Now<\/h3>\r\n\t\t<p>Project 2025 is a plan developed by conservative think tanks to <b>take full control of the U.S. government<\/b> and reshape it to serve one political movement.<\/p>\r\n\t\t<p><b>Key goals of Project 2025:<\/b><\/p>\r\n\t\t<ul>\r\n\t\t\t<li><b>Fire thousands of career civil servants<\/b> and replace them with Trump loyalists.<\/li>\r\n\t\t\t<li><b>Expand presidential power<\/b> so courts and Congress can\u2019t stop authoritarian policies.<\/li>\r\n\t\t\t<li><b>Eliminate agencies<\/b> like the Department of Education & dismantle regulations.<\/li>\r\n\t\t\t<li><b>Restrict voting rights<\/b> to make sure the opposition cannot win elections.<\/li>\r\n\t\t<\/ul>\r\n\t\t<p>\r\n\t\t\tThis is <b>not a conspiracy theory<\/b>\u2014this plan is public and is being enacted <b>right now<\/b>.  \r\n\t\t\t<a href=\"https:\/\/time.com\/7209901\/donald-trump-executive-actions-project-2025\" target=\"_blank\">[Source]<\/a>  \r\n\t\t\t<a href=\"https:\/\/www.wired.com\/story\/project-2025-cisa-election-critical-infrastructure-security\" target=\"_blank\">[Source]<\/a>\r\n\t\t<\/p>\r\n\r\n\t\t<!-- \u26a0\ufe0f Historical Warning -->\r\n\t\t<h3>\u26a0\ufe0f History Shows How Democracy Falls\u2014Fast<\/h3>\r\n\t\t<p>\r\n\t\t\tIt took <b>just 53 days<\/b> for Hitler to <b>legally<\/b> dismantle Germany\u2019s democracy.  \r\n\t\t\tHe used existing laws to <b>declare emergencies, silence critics, and consolidate power.<\/b>  \r\n\t\t\t<a href=\"https:\/\/www.theatlantic.com\/ideas\/archive\/2025\/01\/hitler-germany-constitution-authoritarianism\/681233\/\" target=\"_blank\">[Read how it happened]<\/a>.\r\n\t\t<\/p>\r\n\r\n\t\t<!-- \u26a0\ufe0f Final Warning -->\r\n\t\t<h3>\u26a0\ufe0f Ignoring This Won\u2019t Make It Go Away<\/h3>\r\n\t\t<p>\r\n\t\t\t<b>We would all rather be wrong about these warnings.<\/b>  \r\n\t\t\tIf the worst doesn\u2019t happen, that\u2019s fantastic. But if it does, we can\u2019t say  \r\n\t\t\twe didn\u2019t see it coming.  \r\n\t\t<\/p>\r\n\t\t<p>\r\n\t\t\tHistory has shown that <b>by the time people wake up, it\u2019s often too late.<\/b>  \r\n\t\t\tIf we\u2019re overreacting, no harm is done. But if we\u2019re right, speaking up now  \r\n\t\t\tmay be the only way to prevent disaster.\r\n\t\t<\/p>\r\n\t\t<p><b>Here\u2019s what you CAN do:<\/b><\/p>\r\n\t\t<ul>\r\n\t\t\t<li>Seek <b>multiple sources<\/b>\u2014<i>never<\/i> get your news from just one place.<\/li>\r\n\t\t\t<li><b>Avoid social media news<\/b>\u2014it\u2019s filled with misinformation.<\/li>\r\n\t\t\t<li>Look at what <b>the rest of the world<\/b> is saying about the U.S.<\/li>\r\n\t\t\t<li>Don\u2019t let frustration turn into apathy\u2014<b>being aware = being empowered.<\/b><\/li>\r\n\t\t<\/ul>\r\n\t\t<p>\r\n\t\t\tEven if you don't like politics, <b>politics affects your life.<\/b>  \r\n\t\t\tStay informed. Stay aware.  \r\n\t\t<\/p>\r\n\t\t<div class=\"modal-button-container\">\r\n\t\t\t<button class=\"modal-close-button\" onclick=\"closeModal('awarenessModal')\">Close<\/button>\r\n\t\t<\/div>\r\n\t<\/div>\r\n<\/div>\r\n\r\n<!-- Pop-up Modal for Info Button -->\r\n<div id=\"infoModal\" class=\"modal\">\r\n\t<div class=\"modal-content\">\r\n\t\t<span class=\"close\" onclick=\"closeModal('infoModal')\">&times;<\/span>\r\n\t\t<h2>\ud83d\udce2 How It Works<\/h2>\r\n\t\t<p>\ud83d\udc40 Want to show your support or disapproval? It's easy:<\/p>\r\n\t\t<ul>\r\n\t\t\t<li><strong>\ud83d\udc4d TEAM:<\/strong> Upload a meme giving a <b>thumbs-up<\/b> for Trump\/Musk.<\/li>\r\n\t\t\t<li><strong>\ud83d\udd95 NOT:<\/strong> Upload a meme flipping them the <b>middle finger<\/b>.<\/li>\r\n\t\t\t<li><strong>\ud83d\udcb0 DONATE:<\/strong> Support the project by making a donation.<\/li>\r\n\t\t<\/ul>\r\n\t\t<p>All memes will be reviewed before being added to the gallery.<\/p>\r\n\t\t<p>Have fun and let the world know where you stand!<\/p>\r\n\t\t<div class=\"modal-button-container\">\r\n\t\t\t<button class=\"modal-close-button\" onclick=\"closeModal('infoModal')\">Close<\/button>\r\n\t\t<\/div>\r\n\t<\/div>\r\n<\/div>\r\n\r\n<!-- Pop-up Modal for \"What Inspired This Site?\" -->\r\n<div id=\"inspirationModal\" class=\"modal\">\r\n\t<div class=\"modal-content scrollable\">\r\n\t\t<span class=\"close\" onclick=\"closeModal('inspirationModal')\">&times;<\/span>\r\n\t\t<h2>\ud83e\udd14 Why This Site?<\/h2>\r\n\t\t<p>\r\n\t\t\tThis site was inspired by the absurdity of modern politics, the hypocrisy of some of its key players, \r\n\t\t\tand the gaslighting tactics used by Trump and Musk. Their ability to manipulate narratives, distort \r\n\t\t\treality, and redefine words to suit their agenda motivated the creation of this sarcastic \"fan\" page.  \r\n\t\t<\/p>\r\n\t\t<p>\r\n\t\t\tWait, you're not sure what that means? Maybe it's all just a joke?  \r\n\t\t\t<a href=\"https:\/\/elonandtrumpnumberone.com\/about\/\" target=\"_blank\"><b>For even more context, click here.<\/b><\/a>\r\n\t\t<\/p>\r\n\t\t<p>\r\n\t\t\tHere, people can express their true opinions through memes, humor, and creativity\u2014whether they \r\n\t\t\tsupport these figures or want to send them a loud and clear message. \r\n\t\t<\/p>\r\n\t\t<p><b>\ud83d\udd95 Why the Middle Finger?<\/b><\/p>\r\n\t\t<p>\r\n\t\t\tThe middle finger salute has become a universal response to authoritarianism, corruption, \r\n\t\t\tand billionaire ego-trips. Instead of letting them define the narrative, let's take ownership of it.\r\n\t\t<\/p>\r\n\t\t<p>\r\n\t\t\tSince we are now allowed to redefine what gestures mean, this website follows the same logic.\r\n\t\t\tWhen people submit photos or videos flipping the middle finger, it is clearly meant to mean:\r\n\t\t\t<b>\u201cTrump and Musk are number one!\u201d<\/b>\r\n\t\t<\/p>\r\n\t\t<p><i>We are simply playing by their rules.<\/i><\/p>\r\n\t\t<p>\r\n\t\t\tAnd of course, <b>thumbs-up gestures<\/b> will also follow this same logic!  \r\n\t\t\tIf a thumbs-up can now mean <i>\"support,\"<\/i> then surely a middle finger  \r\n\t\t\tcan mean the <b>exact same thing<\/b> in this new reality.\r\n\t\t<\/p>\r\n\t\t<p>\r\n\t\t\tSo no matter which one you choose\u2014<b>thumbs-up or middle finger<\/b>\u2014  \r\n\t\t\tyou\u2019re proudly declaring that <b>Trump and Musk are #1!<\/b>\r\n\t\t<\/p>\r\n\t\t<p>\r\n\t\t\tIf this site made you laugh, roll your eyes, or feel empowered, then it\u2019s doing exactly what it was \r\n\t\t\tmeant to do. Have fun and let your voice be heard!\r\n\t\t<\/p>\r\n\t\t<div class=\"modal-button-container\">\r\n\t\t\t<button class=\"modal-close-button\" onclick=\"closeModal('inspirationModal')\">Close<\/button>\r\n\t\t<\/div>\r\n\t<\/div>\r\n<\/div>\r\n\r\n","code_type":"html","location":"","auto_insert":0,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-27 10:52:55","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1118,"title":"html-welcome-page-markup","code":"<meta charset=\"UTF-8\">\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n<title>Trump & Musk - Number One?<\/title>\r\n\r\n<style>\r\n\t\r\nbody {\r\n\ttext-align: center;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n\r\n.container {\r\n\tmax-width: 800px;\r\n\tmargin: 50px auto;\r\n\tpadding: 20px;\r\n\tborder-radius: 10px;\r\n}\r\n\r\nh1 {\r\n\tfont-size: 2.5rem;\r\n\tmargin-bottom: 10px;\r\n\ttext-transform: uppercase;\r\n\tletter-spacing: 2px;\r\n}\r\n\r\np {\r\n\tfont-size: 1.2rem;\r\n\tmargin-bottom: 30px;\r\n\tline-height: 1.6;\r\n}\r\n\r\n.selection {\r\n\tmargin-bottom: 20px;\r\n\tfont-size: 1.2rem;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\tgap: 20px;\r\n}\r\n\r\n.selection label {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tgap: 8px;\r\n\tcursor: pointer;\r\n\tfont-size: 1.2rem;\r\n}\r\n\r\n\/* Button Styling *\/\r\n.buttons {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tgap: 15px;\r\n\talign-items: center;\r\n}\r\n\r\n.button {\r\n\tdisplay: inline-flex; \/* Ensures consistent button sizing *\/\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\twidth: 250px; \/* Uniform width for all buttons *\/\r\n\tpadding: 15px;\r\n\tfont-size: 1.3rem;\r\n\tfont-weight: bold;\r\n\ttext-transform: uppercase;\r\n\tcolor: white;\r\n\ttext-decoration: none;\r\n\tborder-radius: 8px;\r\n\ttransition: 0.3s;\r\n\tcursor: pointer;\r\n\ttext-align: center;\r\n\tborder: none;\r\n}\r\n\r\n\/* Individual Button Colors *\/\r\n.button-donate { background-color: #4CAF50; } \/* Green *\/\r\n.button-team { background-color: #e63946; } \/* Red *\/\r\n.button-info { background-color: #f4a261; } \/* Orange *\/\r\n.button-not { background-color: #3498db; } \/* Blue *\/\r\n.button-inspire { background-color: #8e44ad; } \/* Purple *\/\r\n\r\n\/* Button Hover Effect *\/\r\n.button:hover {\r\n\topacity: 0.8;\r\n\ttransform: scale(1.05);\r\n}\r\n\r\n\/* Modal Styles *\/\r\n.modal {\r\n\tdisplay: none;\r\n\tposition: fixed;\r\n\tz-index: 1000;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tbackground-color: rgba(0, 0, 0, 0.6);\r\n}\r\n\r\n\/* Modal Content Box *\/\r\n.modal-content {\r\n\tbackground-color: white;\r\n\tcolor: black;\r\n\tpadding: 20px;\r\n\tborder-radius: 8px;\r\n\tmax-width: 500px;\r\n\tmargin: 15% auto;\r\n\ttext-align: left;\r\n\tposition: relative;\r\n}\r\n\r\n\/* Close Button *\/\r\n.close {\r\n\tposition: absolute;\r\n\ttop: 10px;\r\n\tright: 15px;\r\n\tfont-size: 1.5rem;\r\n\tcursor: pointer;\r\n}\r\n\r\n\/* Responsive Styles *\/\r\n@media (max-width: 600px) {\r\n\th1 { font-size: 2rem; }\r\n\t.button { width: 90%; }\r\n\t.modal-content { width: 90%; }\r\n\t.selection {\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t}\r\n}\r\n\r\n\/* Scrollable Modal Content *\/\r\n.modal-content.scrollable {\r\n\tmax-height: 70vh;\r\n\toverflow-y: auto;\r\n\tpadding-right: 10px; \/* Prevents scrollbar from overlapping text *\/\r\n}\r\n\/* Close Button Inside Modal *\/\r\n.modal-close-button {\r\n\tdisplay: block;\r\n\tmargin: 20px auto 0;\r\n\tpadding: 10px 20px;\r\n\tfont-size: 1rem;\r\n\tfont-weight: bold;\r\n\tcolor: white;\r\n\tbackground-color: #333; \/* Dark Gray *\/\r\n\tborder: none;\r\n\tborder-radius: 5px;\r\n\tcursor: pointer;\r\n\ttext-transform: uppercase;\r\n\ttransition: 0.3s;\r\n}\r\n\r\n.modal-close-button:hover {\r\n\tbackground-color: #555; \/* Slightly Lighter Gray *\/\r\n}\r\n.button-neutral { background-color: #7f8c8d; } \/* Gray *\/\r\n.button-neutral:hover { background-color: #95a5a6; } \/* Lighter Gray *\/\r\n\r\n<\/style>","code_type":"html","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-25 20:53:53","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1119,"title":"html-welcome-page-js","code":"\r\nfunction goToPage(choice) {\r\n\tlet selectedPerson = document.querySelector('input[name=\"person\"]:checked');\r\n\tif (!selectedPerson) {\r\n\t\talert(\"Please select Trump or Elon.\");\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet person = selectedPerson.value;\r\n\tlet url = \"\";\r\n\r\n\t\/\/ Assign correct URLs based on selection\r\n\tif (person === \"trump\" && choice === \"team\") {\r\n\t\turl = \"https:\/\/elonandtrumpnumberone.com\/donald-trump-is-number-one-2\/\";\r\n\t} else if (person === \"trump\" && choice === \"not\") {\r\n\t\turl = \"https:\/\/elonandtrumpnumberone.com\/donald-trump-is-number-one\/\";\r\n\t} else if (person === \"elon\" && choice === \"team\") {\r\n\t\turl = \"https:\/\/elonandtrumpnumberone.com\/team-musk\/\";\r\n\t} else if (person === \"elon\" && choice === \"not\") {\r\n\t\turl = \"https:\/\/elonandtrumpnumberone.com\/elon-musk-is-number-one\/\";\r\n\t}\r\n\r\n\t\/\/ Redirect to the selected page\r\n\tif (url) {\r\n\t\twindow.location.href = url;\r\n\t} else {\r\n\t\talert(\"Something went wrong.\");\r\n\t}\r\n}\r\n\r\n\/\/ Open Modal & Scroll to Top\r\nfunction openModal(modalId) {\r\n\tlet modal = document.getElementById(modalId);\r\n\tif (modal) {\r\n\t\tmodal.style.display = \"block\";\r\n\t\tsetTimeout(() => modal.scrollTop = 0, 10);\r\n\t}\r\n}\r\n\r\n\/\/ Close Modal\r\nfunction closeModal(modalId) {\r\n\tlet modal = document.getElementById(modalId);\r\n\tif (modal) {\r\n\t\tmodal.style.display = \"none\";\r\n\t}\r\n}\r\n\r\n\/\/ Close modal when clicking outside\r\nwindow.onclick = function(event) {\r\n\tif (event.target.classList.contains(\"modal\")) {\r\n\t\tevent.target.style.display = \"none\";\r\n\t}\r\n};\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-25 20:35:53","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1153,"title":"html-upload-common-js","code":"\/\/ \u2705 Check if IP has reached limit for a specific action and page\r\nasync function checkIpLimit(actionType, pageTitle) {\r\n    const encodedTitle = encodeURIComponent(pageTitle);\r\n    const response = await fetch(`\/wp-admin\/admin-ajax.php?action=check_ip_limit&action_type=${actionType}&page_title=${encodedTitle}`);\r\n    const data = await response.json();\r\n    return data.allowed;\r\n}\r\n\r\n\/\/ \u2705 Disable buttons if IP limit reached on page load\r\nasync function enforceIpLimitsOnLoad() {\r\n    const pageTitle = document.title;\r\n\r\n    \/\/ Check upload limit\r\n    const uploadAllowed = await checkIpLimit('upload', pageTitle);\r\n    if (!uploadAllowed) {\r\n        document.getElementById(\"uploadMemeButton\").disabled = true;\r\n        document.getElementById(\"uploadStatus\").innerText = `\u274c Upload limit reached for \"${pageTitle}\". You can only upload one meme every 12 hours.`;\r\n    } else {\r\n        document.getElementById(\"uploadMemeButton\").disabled = false;\r\n\t}\r\n\r\n    \/\/ Check email limit\r\n    const emailAllowed = await checkIpLimit('email', pageTitle);\r\n    if (!emailAllowed) {\r\n        document.getElementById(\"emailMemeButton\").disabled = true;\r\n        document.getElementById(\"uploadStatus\").innerText += `\\n\u274c Email limit reached for \"${pageTitle}\". You can only send one email every 12 hours.`;\r\n    } else {\r\n        document.getElementById(\"emailMemeButton\").disabled = false;\r\n\t}\r\n    document.getElementById(\"twitterMemeButton\").disabled = false;\r\n}\r\n\r\n\/\/ \u2705 Log successful action after upload or email\r\nasync function logIpAction(actionType, pageTitle) {\r\n    const encodedTitle = encodeURIComponent(pageTitle);\r\n    await fetch(`\/wp-admin\/admin-ajax.php?action=log_ip_action&action_type=${actionType}&page_title=${encodedTitle}`);\r\n}\r\n\r\n\/\/ \u2705 Clear limits for testing\r\nasync function clearLimits() {\r\n    const response = await fetch('\/wp-admin\/admin-ajax.php?action=clear_ip_limits');\r\n    const data = await response.json();\r\n\r\n    if (data.success) {\r\n        alert(\"\u2705 Limits cleared successfully.\");\r\n        document.getElementById(\"uploadStatus\").innerText = \"\u2705 Limits cleared. You can test again.\";\r\n        await enforceIpLimitsOnLoad();\r\n    } else {\r\n        alert(\"\u274c Failed to clear limits.\");\r\n    }\r\n}\r\n\r\n\/\/ \u2705 URL Encoding Functions\r\nfunction urlEncode(text) {\r\n\treturn encodeURIComponent(text);\r\n}\r\n\r\nfunction legacyURLEncode(text) {\r\n\treturn escape(text);\r\n}\r\n\r\n\/\/ \u2705 Preview Selected Image\r\nfunction previewImage() {\r\n\tconst fileInput = document.getElementById(\"memeFile\");\r\n\tconst previewContainer = document.getElementById(\"imagePreviewContainer\");\r\n\tconst previewImage = document.getElementById(\"imagePreview\");\r\n\r\n\tif (!fileInput.files || fileInput.files.length === 0) {\r\n\t\tpreviewContainer.style.display = \"none\";\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst file = fileInput.files[0];\r\n\r\n\tif (!file.type.startsWith(\"image\/\")) {\r\n\t\tdocument.getElementById(\"uploadStatus\").innerText = \"\u274c Please select a valid image file.\";\r\n\t\tpreviewContainer.style.display = \"none\";\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst reader = new FileReader();\r\n\treader.onload = function (e) {\r\n\t\tpreviewImage.src = e.target.result;\r\n\t\tpreviewContainer.style.display = \"block\";\r\n\t};\r\n\r\n\treader.readAsDataURL(file);\r\n}\r\n\r\n\/\/ \u2705 Google Vision Validation\r\nlet lastValidatedFile = null;\r\nlet lastValidatedText = \"\";\r\nlet visionCheckPassed = false;\r\n\r\nasync function validateBeforeAction(actionType) {\r\n    const fileInput = document.getElementById(\"memeFile\");\r\n    const file = fileInput.files[0];\r\n    const currentText = document.getElementById(\"postContent\").value.trim();\r\n\r\n    \/\/ Check if the file or text actually changed\r\n    const fileChanged = !lastValidatedFile || file?.name !== lastValidatedFile.name || file?.size !== lastValidatedFile.size;\r\n    const textChanged = currentText !== lastValidatedText;\r\n\r\n    if (fileChanged || textChanged) {\r\n        \/\/ Reset validation and recheck\r\n        visionCheckPassed = false;\r\n        document.getElementById(\"uploadStatus\").innerText = \"\ud83d\udd0d Revalidating changes...\";\r\n\r\n        \/\/ If a file exists, validate it\r\n        if (file) {\r\n            visionCheckPassed = await validateFileWithVision(file);\r\n        }\r\n\r\n        if (!visionCheckPassed) {\r\n            document.getElementById(\"uploadStatus\").innerText = \"\u274c Validation failed.\";\r\n            return false; \/\/ Stop the action\r\n        }\r\n\r\n        \/\/ Update the last validated state\r\n        lastValidatedFile = file ? { name: file.name, size: file.size } : null;\r\n        lastValidatedText = currentText;\r\n    }\r\n\r\n    return true; \/\/ Proceed with the action\r\n}\r\n\r\n\/\/ \/\/ \u2705 Validate File with Google Vision API\r\nasync function validateFileWithVision(file) {\r\n    document.getElementById(\"uploadStatus\").innerText = \"\ud83d\udd0d Validating image...\";\r\n    visionCheckPassed = false;\r\n\r\n    const reader = new FileReader();\r\n    return new Promise((resolve, reject) => {\r\n        reader.onload = async function (event) {\r\n            const base64Image = event.target.result.split(',')[1];\r\n\r\n            try {\r\n                const response = await fetch('\/wp-admin\/admin-ajax.php?action=analyze_image', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application\/json' },\r\n                    body: JSON.stringify({ image_data: base64Image })\r\n                });\r\n\r\n                const result = await response.json();\r\n                if (result.success) {\r\n                    document.getElementById(\"uploadStatus\").innerText = \"\u2705 Image approved!\";\r\n                    lastValidatedFile = { name: file.name, size: file.size };\r\n                    visionCheckPassed = true;\r\n                    resolve(true);\r\n                } else {\r\n                    document.getElementById(\"uploadStatus\").innerText = `\u274c Image rejected: ${result.message}`;\r\n                    visionCheckPassed = false;\r\n                    resolve(false);\r\n                }\r\n            } catch (error) {\r\n                document.getElementById(\"uploadStatus\").innerText = \"\u274c Error validating image. Try again.\";\r\n                visionCheckPassed = false;\r\n                resolve(false);\r\n            }\r\n        };\r\n\r\n        reader.onerror = (err) => {\r\n            document.getElementById(\"uploadStatus\").innerText = \"\u274c Error reading file.\";\r\n            visionCheckPassed = false;\r\n            reject(err);\r\n        };\r\n\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\n\/\/ \u2705 Check if the File is the Same as Last Validated One\r\nfunction isSameFile(file) {\r\n    return lastValidatedFile && file.name === lastValidatedFile.name && file.size === lastValidatedFile.size;\r\n}\r\n\t\r\n\/\/ \u2705 Disable all buttons during processing\r\nfunction disableAllButtons() {\r\n    document.getElementById(\"uploadMemeButton\").disabled = true;\r\n    document.getElementById(\"emailMemeButton\").disabled = true;\r\n    document.getElementById(\"twitterMemeButton\").disabled = true;\r\n}\r\n\r\n\/\/ \u2705 Restore button states after processing\r\nasync function restoreButtons(successButton = null) {\r\n    await enforceIpLimitsOnLoad();\r\n    if (successButton) {\r\n        successButton.disabled = true;\r\n    }\r\n}\r\n\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-27 10:47:23","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1178,"title":"html-meme-detection-file-js","code":"async function detectGestureFromFileGeneric2(fileURL, gestureCheck, runs = 100, debug = false) {\r\n  if (debug) {\r\n    console.log(\"\ud83d\udd0d Running MediaPipe detection for: \" + fileURL + \" (up to \" + runs + \" runs)\");\r\n  }\r\n\r\n  \/\/ Load the image.\r\n  const image = new Image();\r\n  image.src = fileURL;\r\n  if (debug) {\r\n    console.log(\"DEBUG: Loading image from: \" + fileURL);\r\n  }\r\n  await new Promise(function (resolve, reject) {\r\n    image.onload = function () {\r\n      if (debug) {\r\n        console.log(\"DEBUG: Image loaded successfully\");\r\n      }\r\n      resolve();\r\n    };\r\n    image.onerror = function (error) {\r\n      console.error(\"ERROR: Image failed to load\", error);\r\n      reject(error);\r\n    };\r\n  });\r\n\r\n  \/\/ Draw the image on a canvas.\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = image.width;\r\n  canvas.height = image.height;\r\n  if (debug) {\r\n    console.log(\"DEBUG: Canvas created with dimensions: \" + canvas.width + \"x\" + canvas.height);\r\n  }\r\n  const ctx = canvas.getContext(\"2d\");\r\n  ctx.drawImage(image, 0, 0, image.width, image.height);\r\n  if (debug) {\r\n    console.log(\"DEBUG: Image drawn on canvas\");\r\n  }\r\n\r\n  \/\/ Initialize MediaPipe Hands.\r\n  \/\/ For averaging, it is best to keep maxNumHands consistent; here we set it to 1.\r\n  if (debug) {\r\n    console.log(\"DEBUG: Initializing MediaPipe Hands for file detection\");\r\n  }\r\n  const hands = new Hands({\r\n    locateFile: function (file) {\r\n      return \"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/hands\/\" + file;\r\n    }\r\n  });\r\n  hands.setOptions({\r\n    maxNumHands: 2,\r\n    modelComplexity: 1,\r\n            minDetectionConfidence: 0.3,\r\n            minHandPresenceConfidence: 0.4,\r\n            minTrackingConfidence: 0.4,\r\n  });\r\n\r\n  \/\/ Helper function: run detection on the current canvas frame.\r\n  async function runDetectionOnce() {\r\n    return new Promise(function (resolve, reject) {\r\n      hands.onResults(function (results) {\r\n        resolve(results);\r\n      });\r\n      hands.send({ image: canvas }).catch(function (error) {\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  \/\/ Collect landmarks from runs where a hand is detected.\r\n  var collectedLandmarks = [];\r\n  for (var i = 0; i < 100; i++) {\r\n\tif ( i === 10 && collectedLandmarks.length === 0) break;\r\n\t  \r\n    var resultData = await runDetectionOnce();\r\n    if (resultData && resultData.multiHandLandmarks && resultData.multiHandLandmarks.length) {\r\n      if (debug) {\r\n        console.log(\"DEBUG: Run \" + (i + 1) + \": Detected \" + resultData.multiHandLandmarks.length + \" hand(s).\");\r\n      }\r\n      \/\/ Use the first hand detected on this run.\r\n      collectedLandmarks.push(resultData.multiHandLandmarks[0]);\r\n      if (collectedLandmarks.length === runs) break;\r\n    } else {\r\n      if (debug) {\r\n        console.log(\"DEBUG: Run \" + (i + 1) + \": No hand detected.\");\r\n      }\r\n    }\r\n  }\r\n  if (debug) {\r\n    console.log(\"DEBUG: Total successful detection runs: \" + collectedLandmarks.length + \" out of \" + runs);\r\n  }\r\n  if (collectedLandmarks.length === 0) {\r\n    console.warn(\"WARNING: No hand detected in any runs.\");\r\n    \/\/ If debug is true, display the processed canvas in a popup window.\r\n    if (debug) {\r\n      var newWindow = window.open(\"\", \"_blank\", \"width=\" + canvas.width + \",height=\" + canvas.height);\r\n      if (newWindow) {\r\n        newWindow.document.write(\r\n          \"<html>\" +\r\n          \"<head>\" +\r\n          \"<title>Tested Image with Markers<\/title>\" +\r\n          \"<style>\" +\r\n          \"body { margin: 0; padding: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\" +\r\n          \"canvas { border: 1px solid #ccc; }\" +\r\n          \"<\/style>\" +\r\n          \"<\/head>\" +\r\n          \"<body><\/body>\" +\r\n          \"<\/html>\"\r\n        );\r\n        newWindow.document.body.appendChild(canvas);\r\n        console.log(\"DEBUG: Popup window opened successfully.\");\r\n      } else {\r\n        console.error(\"ERROR: Popup blocked! Please allow popups for this site.\");\r\n      }\r\n    }\r\n    return { detected: false, landmarks: null, reason: \"No hand detected\" };\r\n  }\r\n\r\n  \/\/ Average the landmark coordinates.\r\n  var numLandmarks = collectedLandmarks[0].length;\r\n  var avgLandmarks = [];\r\n  for (var j = 0; j < numLandmarks; j++) {\r\n    avgLandmarks[j] = { x: 0, y: 0, z: 0 };\r\n  }\r\n  collectedLandmarks.forEach(function (runLandmarks) {\r\n    runLandmarks.forEach(function (landmark, j) {\r\n      avgLandmarks[j].x += landmark.x;\r\n      avgLandmarks[j].y += landmark.y;\r\n      avgLandmarks[j].z += landmark.z;\r\n    });\r\n  });\r\n  var n = collectedLandmarks.length;\r\n  for (var j = 0; j < numLandmarks; j++) {\r\n    avgLandmarks[j].x \/= n;\r\n    avgLandmarks[j].y \/= n;\r\n    avgLandmarks[j].z \/= n;\r\n  }\r\n  if (debug) {\r\n    console.log(\"DEBUG: Averaged landmarks: \" + JSON.stringify(avgLandmarks));\r\n  }\r\n\r\n  \/\/ Draw markers on the canvas using the averaged landmarks.\r\n  function drawMarkers(ctx, landmarks, canvasWidth, canvasHeight) {\r\n    var markers = {\r\n      thumb: { index: 4, color: \"red\" },\r\n      index: { index: 8, color: \"green\" },\r\n      middle: { index: 12, color: \"orange\" }\r\n    };\r\n    Object.keys(markers).forEach(function (key) {\r\n      var marker = markers[key];\r\n      var x = landmarks[marker.index].x * canvasWidth;\r\n      var y = landmarks[marker.index].y * canvasHeight;\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, 5, 0, 2 * Math.PI);\r\n      ctx.fillStyle = marker.color;\r\n      ctx.fill();\r\n      ctx.font = \"12px Arial\";\r\n      ctx.fillStyle = \"blue\";\r\n      ctx.fillText(key, x + 8, y - 8);\r\n    });\r\n  }\r\n  drawMarkers(ctx, avgLandmarks, canvas.width, canvas.height);\r\n\r\n  \/\/ Run the gesture check on the averaged landmarks.\r\n  var detected = gestureCheck(avgLandmarks);\r\n  var reason = detected ? \"Gesture detected via averaged MediaPipe results\" : \"No gesture detected in averaged results\";\r\n  if (debug) {\r\n    console.log(\"DEBUG: Final gesture detection result: \" + detected + \" (\" + reason + \")\");\r\n  }\r\n\r\n  \/\/ Draw a status icon in the upper left: check mark if valid, X if not.\r\n  var statusIcon = detected ? \"\u2713\" : \"\u2717\";\r\n  ctx.font = \"48px Arial\";\r\n  ctx.fillStyle = detected ? \"green\" : \"red\";\r\n  ctx.fillText(statusIcon, 10, 60);\r\n  if (debug) {\r\n    console.log(\"DEBUG: Final gesture detection result: \" + (detected ? \"Valid\" : \"Invalid\"));\r\n  }\r\n\r\n  \/\/ If debug is true, display the processed canvas in a popup window.\r\n  if (debug) {\r\n    var newWindow = window.open(\"\", \"_blank\", \"width=\" + canvas.width + \",height=\" + canvas.height);\r\n    if (newWindow) {\r\n      newWindow.document.write(\r\n        \"<html>\" +\r\n        \"<head>\" +\r\n        \"<title>Tested Image with Markers<\/title>\" +\r\n        \"<style>\" +\r\n        \"body { margin: 0; padding: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\" +\r\n        \"canvas { border: 1px solid #ccc; }\" +\r\n        \"<\/style>\" +\r\n        \"<\/head>\" +\r\n        \"<body><\/body>\" +\r\n        \"<\/html>\"\r\n      );\r\n      newWindow.document.body.appendChild(canvas);\r\n      console.log(\"DEBUG: Popup window opened successfully.\");\r\n    } else {\r\n      console.error(\"ERROR: Popup blocked! Please allow popups for this site.\");\r\n    }\r\n  }\r\n\r\n  return { detected: detected, landmarks: avgLandmarks, reason: reason };\r\n}\r\n\r\nasync function detectGestureFromFileGeneric(fileURL, gestureCheck, runs = 20, debug = true) {\r\n  return detectGestureFromFileGeneric2(fileURL, gestureCheck, 20, true);\r\n\r\n  if (debug) {\r\n    console.log(\"\ud83d\udd0d Running MediaPipe detection for: \" + fileURL + \" (up to \" + runs + \" runs)\");\r\n  }\r\n\r\n  \/\/ Load the image.\r\n  const image = new Image();\r\n  image.src = fileURL;\r\n  if (debug) {\r\n    console.log(\"DEBUG: Loading image from: \" + fileURL);\r\n  }\r\n  await new Promise(function (resolve, reject) {\r\n    image.onload = function () {\r\n      if (debug) {\r\n        console.log(\"DEBUG: Image loaded successfully\");\r\n      }\r\n      resolve();\r\n    };\r\n    image.onerror = function (error) {\r\n      console.error(\"ERROR: Image failed to load\", error);\r\n      reject(error);\r\n    };\r\n  });\r\n\r\n  \/\/ Draw the image on a canvas.\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = image.width;\r\n  canvas.height = image.height;\r\n  if (debug) {\r\n    console.log(\"DEBUG: Canvas created with dimensions: \" + canvas.width + \"x\" + canvas.height);\r\n  }\r\n  const ctx = canvas.getContext(\"2d\");\r\n  ctx.drawImage(image, 0, 0, image.width, image.height);\r\n  if (debug) {\r\n    console.log(\"DEBUG: Image drawn on canvas\");\r\n  }\r\n\r\n  \/\/ Initialize MediaPipe Hands with maxNumHands set to 2.\r\n  if (debug) {\r\n    console.log(\"DEBUG: Initializing MediaPipe Hands for file detection\");\r\n  }\r\n  const hands = new Hands({\r\n    locateFile: function (file) {\r\n      return \"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/hands\/\" + file;\r\n    }\r\n  });\r\n  hands.setOptions({\r\n    maxNumHands: 2,\r\n    modelComplexity: 1,\r\n            minDetectionConfidence: 0.35,\r\n            minHandPresenceConfidence: 0.5,\r\n            minTrackingConfidence: 0.5,\r\n  });\r\n\r\n  \/\/ Helper function to run detection on the current canvas frame.\r\n  async function runDetectionOnce() {\r\n    return new Promise(function (resolve, reject) {\r\n      hands.onResults(function (results) {\r\n        resolve(results);\r\n      });\r\n      hands.send({ image: canvas }).catch(function (error) {\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  var validDetection = false;\r\n  var validLandmarks = null;\r\n  \/\/ Run detection up to 'runs' times.\r\n  for (var i = 0; i < runs; i++) {\r\n    var resultData = await runDetectionOnce();\r\n    if (resultData && resultData.multiHandLandmarks && resultData.multiHandLandmarks.length) {\r\n      if (debug) {\r\n        console.log(\"DEBUG: Run \" + (i + 1) + \": Detected \" + resultData.multiHandLandmarks.length + \" hand(s).\");\r\n      }\r\n      resultData.multiHandLandmarks.forEach(function (landmarks, handIndex) {\r\n        if (debug) {\r\n          console.log(\"DEBUG: Run \" + (i + 1) + \": Processing Hand \" + (handIndex + 1) + \" with \" + landmarks.length + \" landmarks.\");\r\n        }\r\n        if (gestureCheck(landmarks)) {\r\n          if (debug) {\r\n            console.log(\"DEBUG: Run \" + (i + 1) + \": Hand \" + (handIndex + 1) + \" passed gesture check.\");\r\n          }\r\n          validDetection = true;\r\n          validLandmarks = landmarks;\r\n        } else {\r\n          if (debug) {\r\n            console.log(\"DEBUG: Run \" + (i + 1) + \": Hand \" + (handIndex + 1) + \" did NOT pass gesture check.\");\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      if (debug) {\r\n        console.log(\"DEBUG: Run \" + (i + 1) + \": No hand detected.\");\r\n      }\r\n    }\r\n    \/\/ If you want to break early when a valid gesture is detected, uncomment the next line:\r\n    \/\/ if (validDetection) break;\r\n  }\r\n\r\n  if (!validDetection) {\r\n    console.warn(\"WARNING: No hand with valid gesture detected in any run.\");\r\n  }\r\n\r\n  \/\/ If a valid hand was found, draw markers for key landmarks.\r\n  if (validLandmarks) {\r\n    function drawMarkers(ctx, landmarks, canvasWidth, canvasHeight) {\r\n      var markers = {\r\n        thumb: { index: 4, color: \"red\" },\r\n        index: { index: 8, color: \"green\" },\r\n        middle: { index: 12, color: \"orange\" }\r\n      };\r\n      Object.keys(markers).forEach(function (key) {\r\n        var marker = markers[key];\r\n        var x = landmarks[marker.index].x * canvasWidth;\r\n        var y = landmarks[marker.index].y * canvasHeight;\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, 5, 0, 2 * Math.PI);\r\n        ctx.fillStyle = marker.color;\r\n        ctx.fill();\r\n        ctx.font = \"12px Arial\";\r\n        ctx.fillStyle = \"blue\";\r\n        ctx.fillText(key, x + 8, y - 8);\r\n      });\r\n    }\r\n    drawMarkers(ctx, validLandmarks, canvas.width, canvas.height);\r\n  }\r\n\r\n  \/\/ Only display the image in a popup if debug flag is true.\r\n  if (debug) {\r\n    var newWindow = window.open(\"\", \"_blank\", \"width=\" + canvas.width + \",height=\" + canvas.height);\r\n    if (newWindow) {\r\n      newWindow.document.write(\r\n        \"<html>\" +\r\n        \"<head>\" +\r\n        \"<title>Tested Image with Markers<\/title>\" +\r\n        \"<style>\" +\r\n        \"body { margin: 0; padding: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\" +\r\n        \"canvas { border: 1px solid #ccc; }\" +\r\n        \"<\/style>\" +\r\n        \"<\/head>\" +\r\n        \"<body><\/body>\" +\r\n        \"<\/html>\"\r\n      );\r\n      newWindow.document.body.appendChild(canvas);\r\n      console.log(\"DEBUG: Popup window opened successfully.\");\r\n    } else {\r\n      console.error(\"ERROR: Popup blocked! Please allow popups for this site.\");\r\n    }\r\n  }\r\n\r\n  var reason = validDetection\r\n    ? \"Gesture detected via MediaPipe results\"\r\n    : \"No gesture detected in runs\";\r\n  if (debug) {\r\n    console.log(\"DEBUG: Final gesture detection result: \" + validDetection + \" (\" + reason + \")\");\r\n  }\r\n\r\n  \/\/ Draw a status icon in the upper left: check mark if valid, X if not.\r\n  var statusIcon = validDetection ? \"\u2713\" : \"\u2717\";\r\n  ctx.font = \"48px Arial\";\r\n  ctx.fillStyle = validDetection ? \"green\" : \"red\";\r\n  ctx.fillText(statusIcon, 10, 60);\r\n  if (debug) {\r\n    console.log(\"DEBUG: Final gesture detection result: \" + (validDetection ? \"Valid\" : \"Invalid\"));\r\n  }\r\n\r\n  return { detected: validDetection, landmarks: validLandmarks, reason: reason };\r\n}\r\n\r\n\/\/ \u2705 Detects a middle finger gesture from an image file.\r\nasync function detectMiddleFingerFromFile(fileURL) {\r\n  console.log(\"DEBUG: Starting middle finger detection from file:\", fileURL);\r\n  return detectGestureFromFileGeneric(fileURL, checkMiddleFinger, 100);\r\n}\r\n\r\n\/\/ \u2705 Detects a thumbs-up gesture from an image file.\r\nasync function detectThumbsUpFromFile(fileURL) {\r\n  console.log(\"DEBUG: Starting thumbs up detection from file:\", fileURL);\r\n  return detectGestureFromFileGeneric(fileURL, checkThumbsUp, 100);\r\n}\r\n\r\n\r\n\/\/ \u2705 Gesture Detection Functions\r\nfunction detectGestureFromFile(fileURL) {\r\n  if (document.title.indexOf(\"NOT\") > -1) {\r\n    console.log(\"\u2705 Middle finger check\");\r\n    return detectMiddleFingerFromFile(fileURL);\r\n  } else {\r\n    console.log(\"\u2705 Thumbs up check\");\r\n    return detectThumbsUpFromFile(fileURL);\r\n  }\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-28 13:43:14","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1186,"title":"html-meme-detection-test-js","code":"let previousResults = \"\";  \/\/ Store previous results for consistency\r\n\r\n\/\/ \u2705 Reset detection results every time the page loads\r\nwindow.onload = function () {\r\n    console.log(\"\ud83d\udd04 Resetting detection results on page load...\");\r\n    localStorage.removeItem(\"detectionResults\"); \/\/ Clears previous test results\r\n};\r\n\r\nfunction pickFileAndDetectHands() {\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.accept = \"image\/*\"; \/\/ Only allow image files\r\n    input.style.display = \"none\";\r\n\r\n    input.addEventListener(\"change\", function (event) {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function (e) {\r\n                const imageURL = e.target.result; \/\/ Get the image as a Data URL\r\n                detectHandsFromImage(imageURL);  \/\/ Call the function to detect hands\r\n            };\r\n            reader.readAsDataURL(file); \/\/ Convert image to Data URL\r\n        }\r\n    });\r\n\r\n    document.body.appendChild(input);\r\n    input.click();\r\n    document.body.removeChild(input);\r\n}\r\n\r\n\/\/ \u2705 Function to Save CSV File\r\nfunction saveCSV(results) {\r\n    const blob = new Blob([results], { type: \"text\/csv\" });\r\n    const link = document.createElement(\"a\");\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = \"detection_results.csv\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n}\r\n\r\n\/\/ \u2705 Batch Test Images from Folder (Using MediaPipe)\r\nasync function batchTestImages() {\r\n    try {\r\n        \/\/ \ud83d\uddc2\ufe0f Open file picker for a folder\r\n        const handle = await window.showDirectoryPicker();\r\n        console.log(\"\ud83d\udcc2 Selected Folder:\", handle.name);\r\n\r\n        \/\/ \u2705 Load existing results from storage to avoid overwriting past results\r\n        let results = previousResults || \"Filename,Detection Status,Reason,Middle Tip Y,Middle PIP Y,Index Tip Y,Index PIP Y\\n\";\r\n        let fileCount = 0;\r\n        if (document.title.includes(\"NOT\")) {\r\n        } else {\r\n\r\n        }\r\n\r\n        \/\/ Process each image file in the folder\r\n        for await (const entry of handle.values()) {\r\n            if (entry.kind === \"file\" && \/\\.(png|jpe?g)$\/i.test(entry.name)) {\r\n                fileCount++;\r\n                console.log(`\ud83d\uddbc\ufe0f Processing file: ${entry.name}...`);\r\n\r\n                \/\/ Read file as blob URL\r\n                const file = await entry.getFile();\r\n                const fileURL = URL.createObjectURL(file);\r\n\r\n                \/\/ Run MediaPipe detection with averaging\r\nconst result = document.title.indexOf(\"NOT\") > -1\r\n    ? await detectGestureFromFileGeneric(fileURL, checkMiddleFingerImproved, 100)\r\n    : await detectGestureFromFileGeneric(fileURL, checkThumbsUp, 100);\r\n\r\n                if (!result) {\r\n                    console.error(`\u274c ERROR: Detection failed for ${entry.name}`);\r\n                    URL.revokeObjectURL(fileURL);\r\n                    continue;\r\n                }\r\n\r\n                const { detected, reason, landmarks } = result;\r\n\r\n                \/\/ Extract landmark y-values using the new object notation\r\n                const middleTipY = landmarks?.[12]?.y ?? \"N\/A\";\r\n                const middlePipY = landmarks?.[10]?.y ?? \"N\/A\";\r\n                const indexTipY = landmarks?.[8]?.y ?? \"N\/A\";\r\n                const indexPipY = landmarks?.[6]?.y ?? \"N\/A\";\r\n\r\n                console.log(`\u2705 ${entry.name}: ${detected ? \"Detected\" : \"Rejected\"} - ${reason}`);\r\n                console.log(\"\ud83d\udcca Landmark Y values:\", { middleTipY, middlePipY, indexTipY, indexPipY });\r\n\r\n                \/\/ Append new result\r\n                const resultRow = `${entry.name},${detected ? \"Detected\" : \"Rejected\"},${reason},${middleTipY},${middlePipY},${indexTipY},${indexPipY}\\n`;\r\n                results += resultRow;\r\n\r\n                \/\/ Clean up blob URL\r\n                URL.revokeObjectURL(fileURL);\r\n            }\r\n        }\r\n\r\n        if (fileCount === 0) {\r\n            alert(\"\u26a0\ufe0f No valid images found in the selected folder.\");\r\n            return;\r\n        }\r\n\r\n        \/\/ \u2705 Store updated results in Local Storage to persist across runs\r\n        localStorage.setItem(\"detectionResults\", results);\r\n        previousResults = results; \/\/ Keep in memory\r\n\r\n        \/\/ \u2705 Save results to a CSV file\r\n        saveCSV(results);\r\n\r\n        console.log(\"\u2705 Batch Test Completed. Results saved to detection_results.csv\");\r\n\r\n    } catch (error) {\r\n        console.error(\"\ud83d\uded1 Error selecting folder or processing files:\", error);\r\n        alert(\"\u26a0\ufe0f Failed to process images. Check console for details.\");\r\n    }\r\n}\r\n\/\/ Helper function to draw landmarks on the canvas for one hand.\r\nfunction drawHandLandmarks(ctx, landmarks, color) {\r\n    ctx.fillStyle = color;\r\n    landmarks.forEach((landmark) => {\r\n        const x = landmark.x * ctx.canvas.width;\r\n        const y = landmark.y * ctx.canvas.height;\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, 4, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n    });\r\n}\r\n\r\n\/\/ Main function: detects one or two hands and draws landmarks for each,\r\n\/\/ then displays the resulting image in a popup.\r\nasync function detectHandsAndShow(fileURL) {\r\n    console.log(`DEBUG: detectMiddleFingerAndShow invoked with file URL: ${fileURL}`);\r\n\r\n    \/\/ Load the image.\r\n    const image = new Image();\r\n    image.src = fileURL;\r\n    await new Promise((resolve, reject) => {\r\n        image.onload = () => {\r\n            console.log(\"DEBUG: Image loaded successfully\");\r\n            resolve();\r\n        };\r\n        image.onerror = (error) => {\r\n            console.error(\"ERROR: Failed to load image\", error);\r\n            reject(error);\r\n        };\r\n    });\r\n\r\n    \/\/ Create a canvas and draw the image onto it.\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(image, 0, 0, image.width, image.height);\r\n    console.log(`DEBUG: Canvas created with dimensions: ${canvas.width}x${canvas.height}`);\r\n\r\n    \/\/ Initialize MediaPipe Hands (set to detect up to 2 hands)\r\n    const hands = new Hands({\r\n        locateFile: (file) => `https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/hands\/${file}`\r\n    });\r\n    hands.setOptions({\r\n        maxNumHands: 2,\r\n        modelComplexity: 1,\r\n        minDetectionConfidence: 0.55,\r\n        minTrackingConfidence: 0.5,\r\n    });\r\n\r\n    \/\/ Run detection on the current canvas frame.\r\n    const results = await new Promise((resolve, reject) => {\r\n        hands.onResults((results) => {\r\n            console.log(\"DEBUG: MediaPipe Hands results received\");\r\n            resolve(results);\r\n        });\r\n        hands.send({ image: canvas }).catch((error) => {\r\n            console.error(\"ERROR: hands.send failed\", error);\r\n            reject(error);\r\n        });\r\n    });\r\n\r\n    let validGesture = false;\r\n    const detectedHands = results.multiHandLandmarks || [];\r\n    console.log(`DEBUG: Detected ${detectedHands.length} hand(s).`);\r\n\r\n    \/\/ For each detected hand, draw landmarks and check for middle finger gesture.\r\n    detectedHands.forEach((landmarks, handIndex) => {\r\n        const color = handIndex === 0 ? \"red\" : \"blue\";\r\n        console.log(`DEBUG: Processing Hand ${handIndex + 1} with ${landmarks.length} landmarks.`);\r\n        landmarks.forEach((landmark, i) => {\r\n            const x = landmark.x * canvas.width;\r\n            const y = landmark.y * canvas.height;\r\n            ctx.fillStyle = color;\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, 4, 0, 2 * Math.PI);\r\n            ctx.fill();\r\n            console.log(`DEBUG: Hand ${handIndex + 1}, Landmark ${i + 1}: x=${x.toFixed(2)}, y=${y.toFixed(2)}`);\r\n        });\r\n        if (checkMiddleFingerImproved(landmarks)) {\r\n            console.log(`DEBUG: Hand ${handIndex + 1} passed middle finger detection.`);\r\n            validGesture = true;\r\n        } else {\r\n            console.log(`DEBUG: Hand ${handIndex + 1} did NOT pass middle finger detection.`);\r\n        }\r\n    });\r\n\r\n    \/\/ Draw status icon in the upper right: check mark if valid, X if not.\r\n    const statusIcon = validGesture ? \"\u2713\" : \"\u2717\";\r\n    ctx.font = \"48px Arial\";\r\n    ctx.fillStyle = validGesture ? \"green\" : \"red\";\r\n    ctx.fillText(statusIcon, canvas.width - 60, 60);\r\n    console.log(`DEBUG: Final gesture detection result: ${validGesture ? \"Valid\" : \"Invalid\"}`);\r\n\r\n    \/\/ Open a popup window to display the processed canvas.\r\n    const popup = window.open(\"\", \"_blank\", `width=${canvas.width},height=${canvas.height}`);\r\n    if (popup) {\r\n        popup.document.write(`\r\n      <html>\r\n        <head>\r\n          <title>Middle Finger Detection Result<\/title>\r\n          <style>\r\n            body { margin: 0; padding: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\r\n            canvas { border: 1px solid #ccc; }\r\n          <\/style>\r\n        <\/head>\r\n        <body><\/body>\r\n      <\/html>\r\n    `);\r\n        popup.document.body.appendChild(canvas);\r\n        console.log(\"DEBUG: Popup window opened successfully.\");\r\n    } else {\r\n        console.error(\"ERROR: Popup blocked! Please allow popups for this site.\");\r\n    }\r\n\r\n    return { validGesture, detectedHands };\r\n}\r\n\r\nasync function detectGestureFromFileGenericAveragedDisplay(fileURL, gestureCheck, runs = 10) {\r\n    console.log(`\ud83d\udd0d Running averaged detection for: ${fileURL} over ${runs} runs`);\r\n\r\n    \/\/ Load the image.\r\n    const image = new Image();\r\n    image.src = fileURL;\r\n    console.log(\"DEBUG: Loading image from:\", fileURL);\r\n    await new Promise((resolve, reject) => {\r\n        image.onload = () => {\r\n            console.log(\"DEBUG: Image loaded successfully\");\r\n            resolve();\r\n        };\r\n        image.onerror = (error) => {\r\n            console.error(\"ERROR: Image failed to load\", error);\r\n            reject(error);\r\n        };\r\n    });\r\n    const width = image.width, height = image.height;\r\n\r\n    \/\/ Create a canvas and draw the image once.\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n    console.log(`DEBUG: Canvas created with dimensions: ${width}x${height}`);\r\n\r\n    \/\/ Initialize MediaPipe Hands (set maxNumHands to 1 for consistent averaging).\r\n    const hands = new Hands({\r\n        locateFile: (file) => `https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/hands\/${file}`\r\n    });\r\n    hands.setOptions({\r\n        maxNumHands: 1,\r\n        modelComplexity: 1,\r\n        minDetectionConfidence: 0.55,\r\n        minTrackingConfidence: 0.5,\r\n    });\r\n\r\n    \/\/ Helper function: run detection once on the current canvas.\r\n    async function runDetectionOnce() {\r\n        return new Promise((resolve, reject) => {\r\n            hands.onResults((results) => {\r\n                resolve(results);\r\n            });\r\n            hands.send({ image: canvas }).catch(reject);\r\n        });\r\n    }\r\n\r\n    let collectedLandmarks = [];\r\n    \/\/ For each run, we'll add markers on top of the image.\r\n    for (let i = 0; i < runs; i++) {\r\n        let results = await runDetectionOnce();\r\n        if (results?.multiHandLandmarks?.length) {\r\n            console.log(`DEBUG: Run ${i + 1}: Detected hand with ${results.multiHandLandmarks[0].length} landmarks.`);\r\n            \/\/ Save the landmarks for averaging.\r\n            collectedLandmarks.push(results.multiHandLandmarks[0]);\r\n            \/\/ Choose a semi-transparent color that changes with each run.\r\n            let hue = (i * 360 \/ runs) % 360;\r\n            ctx.fillStyle = `hsla(${hue}, 100%, 50%, 0.5)`;\r\n            \/\/ Draw each landmark for this run.\r\n            results.multiHandLandmarks[0].forEach((landmark) => {\r\n                const x = landmark.x * width;\r\n                const y = landmark.y * height;\r\n                ctx.beginPath();\r\n                ctx.arc(x, y, 3, 0, 2 * Math.PI);\r\n                ctx.fill();\r\n            });\r\n            \/\/ Label the run number in a solid color.\r\n            ctx.font = \"16px Arial\";\r\n            ctx.fillStyle = `hsla(${hue}, 100%, 50%, 1)`;\r\n            ctx.fillText(`Run ${i + 1}`, 10, 20 + i * 18);\r\n        } else {\r\n            console.log(`DEBUG: Run ${i + 1}: No hand detected.`);\r\n        }\r\n    }\r\n    console.log(`DEBUG: Total successful runs: ${collectedLandmarks.length} out of ${runs}`);\r\n\r\n    \/\/ Compute average landmarks if any runs succeeded.\r\n    let avgLandmarks = [];\r\n    if (collectedLandmarks.length > 0) {\r\n        const numLandmarks = collectedLandmarks[0].length;\r\n        \/\/ Initialize average landmark array.\r\n        for (let j = 0; j < numLandmarks; j++) {\r\n            avgLandmarks[j] = { x: 0, y: 0, z: 0 };\r\n        }\r\n        collectedLandmarks.forEach((landmarks) => {\r\n            landmarks.forEach((landmark, j) => {\r\n                avgLandmarks[j].x += landmark.x;\r\n                avgLandmarks[j].y += landmark.y;\r\n                avgLandmarks[j].z += landmark.z;\r\n            });\r\n        });\r\n        const n = collectedLandmarks.length;\r\n        for (let j = 0; j < numLandmarks; j++) {\r\n            avgLandmarks[j].x \/= n;\r\n            avgLandmarks[j].y \/= n;\r\n            avgLandmarks[j].z \/= n;\r\n        }\r\n        console.log(\"DEBUG: Averaged landmarks:\", avgLandmarks);\r\n        \/\/ Draw averaged landmarks in bright orange.\r\n        avgLandmarks.forEach((landmark) => {\r\n            const x = landmark.x * width;\r\n            const y = landmark.y * height;\r\n            ctx.fillStyle = \"orange\";\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, 4, 0, 2 * Math.PI);\r\n            ctx.fill();\r\n        });\r\n        \/\/ Label the average.\r\n        ctx.font = \"20px Arial\";\r\n        ctx.fillStyle = \"blue\";\r\n        ctx.fillText(\"Average\", 10, height - 20);\r\n    } else {\r\n        console.warn(\"WARNING: No hand detected in any run.\");\r\n    }\r\n\r\n    \/\/ Run gestureCheck on the averaged landmarks.\r\n    const detected = avgLandmarks.length > 0 ? gestureCheck(avgLandmarks) : false;\r\n    console.log(`DEBUG: Final gesture detection result: ${detected}`);\r\n\r\n    \/\/ Draw a status icon in the upper right: check mark if detected, X if not.\r\n    const statusIcon = detected ? \"\u2713\" : \"\u2717\";\r\n    ctx.font = \"48px Arial\";\r\n    ctx.fillStyle = detected ? \"green\" : \"red\";\r\n    ctx.fillText(statusIcon, width - 60, 60);\r\n\r\n    \/\/ Open a popup window to display the final canvas.\r\n    const popup = window.open(\"\", \"_blank\", `width=${width},height=${height}`);\r\n    if (popup) {\r\n        popup.document.write(`\r\n      <html>\r\n        <head>\r\n          <title>Averaged Detection<\/title>\r\n          <style>\r\n            body { margin: 0; padding: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\r\n            canvas { border: 1px solid #ccc; }\r\n          <\/style>\r\n        <\/head>\r\n        <body><\/body>\r\n      <\/html>\r\n    `);\r\n        popup.document.body.appendChild(canvas);\r\n        console.log(\"DEBUG: Popup window opened successfully.\");\r\n    } else {\r\n        console.error(\"ERROR: Popup blocked! Please allow popups for this site.\");\r\n    }\r\n\r\n    return { detected, avgLandmarks };\r\n}\r\n\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-28 18:27:24","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1199,"title":"html-hand-landmarks-detect-js","code":"\/\/ \u2705 Function to initialize Hand Landmarker with dynamic mode support\r\n\r\n\/\/ \u2705 Test Hand Tracking with Live Webcam\r\nasync function detectHandsFromWebcam() {\r\n  console.log(\"DEBUG: Running testMediaPipeSampleHands...\");\r\n\r\n  let video; \/\/ \u2705 Declare globally for access in stopHandTracking\r\n  let canvas;\r\n  let isRunning = true; \/\/ \u2705 Track detection state\r\n\r\n  try {\r\n    \/\/ \u2705 Create a video element for the webcam\r\n    video = document.createElement(\"video\");\r\n    video.autoplay = true;\r\n    video.style.display = \"none\";\r\n    document.body.appendChild(video);\r\n\r\n    const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n    video.srcObject = stream;\r\n    await new Promise((resolve) => (video.onloadeddata = resolve));\r\n\r\n    \/\/ \u2705 Create canvas\r\n    canvas = document.createElement(\"canvas\");\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    if (!handLandmarkerVideo) {\r\n      await createHandLandmarker(\"VIDEO\");\r\n    }\r\n\r\n    async function processFrame() {\r\n      if (!isRunning || video.paused || video.ended) return; \/\/ \u2705 Stop loop if not running\r\n\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n      const results = handLandmarkerVideo.detectForVideo(video, performance.now());\r\n\r\n      if (results.landmarks && results.landmarks.length > 0) {\r\n        console.log(\"DEBUG: Detected \" + results.landmarks.length + \" hand(s).\");\r\n\r\n        results.landmarks.forEach((landmarks, index) => {\r\n          console.log(\"DEBUG: Drawing hand \" + (index + 1));\r\n          drawConnectors(ctx, landmarks, HAND_CONNECTIONS, {\r\n            color: \"#00FF00\", \/\/ Green skeleton\r\n            lineWidth: 5\r\n          });\r\n          drawLandmarks(ctx, landmarks, {\r\n            color: \"#FF0000\", \/\/ Red dots\r\n            lineWidth: 2\r\n          });\r\n        });\r\n      } else {\r\n        console.log(\"DEBUG: No hands detected.\");\r\n      }\r\n\r\n      requestAnimationFrame(processFrame);\r\n    }\r\n\r\n    processFrame();\r\n\r\n    \/\/ \u2705 Open popup to display webcam hand tracking\r\n    const popup = window.open(\"\", \"_blank\", \"width=\" + canvas.width + \",height=\" + canvas.height);\r\n    if (popup) {\r\n      popup.document.write(`\r\n        <html>\r\n          <head>\r\n            <title>Live Hand Detection<\/title>\r\n            <style>\r\n              body { margin: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\r\n              canvas { border: 1px solid #ccc; }\r\n            <\/style>\r\n          <\/head>\r\n          <body><\/body>\r\n        <\/html>\r\n      `);\r\n      popup.document.body.appendChild(canvas);\r\n      console.log(\"DEBUG: Popup window opened for MediaPipe test.\");\r\n\r\n      \/\/ \u2705 Monitor popup closing to stop detection\r\n      let popupInterval = setInterval(() => {\r\n        if (popup.closed) {\r\n          console.log(\"DEBUG: Popup closed. Stopping hand tracking...\");\r\n          stopHandTracking(); \/\/ \u2705 Properly stop detection\r\n          clearInterval(popupInterval);\r\n        }\r\n      }, 500);\r\n    } else {\r\n      console.error(\"ERROR: Popup blocked! Please allow popups for this site.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"ERROR: Unable to access webcam.\", error);\r\n  }\r\n\r\n  \/\/ \u2705 Function to Stop Hand Tracking\r\n  function stopHandTracking() {\r\n    console.log(\"DEBUG: Stopping hand tracking...\");\r\n\r\n    \/\/ \u2705 Stop webcam stream\r\n    if (video && video.srcObject) {\r\n      let tracks = video.srcObject.getTracks();\r\n      tracks.forEach(track => track.stop());\r\n    }\r\n\r\n    \/\/ \u2705 Stop the detection loop\r\n    isRunning = false;\r\n\r\n    \/\/ \u2705 Remove elements safely\r\n    if (video) video.remove();\r\n    if (canvas) canvas.remove();\r\n  }\r\n}\r\n\r\n\/\/ \u2705 Function to process an uploaded image and detect hand landmarks\r\nasync function detectHandsFromFile() {\r\n  console.log(\"DEBUG: Image file processing started...\");\r\n\r\n  \/\/ \u2705 Create an input element for file selection\r\n  const input = document.createElement(\"input\");\r\n  input.type = \"file\";\r\n  input.accept = \"image\/*\"; \/\/ Allow only images\r\n  input.style.display = \"none\";\r\n\r\n  document.body.appendChild(input); \/\/ Append input temporarily\r\n\r\n  \/\/ \u2705 Handle file selection\r\n  input.addEventListener(\"change\", async function (event) {\r\n    const file = event.target.files[0];\r\n\r\n    if (!file) {\r\n      console.error(\"ERROR: No file selected.\");\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = async function (e) {\r\n      const image = new Image();\r\n      image.src = e.target.result;\r\n\r\n      image.onload = async function () {\r\n        console.log(\"DEBUG: Image loaded, processing for hand detection...\");\r\n\r\n        \/\/ \u2705 Create a canvas to draw the image\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        ctx.drawImage(image, 0, 0, image.width, image.height);\r\n\r\n        if (!handLandmarkerImage) {\r\n          await createHandLandmarker(\"IMAGE\");\r\n        }\r\n\r\n        \/\/ \u2705 Run hand detection\r\n        const results = handLandmarkerImage.detect(image);\r\n\r\n        if (results.landmarks && results.landmarks.length > 0) {\r\n          console.log(\"DEBUG: Detected \" + results.landmarks.length + \" hand(s).\");\r\n\r\n          results.landmarks.forEach((landmarks, index) => {\r\n            console.log(\"DEBUG: Drawing hand \" + (index + 1));\r\n            drawConnectors(ctx, landmarks, HAND_CONNECTIONS, {\r\n              color: \"#00FF00\", \/\/ Green skeleton\r\n              lineWidth: 5\r\n            });\r\n            drawLandmarks(ctx, landmarks, {\r\n              color: \"#FF0000\", \/\/ Red dots\r\n              lineWidth: 2\r\n            });\r\n          });\r\n        } else {\r\n          console.log(\"DEBUG: No hands detected.\");\r\n        }\r\n\r\n        \/\/ \u2705 Open a popup to display the processed image\r\n        const popup = window.open(\"\", \"_blank\", \"width=\" + image.width + \",height=\" + image.height);\r\n        if (popup) {\r\n          popup.document.write(`\r\n            <html>\r\n              <head>\r\n                <title>Hand Detection on Image<\/title>\r\n                <style>\r\n                  body { margin: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\r\n                  canvas { border: 1px solid #ccc; }\r\n                <\/style>\r\n              <\/head>\r\n              <body><\/body>\r\n            <\/html>\r\n          `);\r\n          popup.document.body.appendChild(canvas);\r\n          console.log(\"DEBUG: Popup window opened for processed image.\");\r\n        } else {\r\n          console.error(\"ERROR: Popup blocked! Please allow popups for this site.\");\r\n        }\r\n      };\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  });\r\n\r\n  \/\/ \u2705 Simulate a click on the input to open file picker\r\n  input.click();\r\n\r\n  \/\/ \u2705 Remove the input from the DOM after selection\r\n  setTimeout(() => input.remove(), 1000);\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-05 00:11:49","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1200,"title":"html-face-detect-js","code":"\/\/ \u2705 Initialize Face Detector Instances\r\n\r\n\/\/ \u2705 Function to Start Face Detection from Webcam\r\nasync function detectFaceFromWebcam() {\r\n    console.log(\"DEBUG: Running detectFaceFromWebcam...\");\r\n\r\n    let video;\r\n    let canvas;\r\n    let ctx;\r\n    let isRunning = true;\r\n\r\n    try {\r\n        \/\/ \u2705 Create Video Element\r\n        video = document.createElement(\"video\");\r\n        video.autoplay = true;\r\n        video.style.display = \"none\";\r\n        document.body.appendChild(video);\r\n\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        video.srcObject = stream;\r\n        await new Promise((resolve) => (video.onloadeddata = resolve));\r\n\r\n        \/\/ \u2705 Create Canvas\r\n        canvas = document.createElement(\"canvas\");\r\n        canvas.width = 640;\r\n        canvas.height = 480;\r\n        ctx = canvas.getContext(\"2d\");\r\n\r\n        if (!faceDetectorVideo) {\r\n            await createFaceDetector(\"VIDEO\");\r\n        }\r\n\r\n        async function processFrame() {\r\n            if (!isRunning || video.paused || video.ended) return;\r\n\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n            const results = faceDetectorVideo.detectForVideo(video, performance.now()).detections;\r\n            displayFaceDetections(results, ctx);\r\n\r\n            requestAnimationFrame(processFrame);\r\n        }\r\n\r\n        processFrame();\r\n\r\n        \/\/ \u2705 Open Popup for Face Detection\r\n        const popup = window.open(\"\", \"_blank\", \"width=650,height=500\");\r\n        if (popup) {\r\n            popup.document.write(`\r\n                <html>\r\n                    <head>\r\n                        <title>Face Detection<\/title>\r\n                        <style>\r\n                            body { margin: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\r\n                            canvas { border: 1px solid #ccc; }\r\n                        <\/style>\r\n                    <\/head>\r\n                    <body><\/body>\r\n                <\/html>\r\n            `);\r\n            popup.document.body.appendChild(canvas);\r\n\r\n            \/\/ \u2705 Monitor Popup Closure to Stop Detection\r\n            let popupInterval = setInterval(() => {\r\n                if (popup.closed) {\r\n                    console.log(\"DEBUG: Popup closed. Stopping face detection...\");\r\n                    stopFaceDetection();\r\n                    clearInterval(popupInterval);\r\n                }\r\n            }, 500);\r\n        } else {\r\n            console.error(\"ERROR: Popup blocked! Allow popups for this site.\");\r\n        }\r\n    } catch (error) {\r\n        console.error(\"ERROR: Unable to access webcam.\", error);\r\n    }\r\n\r\n    function stopFaceDetection() {\r\n        console.log(\"DEBUG: Stopping face detection...\");\r\n        isRunning = false;\r\n\r\n        \/\/ \u2705 Stop webcam stream\r\n        if (video && video.srcObject) {\r\n            let tracks = video.srcObject.getTracks();\r\n            tracks.forEach(track => track.stop());\r\n        }\r\n\r\n        if (video) video.remove();\r\n        if (canvas) canvas.remove();\r\n    }\r\n}\r\n\r\n\/\/ \u2705 Function to Process an Uploaded Image and Detect Faces\r\nasync function detectFaceFromFile() {\r\n    console.log(\"DEBUG: Image file processing started...\");\r\n\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.accept = \"image\/*\";\r\n    input.style.display = \"none\";\r\n    document.body.appendChild(input);\r\n\r\n    input.addEventListener(\"change\", async function (event) {\r\n        const file = event.target.files[0];\r\n\r\n        if (!file) {\r\n            console.error(\"ERROR: No file selected.\");\r\n            return;\r\n        }\r\n\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = async function (e) {\r\n            const image = new Image();\r\n            image.src = e.target.result;\r\n\r\n            image.onload = async function () {\r\n                console.log(\"DEBUG: Image loaded, processing for face detection...\");\r\n\r\n                \/\/ \u2705 Create Canvas to Draw Image\r\n                const canvas = document.createElement(\"canvas\");\r\n                canvas.width = image.width;\r\n                canvas.height = image.height;\r\n                const ctx = canvas.getContext(\"2d\");\r\n\r\n                ctx.drawImage(image, 0, 0, image.width, image.height);\r\n\r\n                if (!faceDetectorImage) {\r\n                    await createFaceDetector(\"IMAGE\");\r\n                }\r\n\r\n                \/\/ \u2705 Run Face Detection\r\n                const results = faceDetectorImage.detect(image).detections;\r\n\r\n                displayFaceDetections(results, ctx);\r\n\r\n                \/\/ \u2705 Open Popup to Display Processed Image\r\n                const popup = window.open(\"\", \"_blank\", \"width=\" + image.width + \",height=\" + image.height);\r\n                if (popup) {\r\n                    popup.document.write(`\r\n                        <html>\r\n                            <head>\r\n                                <title>Face Detection on Image<\/title>\r\n                                <style>\r\n                                    body { margin: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\r\n                                    canvas { border: 1px solid #ccc; }\r\n                                <\/style>\r\n                            <\/head>\r\n                            <body><\/body>\r\n                        <\/html>\r\n                    `);\r\n                    popup.document.body.appendChild(canvas);\r\n                } else {\r\n                    console.error(\"ERROR: Popup blocked! Please allow popups for this site.\");\r\n                }\r\n            };\r\n        };\r\n\r\n        reader.readAsDataURL(file);\r\n    });\r\n\r\n    input.click();\r\n    setTimeout(() => input.remove(), 1000);\r\n}\r\n\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-05 00:11:47","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1201,"title":"html-hand-gestures-detect-js","code":"\/\/ \u2705 Initialize Gesture Recognizer (for Hand Gesture Detection)\r\n\r\n\/\/ \u2705 Function to Start Face Detection from Webcam\r\nasync function detectGesturesFromWebcam() {\r\n  console.log(\"DEBUG: Running detectGesturesFromWebcam...\");\r\n\r\n  let video;\r\n  let canvas;\r\n  let isRunning = true;\r\n\r\n  try {\r\n    \/\/ \u2705 Create a video element for the webcam\r\n    video = document.createElement(\"video\");\r\n    video.autoplay = true;\r\n    video.style.display = \"none\";\r\n    document.body.appendChild(video);\r\n\r\n    const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n    video.srcObject = stream;\r\n    await new Promise((resolve) => (video.onloadeddata = resolve));\r\n\r\n    \/\/ \u2705 Create canvas\r\n    canvas = document.createElement(\"canvas\");\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    if (!gestureRecognizerVideo) {\r\n      await createGestureRecognizer(\"VIDEO\");\r\n    }\r\n\r\n    async function processFrame() {\r\n      if (!isRunning || video.paused || video.ended) return;\r\n\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n      const results = gestureRecognizerVideo.recognizeForVideo(video, performance.now());\r\n\r\n      if (results.landmarks && results.landmarks.length > 0) {\r\n        console.log(\"DEBUG: Detected \" + results.landmarks.length + \" hand(s).\");\r\n\r\n        results.landmarks.forEach((landmarks, index) => {\r\n          drawConnectors(ctx, landmarks, GestureRecognizer.HAND_CONNECTIONS, {\r\n            color: \"#00FF00\",\r\n            lineWidth: 5\r\n          });\r\n          drawLandmarks(ctx, landmarks, {\r\n            color: \"#FF0000\",\r\n            lineWidth: 2\r\n          });\r\n        });\r\n\r\n        if (results.gestures.length > 0) {\r\n          const gestureName = results.gestures[0][0].categoryName;\r\n          console.log(\"\u2705 Recognized Gesture: \" + gestureName);\r\n          ctx.font = \"24px Arial\";\r\n          ctx.fillStyle = \"yellow\";\r\n          ctx.fillText(\"Gesture: \" + gestureName, 20, 40);\r\n        }\r\n      } else {\r\n        console.log(\"DEBUG: No hands detected.\");\r\n      }\r\n\r\n      requestAnimationFrame(processFrame);\r\n    }\r\n\r\n    processFrame();\r\n\r\n    \/\/ \u2705 Open popup to display webcam gesture detection\r\n    const popup = window.open(\"\", \"_blank\", \"width=\" + canvas.width + \",height=\" + canvas.height);\r\n    if (popup) {\r\n      popup.document.write(`\r\n        <html>\r\n          <head>\r\n            <title>Live Gesture Detection<\/title>\r\n            <style>\r\n              body { margin: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\r\n              canvas { border: 1px solid #ccc; }\r\n            <\/style>\r\n          <\/head>\r\n          <body><\/body>\r\n        <\/html>\r\n      `);\r\n      popup.document.body.appendChild(canvas);\r\n\r\n      \/\/ \u2705 Monitor popup closure to stop detection\r\n      let popupInterval = setInterval(() => {\r\n        if (popup.closed) {\r\n          console.log(\"DEBUG: Popup closed. Stopping gesture detection...\");\r\n          stopGestureDetection();\r\n          clearInterval(popupInterval);\r\n        }\r\n      }, 500);\r\n    } else {\r\n      console.error(\"ERROR: Popup blocked! Please allow popups for this site.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"ERROR: Unable to access webcam.\", error);\r\n  }\r\n\r\n  function stopGestureDetection() {\r\n    console.log(\"DEBUG: Stopping gesture detection...\");\r\n    isRunning = false;\r\n\r\n    \/\/ \u2705 Stop webcam stream\r\n    if (video && video.srcObject) {\r\n      let tracks = video.srcObject.getTracks();\r\n      tracks.forEach(track => track.stop());\r\n    }\r\n\r\n    if (video) video.remove();\r\n    if (canvas) canvas.remove();\r\n  }\r\n}\r\n\r\n\/\/ \u2705 Function to process an uploaded image and detect hand gestures\r\nasync function detectGesturesFromFile() {\r\n  console.log(\"DEBUG: Image file processing started...\");\r\n\r\n  const input = document.createElement(\"input\");\r\n  input.type = \"file\";\r\n  input.accept = \"image\/*\";\r\n  input.style.display = \"none\";\r\n  document.body.appendChild(input);\r\n\r\n  input.addEventListener(\"change\", async function (event) {\r\n    const file = event.target.files[0];\r\n\r\n    if (!file) {\r\n      console.error(\"ERROR: No file selected.\");\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = async function (e) {\r\n      const image = new Image();\r\n      image.src = e.target.result;\r\n\r\n      image.onload = async function () {\r\n        console.log(\"DEBUG: Image loaded, processing for gesture recognition...\");\r\n\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        ctx.drawImage(image, 0, 0, image.width, image.height);\r\n\r\n        if (!gestureRecognizerImage) {\r\n          await createGestureRecognizer(\"IMAGE\");\r\n        }\r\n\r\n        const results = gestureRecognizerImage.recognize(image);\r\n\r\n        if (results.landmarks && results.landmarks.length > 0) {\r\n          console.log(\"DEBUG: Detected \" + results.landmarks.length + \" hand(s).\");\r\n\r\n          results.landmarks.forEach((landmarks, index) => {\r\n            drawConnectors(ctx, landmarks, GestureRecognizer.HAND_CONNECTIONS, {\r\n              color: \"#00FF00\",\r\n              lineWidth: 5\r\n            });\r\n            drawLandmarks(ctx, landmarks, {\r\n              color: \"#FF0000\",\r\n              lineWidth: 2\r\n            });\r\n          });\r\n\r\n          if (results.gestures.length > 0) {\r\n            const gestureName = results.gestures[0][0].categoryName;\r\n            console.log(\"\u2705 Recognized Gesture: \" + gestureName);\r\n            ctx.font = \"24px Arial\";\r\n            ctx.fillStyle = \"yellow\";\r\n            ctx.fillText(\"Gesture: \" + gestureName, 20, 40);\r\n          }\r\n        } else {\r\n          console.log(\"DEBUG: No hands detected.\");\r\n        }\r\n\r\n        const popup = window.open(\"\", \"_blank\", \"width=\" + image.width + \",height=\" + image.height);\r\n        if (popup) {\r\n          popup.document.write(`\r\n            <html>\r\n              <head>\r\n                <title>Gesture Detection on Image<\/title>\r\n                <style>\r\n                  body { margin: 0; display: flex; align-items: center; justify-content: center; background: #eee; }\r\n                  canvas { border: 1px solid #ccc; }\r\n                <\/style>\r\n              <\/head>\r\n              <body><\/body>\r\n            <\/html>\r\n          `);\r\n          popup.document.body.appendChild(canvas);\r\n        } else {\r\n          console.error(\"ERROR: Popup blocked! Please allow popups for this site.\");\r\n        }\r\n      };\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  });\r\n\r\n  input.click();\r\n  setTimeout(() => input.remove(), 1000);\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-05 00:11:45","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1203,"title":"html-full-mediapipe-detect-js","code":"\/* ========= Global Variables ========= *\/\r\nlet videoStream = null;    \/\/ The live video stream (for live detection)\r\nlet isGestureDetected = false;\r\nlet detectionStartTime = null;\r\nlet detectionStopped = false;\r\nlet hands = null; \/\/ MediaPipe Hands instance\r\n\r\n\/\/ Load MediaPipe Hands\r\nasync function loadMediaPipeHands() {\r\n    try {\r\n        hands = new Hands({\r\n            locateFile: (file) => `https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/hands\/${file}`\r\n        });\r\n\r\n        hands.setOptions({\r\n            maxNumHands: 2,\r\n            modelComplexity: 1,\r\n            minDetectionConfidence: 0.55,\r\n            minTrackingConfidence: 0.5,\r\n        });\r\n\r\n        await hands.initialize();\r\n        console.log(\"\u2705 MediaPipe Hands model loaded\");\r\n    } catch (error) {\r\n        console.error(\"ERROR: Failed to initialize MediaPipe Hands:\", error);\r\n        \/\/ Option 1: Reload the page after a short delay\r\n        setTimeout(() => {\r\n            console.warn(\"Reloading page to attempt to recover from WASM initialization error.\");\r\n            location.reload();\r\n        }, 3000);\r\n\r\n        \/\/ Option 2: Alternatively, display a user message and prompt them to refresh manually.\r\n        \/\/ document.getElementById(\"result\").innerText = \"An error occurred loading the hand detection module. Please refresh the page.\";\r\n    }\r\n}\r\n\r\nfunction checkThumbsUp(landmarks) {\r\n\t\/\/ THIS SHOULD USE THE MEDIA PIPE GESTURE CHECK\r\n\t\r\n    if (!landmarks || landmarks.length < 21) return false;\r\n    const thumb_tip = landmarks[4];\r\n    const thumb_ip = landmarks[3];\r\n    const thumb_mcp = landmarks[2];\r\n    const tolerance = 0.05;\r\n    const thumbExtended = thumb_tip.y < (thumb_ip.y - tolerance) && thumb_ip.y < (thumb_mcp.y - tolerance);\r\n    console.log(`\ud83d\udc4d Thumbs Up Detected? ${thumbExtended}`);\r\n    return thumbExtended;\r\n}\r\n\r\n\/\/ \/\/ Improved Middle Finger Detection with additional debugging\r\nfunction checkMiddleFinger(landmarks) {\r\n\t\/\/THIS SHOULD RULE OUT OTHER GESTURES FIRST WITH MEDIA PIPE GESTURE CHECK\r\n\t\/\/ (future it will find thumbs up gesture after we train model)\r\n\t\/\/IF NOT A RECOGNIZED GESTURE THEN USE MEDIA PIPE LANDMARKS\r\n\t\r\n  if (!landmarks || landmarks.length < 21) {\r\n    console.log(\"DEBUG: Insufficient landmarks for middle finger detection.\");\r\n    return false;\r\n  }\r\n  \r\n  \/\/ Tolerances for checking:\r\n  const extTolerance = 0.05;    \/\/ For middle finger extension\r\n  const foldTolerance = 0.025;  \/\/ For checking that the index finger is folded\r\n  const obscuredThreshold = 0.03; \/\/ If index finger tip - pip is less than this, consider it obscured\r\n  \r\n  \/\/ Middle finger landmarks\r\n  const middle_tip = landmarks[12];\r\n  const middle_pip = landmarks[10];\r\n  \r\n  \/\/ Index finger landmarks\r\n  const index_tip = landmarks[8];\r\n  const index_pip = landmarks[6];\r\n  \r\n  \/\/ Check middle finger extension:\r\n  const middleExtended = middle_tip.y < (middle_pip.y - extTolerance);\r\n  \r\n  \/\/ Compute the vertical distance for the index finger:\r\n  const indexDistance = index_tip.y - index_pip.y;\r\n  let indexFolded;\r\n  if (indexDistance < obscuredThreshold) {\r\n    console.log(\"DEBUG: Index finger appears to be obscured; ignoring index folded check.\");\r\n    indexFolded = true;\r\n  } else {\r\n    indexFolded = index_tip.y > (index_pip.y + foldTolerance);\r\n  }\r\n  \r\n  console.log(`DEBUG: checkMiddleFingerImproved -> middleExtended: ${middleExtended}, indexDistance: ${indexDistance.toFixed(3)}, indexFolded: ${indexFolded}`);\r\n  \r\n  return middleExtended && indexFolded;\r\n}\r\n\r\nfunction stopDetection() {\r\n    detectionStopped = true;\r\n    console.log(\"\ud83d\uded1 Gesture detection stopped.\");\r\n}\r\n\r\nfunction resumeDetection() {\r\n    detectionStopped = false;\r\n    console.log(\"\ud83d\udd04 Gesture detection resumed.\");\r\n}\r\n\r\n\/\/ Resets the live detection UI and state.\r\nfunction resetDetectionMessage() {\r\n    console.log(\"DEBUG: Resetting detection message and state.\");\r\n    isGestureDetected = false;\r\n    detectionStartTime = null;\r\n    const { noGestureText } = getGestureInfo();\r\n    document.getElementById(\"result\").innerText = noGestureText;\r\n    document.getElementById(\"result\").style.color = \"red\";\r\n}\r\n\r\n\/\/ \/\/ Returns the gesture parameters based on the document title.\r\nfunction getGestureInfo() {\r\n    if (document.title.includes(\"NOT\")) {\r\n        console.log(\"DEBUG: Gesture Info set to Middle Finger detection.\");\r\n        return {\r\n            gestureCheck: checkMiddleFinger,\r\n            detectionEmoji: \"\ud83d\udd95\",\r\n            noGestureText: \"No Middle Finger Detected.\",\r\n            successText: \"Middle Finger Detected!\"\r\n        };\r\n    } else {\r\n        console.log(\"DEBUG: Gesture Info set to Thumbs Up detection.\");\r\n        return {\r\n            gestureCheck: checkThumbsUp,\r\n            detectionEmoji: \"\ud83d\udc4d\",\r\n            noGestureText: \"No Thumbs Up Detected.\",\r\n            successText: \"Thumbs Up Detected!\"\r\n        };\r\n    }\r\n}\r\n\r\nfunction captureImage() {\r\n\t  const video = document.getElementById(\"webcam\");\r\n\t  const memeCanvas = document.getElementById(\"memeCanvas\");\r\n\t  const ctx = memeCanvas.getContext(\"2d\");\r\n\t  const borderThickness = 10;\r\n\r\n\t  \/\/ \u2705 Set canvas size based on the device's camera resolution\r\n\t  memeCanvas.width = video.videoWidth + 2 * borderThickness;\r\n\t  memeCanvas.height = video.videoHeight + 2 * borderThickness;\r\n\r\n\t  savedImageHeight = video.videoHeight;\r\n\t  savedBorderThickness = borderThickness;\r\n\t  savedVideoWidth = video.videoWidth;\r\n\r\n\t  \/\/ \u2705 Draw black border and white background\r\n\t  ctx.fillStyle = \"black\";\r\n\t  ctx.fillRect(0, 0, memeCanvas.width, memeCanvas.height);\r\n\t  ctx.fillStyle = \"white\";\r\n\t  ctx.fillRect(borderThickness, borderThickness, memeCanvas.width - 2 * borderThickness, memeCanvas.height - 2 * borderThickness);\r\n\r\n\t  \/\/ \u2705 Draw video frame at its natural resolution\r\n\t  ctx.drawImage(video, borderThickness, borderThickness, video.videoWidth, video.videoHeight);\r\n\r\n\t  \/\/ \u2705 Stop the video stream after capturing\r\n\t  videoStream.getTracks().forEach(track => track.stop());\r\n\t  video.style.display = \"none\";\r\n\r\n\t  \/\/ \u2705 Convert captured image to data URL\r\n\t  savedImage = new Image();\r\n\t  savedImage.onload = function () {\r\n\t\tupdateMemeText(); \/\/ Call function to add text\r\n\t  };\r\n\t  savedImage.src = memeCanvas.toDataURL(\"image\/png\");\r\n\r\n\t  \/\/ \u2705 Update result message\r\n\t  const resultMessage = document.getElementById(\"result\");\r\n\t  resultMessage.innerHTML = \"\ud83d\udcf8 <strong>Picture Captured!<\/strong><br>Meme Ready!<br>Customize & Save Below.\";\r\n\t  resultMessage.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n\r\n\t  \/\/ \u2705 Show the meme editor\r\n\t  document.getElementById(\"sticky-footer\").style.display = \"block\";\r\n\t  document.getElementById(\"preview\").style.display = \"block\";\r\n\t  document.getElementById(\"memeEditorBlurb\").style.display = \"block\";\r\n}\r\n\r\n\/\/ Starts the camera and begins live gesture detection.\r\nasync function startCamera() {\r\n    console.log(\"DEBUG: Starting camera...\");\r\n    const video = document.getElementById(\"webcam\");\r\n    \r\n    try {\r\n        videoStream = await navigator.mediaDevices.getUserMedia({ video: { width: 640, height: 480 } });\r\n        video.srcObject = videoStream;\r\n        video.style.display = \"block\";\r\n        console.log(\"\ud83c\udfa5 Camera started.\");\r\n\r\n        if (!hands) {\r\n            await loadMediaPipeHands();\r\n        }\r\n        detectHands(video);\r\n    } catch (error) {\r\n        console.error(\"\u274c Error starting camera:\", error);\r\n    }\r\n}\r\n\r\n\/\/ Continuously detects hands from the video stream.\r\nasync function detectHands(video) {\r\n    if (!hands || detectionStopped) {\r\n        console.log(\"DEBUG: Hands not ready or detection stopped.\");\r\n        return;\r\n    }\r\n    const { gestureCheck, detectionEmoji, successText, noGestureText } = getGestureInfo();\r\n\r\n    async function detect() {\r\n        if (detectionStopped) {\r\n            console.log(\"DEBUG: Detection is stopped; exiting detect loop.\");\r\n            return;\r\n        }\r\n\r\n        \/\/ Capture the current frame\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = video.videoWidth;\r\n        canvas.height = video.videoHeight;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        console.log(\"DEBUG: Captured a frame from video.\");\r\n\r\n        \/\/ Run MediaPipe Hands on the frame\r\n        hands.onResults((results) => {\r\n            console.log(\"DEBUG: Received results from MediaPipe:\", results);\r\n            let gestureDetectedLocal = false;\r\n\t\t\t\r\n\t\t\t\/\/ USE MEDIA PIPE TO DETECT A FACE and at least ONE HAND\r\n\r\n            if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {\r\n                results.multiHandLandmarks.forEach((landmarks, idx) => {\r\n                    console.log(`DEBUG: Processing landmarks for hand ${idx}:`, landmarks);\r\n                    if (gestureCheck(landmarks)) {\r\n                        console.log(`DEBUG: Gesture detected on hand ${idx}.`);\r\n                        gestureDetectedLocal = true;\r\n                        if (!isGestureDetected) {\r\n                            isGestureDetected = true;\r\n                            detectionStartTime = Date.now();\r\n                            console.log(\"DEBUG: Gesture detection started.\");\r\n                        } else {\r\n                            const elapsedTime = (Date.now() - detectionStartTime) \/ 1000;\r\n                            document.getElementById(\"result\").innerText = `${detectionEmoji} ${successText} Taking picture in ${2 - Math.floor(elapsedTime)}s...`;\r\n                            document.getElementById(\"result\").style.color = \"green\";\r\n                            console.log(`DEBUG: Gesture detected for ${elapsedTime.toFixed(2)} seconds.`);\r\n                            if (elapsedTime >= 2) {\r\n                                captureImage();\r\n                                detectionStopped = true;\r\n                                console.log(\"DEBUG: Detection duration met; capturing image and stopping detection.\");\r\n                                return;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        console.log(`DEBUG: Gesture not detected for hand ${idx}.`);\r\n                    }\r\n                });\r\n            } else {\r\n                console.log(\"DEBUG: No hand landmarks detected.\");\r\n            }\r\n\r\n            if (!gestureDetectedLocal) {\r\n                resetDetectionMessage();\r\n            }\r\n\r\n            requestAnimationFrame(detect);\r\n        });\r\n\r\n        hands.send({ image: canvas });\r\n        console.log(\"DEBUG: Sent canvas frame to MediaPipe.\");\r\n    }\r\n\r\n    detect();\r\n}\r\n\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-01 23:12:21","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1211,"title":"numone-globals-js","code":"\/\/ Global variables for models and detection state.\r\nlet videoStream = null;\r\nlet detectionStopped = false;\r\nlet faceDetectorVideo, faceDetectorImage;\r\nlet gestureRecognizerVideo, gestureRecognizerImage;\r\nlet handLandmarkerVideo, handLandmarkerImage;\r\nlet debug = true;\r\nlet isGestureDetected = false;\r\nlet detectionStartTime = null;\r\n\r\n\r\n\/\/ -------------------------------\r\n\/\/ Expose module functions (optional)\r\n\/\/ -------------------------------\r\nwindow.CameraModule = {\r\n  startCamera,\r\n  stopCamera,\r\n  restartDetection\r\n};\r\n\r\n\/\/ -------------------------------\r\n\/\/ For demo\/testing: start camera automatically when the module loads.\r\n\/\/ -------------------------------\r\n\/\/startCamera();\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-05 23:03:33","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1218,"title":"numone-camera-js","code":"\/\/ -------------------------------\r\n\/\/ Inject CSS for the camera container, video, and canvas.\r\n\/\/ -------------------------------\r\n(function injectCameraCSS() {\r\n  const style = document.createElement(\"style\");\r\n  style.innerHTML = `\r\n    \/* Container for the video and canvas *\/\r\n    #videoContainer {\r\n      position: relative;\r\n      width: 640px;\r\n      height: 480px;\r\n      margin: 20px auto;\r\n      background: black;\r\n    }\r\n    \/* Video element styling *\/\r\n    #videoContainer video {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      z-index: 1;\r\n      object-fit: cover;\r\n    }\r\n    \/* Overlay canvas styling *\/\r\n    #videoContainer #cameraCanvas {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      z-index: 2;\r\n      pointer-events: none;\r\n      border: 2px solid red; \/* For debugging; remove or change as needed *\/\r\n    }\r\n  `;\r\n  document.head.appendChild(style);\r\n})();\r\n\r\n\/\/ -------------------------------\r\n\/\/ Create a container for the video and canvas if it doesn't exist.\r\n\/\/ -------------------------------\r\nfunction createCameraContainer() {\r\n  let container = document.getElementById(\"videoContainer\");\r\n  if (!container) {\r\n    container = document.createElement(\"div\");\r\n    container.id = \"videoContainer\";\r\n    document.body.appendChild(container);\r\n  }\r\n  return container;\r\n}\r\n\r\n\/\/ -------------------------------\r\n\/\/ Start the camera and initiate detection.\r\n\/\/ -------------------------------\r\nasync function startCamera() {\r\n  console.log(\"\ud83c\udfa5 Starting camera...\");\r\n  try {\r\n    const container = createCameraContainer();\r\n    \/\/ Create (or retrieve) the video element\r\n    let video = container.querySelector(\"#webcam\");\r\n    if (!video) {\r\n      video = document.createElement(\"video\");\r\n      video.id = \"webcam\";\r\n      video.autoplay = true;\r\n      video.playsInline = true;\r\n      container.appendChild(video);\r\n    }\r\n    \/\/ Stop any existing stream\r\n    stopCamera();\r\n    videoStream = await navigator.mediaDevices.getUserMedia({ video: { width: 640, height: 480 } });\r\n    video.srcObject = videoStream;\r\n    video.onloadedmetadata = () => {\r\n      video.play();\r\n      \/\/ Start detection only after video dimensions are available.\r\n      detectFaceAndGesture(video);\r\n    };\r\n    console.log(\"\u2705 Camera started.\");\r\n  } catch (error) {\r\n    console.error(\"\u274c Error starting camera:\", error);\r\n  }\r\n}\r\n\r\n\/\/ -------------------------------\r\n\/\/ Stop the camera stream.\r\n\/\/ -------------------------------\r\nfunction stopCamera() {\r\n  if (videoStream) {\r\n    videoStream.getTracks().forEach(track => track.stop());\r\n    videoStream = null;\r\n    console.log(\"\ud83d\uded1 Camera stopped.\");\r\n  }\r\n}\r\n\r\n\/\/ -------------------------------\r\n\/\/ Restart detection by stopping and restarting the camera.\r\n\/\/ -------------------------------\r\nfunction restartDetection() {\r\n  console.log(\"\ud83d\udd04 Restarting detection...\");\r\n  detectionStopped = true;\r\n  stopCamera();\r\n  resetDetectionState();\r\n  startCamera();\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-05 22:48:20","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1219,"title":"numone-mediapipe-models-js","code":"\/\/ \u2705 Function to Create Face Detector with Mode\r\nasync function createFaceDetector(mode = \"VIDEO\") {\r\n    console.log(\"DEBUG: Initializing MediaPipe Face Detector in\", mode, \"mode...\");\r\n    \r\n    const vision = await FilesetResolver.forVisionTasks(\r\n        \"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/tasks-vision@0.10.3\/wasm\"\r\n    );\r\n\r\n    const options = {\r\n        baseOptions: {\r\n            modelAssetPath: `https:\/\/storage.googleapis.com\/mediapipe-models\/face_detector\/blaze_face_short_range\/float16\/1\/blaze_face_short_range.tflite`,\r\n            delegate: \"GPU\"\r\n        },\r\n        runningMode: mode\r\n    };\r\n\r\n    if (mode === \"IMAGE\") {\r\n        faceDetectorImage = await FaceDetector.createFromOptions(vision, options);\r\n    } else {\r\n        faceDetectorVideo = await FaceDetector.createFromOptions(vision, options);\r\n    }\r\n\r\n    console.log(\"DEBUG: Face Detector is ready for\", mode, \"mode.\");\r\n}\r\n\r\n\/\/ \u2705 Function to Create Hand Landmarker with Mode\r\nasync function createHandLandmarker(mode = \"VIDEO\") {\r\n  console.log(\"DEBUG: Initializing MediaPipe Hand Landmarker in\", mode, \"mode...\");\r\n  \r\n  const vision = await FilesetResolver.forVisionTasks(\r\n    \"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/tasks-vision@0.10.3\/wasm\"\r\n  );\r\n\r\n  const options = {\r\n    baseOptions: {\r\n      modelAssetPath: \"https:\/\/storage.googleapis.com\/mediapipe-models\/hand_landmarker\/hand_landmarker\/float16\/1\/hand_landmarker.task\",\r\n      delegate: \"GPU\"\r\n    },\r\n    runningMode: mode,\r\n    numHands: 2\r\n  };\r\n\r\n  if (mode === \"IMAGE\") {\r\n    handLandmarkerImage = await HandLandmarker.createFromOptions(vision, options);\r\n  } else {\r\n    handLandmarkerVideo = await HandLandmarker.createFromOptions(vision, options);\r\n  }\r\n\r\n  console.log(\"DEBUG: MediaPipe Hand Landmarker is ready for\", mode, \"mode.\");\r\n}\r\n\r\n\/\/ \u2705 Function to Create Gesture Recognizer with Mode\r\nasync function createGestureRecognizer(mode = \"VIDEO\") {\r\n  console.log(\"DEBUG: Initializing MediaPipe Gesture Recognizer in\", mode, \"mode...\");\r\n  \r\n  const vision = await FilesetResolver.forVisionTasks(\r\n    \"https:\/\/cdn.jsdelivr.net\/npm\/@mediapipe\/tasks-vision@0.10.3\/wasm\"\r\n  );\r\n\r\n  const options = {\r\n    baseOptions: {\r\n      modelAssetPath: \"https:\/\/storage.googleapis.com\/mediapipe-models\/gesture_recognizer\/gesture_recognizer\/float16\/1\/gesture_recognizer.task\",\r\n      delegate: \"GPU\"\r\n    },\r\n    runningMode: mode\r\n  };\r\n\r\n  if (mode === \"IMAGE\") {\r\n    gestureRecognizerImage = await GestureRecognizer.createFromOptions(vision, options);\r\n  } else {\r\n    gestureRecognizerVideo = await GestureRecognizer.createFromOptions(vision, options);\r\n  }\r\n\r\n  console.log(\"DEBUG: MediaPipe Gesture Recognizer is ready for\", mode, \"mode.\");\r\n}\r\n\r\n\/\/ \u2705 Function to Load All MediaPipe Models\r\nasync function loadMediaPipeModels() {\r\n  console.log(\"\u23f3 Loading MediaPipe models...\");\r\n  try {\r\n    \/\/ These functions should initialize your models and set the global variables.\r\n    await createFaceDetector(\"VIDEO\");  \/\/ Should set faceDetectorVideo\r\n    await createFaceDetector(\"IMAGE\");  \/\/ Should set faceDetectorImage\r\n    await createGestureRecognizer(\"VIDEO\");  \/\/ Should set gestureRecognizerVideo\r\n    await createGestureRecognizer(\"IMAGE\");  \/\/ Should set gestureRecognizerImage\r\n    await createHandLandmarker(\"VIDEO\");  \/\/ Should set handLandmarkerVideo\r\n    await createHandLandmarker(\"IMAGE\");  \/\/ Should set handLandmarkerImage\r\n\r\n    if (!faceDetectorVideo || !gestureRecognizerVideo || !handLandmarkerVideo) {\r\n      console.log(\"\u26a0\ufe0f Some video models failed to load.\");\r\n      return;\r\n    }\r\n    if (!faceDetectorImage || !gestureRecognizerImage || !handLandmarkerImage) {\r\n      console.log(\"\u26a0\ufe0f Some image models failed to load.\");\r\n      return;\r\n    }\r\n    console.log(\"\u2705 All MediaPipe models loaded successfully.\");\r\n  } catch (error) {\r\n    console.error(\"\u274c Error loading models:\", error);\r\n  }\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-05 22:50:01","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1220,"title":"numone-gesture-detection-js","code":"\/\/ ----------------------------------------\r\n\/\/ Gesture Detection Functions\r\n\/\/ ----------------------------------------\r\n\r\n\/**\r\n * Detects gestures in the given video frame.\r\n * @param {HTMLVideoElement} frame - The video frame.\r\n * @param {CanvasRenderingContext2D} ctx - The drawing context.\r\n * @returns {string|null} - The detected gesture or null if none found.\r\n *\/\r\nfunction detectGesture(frame, ctx) {\r\n  let handLandmarks = detectHands(frame, ctx);\r\n  if (handLandmarks && handLandmarks.length > 0) {\r\n\r\n    let detectMiddleFinger = document.title.includes(\"NOT\");\r\n\r\n    if (detectMiddleFinger) {\r\n      for (let index = 0; index < handLandmarks.length; index++) {\r\n        let landmarkSet = handLandmarks[index];\r\n        console.log(landmarkSet);\r\n        \r\n        drawConnectors(ctx, landmarkSet, HAND_CONNECTIONS, {\r\n          color: \"#00FF00\", \/\/ Green skeleton\r\n          lineWidth: 5\r\n        });\r\n        drawLandmarks(ctx, landmarkSet, {\r\n          color: \"#FF0000\", \/\/ Red dots\r\n          lineWidth: 2\r\n        });\r\n\r\n        let found = checkMiddleFinger(landmarkSet);\r\n        if (found === 'Middle_Finger') {\r\n          console.log(\"\u2705 Middle Finger Detected\");\r\n          return found; \/\/ \u2705 Immediately return once detected\r\n        }\r\n      }\r\n      return null; \/\/ If no middle finger is found\r\n    } else {\r\n      return detectThumbsUpGoogle(frame, ctx);\r\n    }\r\n  }\r\n}\r\n\r\n\/**\r\n * Detects hands in the given video frame.\r\n * @param {HTMLVideoElement} frame - The video frame.\r\n * @param {CanvasRenderingContext2D} ctx - The drawing context.\r\n * @returns {Array|null} - Array of hand landmarks or null if no hands detected.\r\n *\/\r\nfunction detectHands(frame, ctx) {\r\n  if (!handLandmarkerVideo) {\r\n    console.warn(\"Hand Landmarker not initialized.\");\r\n    return null;\r\n  }\r\n  \/\/ Use the current video frame and performance.now() as the timestamp.\r\n  const results = handLandmarkerVideo.detectForVideo(frame, performance.now());\r\n  if (results && results.landmarks && results.landmarks.length > 0) {\r\n    return results.landmarks;\r\n  }\r\n  return null;\r\n}\r\n\r\n\/**\r\n * Detects if a thumbs-up gesture is present in the given video frame.\r\n * @param {HTMLVideoElement} frame - The video frame.\r\n * @param {CanvasRenderingContext2D} ctx - The drawing context.\r\n * @returns {string|null} - Returns 'Thumb_Up' if detected, otherwise null.\r\n *\/\r\nfunction detectThumbsUpGoogle(frame, ctx) {\r\n  if (!gestureRecognizerVideo) {\r\n    console.warn(\"Hand Landmarker not initialized.\");\r\n    return null;\r\n  }\r\n\r\n  const results = gestureRecognizerVideo.recognizeForVideo(frame, performance.now());\r\n\r\n  if (results && results.landmarks && results.landmarks.length > 0) {\r\n    displayHandDetections(results.landmarks, ctx);\r\n  }\r\n\r\n  if (results.gestures && results.gestures.length > 0) {\r\n    const gestureName = results.gestures[0][0].categoryName;\r\n    if (gestureName === 'Thumb_Up') {\r\n      return gestureName;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n\/**\r\n * Checks if a middle finger gesture is present in the given hand landmarks.\r\n * @param {Array} handLandmarks - Array of hand landmarks.\r\n * @returns {string|null} - Returns 'Middle_Finger' if detected, otherwise null.\r\n *\/\r\nfunction checkMiddleFinger(handLandmarks) {\r\n  if (!handLandmarks || handLandmarks.length < 21) {\r\n    console.log(\"DEBUG: Insufficient landmarks for middle finger detection.\");\r\n    return null;\r\n  }\r\n\r\n  \/\/ Tolerances for checking:\r\n  const extTolerance = 0.05;    \/\/ For middle finger extension\r\n  const foldTolerance = 0.025;  \/\/ For checking that the index finger is folded\r\n  const obscuredThreshold = 0.03; \/\/ If index finger tip - pip is less than this, consider it obscured\r\n\r\n  \/\/ Middle finger landmarks\r\n  const middle_tip = handLandmarks[12];\r\n  const middle_pip = handLandmarks[10];\r\n\r\n  \/\/ Index finger landmarks\r\n  const index_tip = handLandmarks[8];\r\n  const index_pip = handLandmarks[6];\r\n\r\n  \/\/ Check middle finger extension:\r\n  const middleExtended = middle_tip.y < (middle_pip.y - extTolerance);\r\n\r\n  \/\/ Compute the vertical distance for the index finger:\r\n  const indexDistance = index_tip.y - index_pip.y;\r\n  let indexFolded;\r\n  if (indexDistance < obscuredThreshold) {\r\n    console.log(\"DEBUG: Index finger appears to be obscured; ignoring index folded check.\");\r\n    indexFolded = true;\r\n  } else {\r\n    indexFolded = index_tip.y > (index_pip.y + foldTolerance);\r\n  }\r\n\r\n  console.log(`DEBUG: checkMiddleFinger -> middleExtended: ${middleExtended}, indexDistance: ${indexDistance.toFixed(3)}, indexFolded: ${indexFolded}`);\r\n\r\n  if (middleExtended && indexFolded)\r\n    return 'Middle_Finger';\r\n  return null;\r\n}\r\n\r\n\/**\r\n * Confirms if a detected gesture has been held long enough for validation.\r\n * @returns {boolean} - Returns true if the gesture has been held long enough, otherwise false.\r\n *\/\r\nfunction confirmGestureHold() {\r\n  if (isGestureDetected) {\r\n    let elapsedTime = (Date.now() - detectionStartTime) \/ 1000;\r\n    const { detectionEmoji, successText, noGestureText } = getGestureInfo();\r\n    document.getElementById(\"result\").innerText = `${detectionEmoji} ${successText} Taking picture in ${2 - Math.floor(elapsedTime)}s...`;\r\n    document.getElementById(\"result\").style.color = \"green\";\r\n    return elapsedTime >= 2;\r\n  } else {\r\n    isGestureDetected = true;\r\n    detectionStartTime = Date.now();\r\n    return false;\r\n  }\r\n}\r\n\r\n\/**\r\n * Resets the detection state.\r\n *\/\r\nfunction resetDetectionState() {\r\n  isGestureDetected = false;\r\n  detectionStartTime = null;\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-05 22:51:34","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1221,"title":"numone-face-detection-js","code":"\/\/ -------------------------------\r\n\/\/ Face & Gesture Detection (Live)\r\n\/\/ -------------------------------\r\nasync function detectFaceAndGesture(video) {\r\n  console.log(\"detectFaceAndGesture started\");\r\n  if (!faceDetectorVideo || !gestureRecognizerVideo || !handLandmarkerVideo) {\r\n    await loadMediaPipeModels();\r\n    if (!faceDetectorVideo || !gestureRecognizerVideo || !handLandmarkerVideo) return;\r\n  }\r\n    \r\n  const { noGestureText } = getGestureInfo();\r\n  document.getElementById(\"result\").innerText = noGestureText;\r\n  document.getElementById(\"result\").style.color = \"red\";\r\n\r\n  const canvas = getCameraCanvas(video);\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  async function processFrame() {\r\n    if (detectionStopped) return;\r\n\r\n    \/\/ Clear and draw the current video frame on the canvas.\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    \/\/ Run face detection directly on the video element.\r\n    const faceResults = await faceDetectorVideo.detectForVideo(video, performance.now());\r\n    if (!faceResults || faceResults.detections.length === 0) {\r\n      resetDetectionState();\r\n      requestAnimationFrame(processFrame);\r\n      return;\r\n    }\r\n\r\n    displayFaceDetections(faceResults.detections, ctx);\r\n    let faceBoundingBox = faceResults.detections[0].boundingBox;\r\n\r\n    \/\/ Placeholder gesture detection.\r\n    let detectedGesture = detectGesture(video, ctx);\r\n    if (!detectedGesture) {\r\n      const { noGestureText } = getGestureInfo();\r\n      document.getElementById(\"result\").innerText = noGestureText;\r\n      document.getElementById(\"result\").style.color = \"red\";\r\n      resetDetectionState();\r\n      requestAnimationFrame(processFrame);\r\n      return;\r\n    }\r\n    if (confirmGestureHold()) {\r\n      let dataURL = canvas.toDataURL(\"image\/png\");\r\n      let savedImage = saveImage(dataURL);\r\n      let encodedImage = await embedMetadata(savedImage, faceBoundingBox, detectedGesture);\r\n      storeEncodedImage(encodedImage);\r\n      detectionStopped = true;\r\n      return;\r\n    }\r\n    requestAnimationFrame(processFrame);\r\n  }\r\n  processFrame();\r\n}\r\n\r\n\/\/ -------------------------------\r\n\/\/ Face Detection, Saving, and Metadata Embedding\r\n\/\/ -------------------------------\r\nasync function detectFace(frame, isLive = true) {\r\n  console.log(\"\ud83e\uddd1 Running face detection...\");\r\n  let faceDetector = isLive ? faceDetectorVideo : faceDetectorImage;\r\n  if (!faceDetector) {\r\n    console.error(\"\u274c Face detector is not initialized.\");\r\n    return null;\r\n  }\r\n  try {\r\n    let image = new Image();\r\n    image.src = frame;\r\n    await new Promise(resolve => image.onload = resolve);\r\n    let faceResults = isLive\r\n      ? await faceDetector.detectForVideo(image, performance.now())\r\n      : await faceDetector.detect(image);\r\n    if (faceResults.detections.length === 0) {\r\n      return null;\r\n    }\r\n    return faceResults;\r\n  } catch (error) {\r\n    console.error(\"\u274c Error during face detection:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n\/\/ -------------------------------\r\n\/\/ Display Face Detections\r\n\/\/ -------------------------------\r\nfunction displayFaceDetections(detections, ctx) {\r\n  const canvasWidth = ctx.canvas.width;\r\n  const canvasHeight = ctx.canvas.height;\r\n  detections.forEach(detection => {\r\n    const { originX: x, originY: y, width, height } = detection.boundingBox;\r\n    \/\/ Scale coordinates if they appear to be normalized.\r\n    let scaledX = x, scaledY = y, scaledWidth = width, scaledHeight = height;\r\n    if (x <= 1 && y <= 1 && width <= 1 && height <= 1) {\r\n      scaledX = x * canvasWidth;\r\n      scaledY = y * canvasHeight;\r\n      scaledWidth = width * canvasWidth;\r\n      scaledHeight = height * canvasHeight;\r\n    }\r\n    ctx.strokeStyle = \"limegreen\";\r\n    ctx.lineWidth = 3;\r\n    ctx.strokeRect(scaledX, scaledY, scaledWidth, scaledHeight);\r\n    const confidence = Math.round(detection.categories[0].score * 100);\r\n    ctx.fillStyle = \"rgba(0,0,0,0.7)\";\r\n    ctx.fillRect(scaledX, scaledY - 25, 80, 20);\r\n    ctx.fillStyle = \"white\";\r\n    ctx.font = \"14px Arial\";\r\n    ctx.fillText(`Conf: ${confidence}%`, scaledX + 5, scaledY - 10);\r\n  });\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-05 22:53:17","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1222,"title":"numone-image-processing-js","code":"\/\/ -------------------------------\r\n\/\/ \ud83d\udcc2 Image Processing Module\r\n\/\/ Handles Image Capture & Metadata\r\n\/\/ -------------------------------\r\n\r\n\/**\r\n * Saves the captured image frame.\r\n * @param {string} frame - The image data URL.\r\n * @returns {string} - Returns the image frame.\r\n *\/\r\nfunction saveImage(frame) {\r\n  console.log(\"\ud83d\udcbe Saving image...\");\r\n  captureImage();\r\n  return frame;\r\n}\r\n\r\n\/**\r\n * Captures an image from the video feed and stores it.\r\n *\/\r\nfunction captureImage() {\r\n  const video = document.getElementById(\"webcam\");\r\n  const memeCanvas = document.getElementById(\"memeCanvas\");\r\n  const ctx = memeCanvas.getContext(\"2d\");\r\n  const borderThickness = 10;\r\n\r\n  \/\/ \u2705 Set canvas size based on the device's camera resolution\r\n  memeCanvas.width = video.videoWidth + 2 * borderThickness;\r\n  memeCanvas.height = video.videoHeight + 2 * borderThickness;\r\n\r\n  savedImageHeight = video.videoHeight;\r\n  savedBorderThickness = borderThickness;\r\n  savedVideoWidth = video.videoWidth;\r\n\r\n  \/\/ \u2705 Draw black border and white background\r\n  ctx.fillStyle = \"black\";\r\n  ctx.fillRect(0, 0, memeCanvas.width, memeCanvas.height);\r\n  ctx.fillStyle = \"white\";\r\n  ctx.fillRect(borderThickness, borderThickness, memeCanvas.width - 2 * borderThickness, memeCanvas.height - 2 * borderThickness);\r\n\r\n  \/\/ \u2705 Draw video frame at its natural resolution\r\n  ctx.drawImage(video, borderThickness, borderThickness, video.videoWidth, video.videoHeight);\r\n\r\n  \/\/ \u2705 Stop the video stream after capturing\r\n  videoStream.getTracks().forEach(track => track.stop());\r\n  video.style.display = \"none\";\r\n\r\n  \/\/ \u2705 Convert captured image to data URL\r\n  savedImage = new Image();\r\n  savedImage.onload = function () {\r\n    updateMemeText(); \/\/ Call function to add text\r\n  };\r\n  savedImage.src = memeCanvas.toDataURL(\"image\/png\");\r\n\r\n  \/\/ \u2705 Update result message\r\n  const resultMessage = document.getElementById(\"result\");\r\n  resultMessage.innerHTML = \"\ud83d\udcf8 <strong>Picture Captured!<\/strong><br>Meme Ready!<br>Customize & Save Below.\";\r\n  resultMessage.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n\r\n  \/\/ \u2705 Show the meme editor\r\n  document.getElementById(\"sticky-footer\").style.display = \"block\";\r\n  document.getElementById(\"preview\").style.display = \"block\";\r\n  document.getElementById(\"memeEditorBlurb\").style.display = \"block\";\r\n}\r\n\r\n\/**\r\n * Embeds metadata into an image.\r\n * @param {string} image - The image data URL.\r\n * @param {Object} faceBoundingBox - Bounding box of detected face.\r\n * @param {string} detectedGesture - The detected gesture.\r\n * @returns {Promise<string>} - A promise resolving to the encoded image.\r\n *\/\r\nfunction embedMetadata(image, faceBoundingBox, detectedGesture) {\r\n  console.log(\"\ud83d\udcdd Embedding metadata...\");\r\n  let img = new Image();\r\n  img.src = image;\r\n  return new Promise(resolve => {\r\n    img.onload = function () {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0);\r\n      let metadataString = JSON.stringify({ faceBoundingBox, gesture: detectedGesture });\r\n      ctx.fillStyle = \"rgba(255,255,255,0)\";\r\n      ctx.font = \"1px Arial\";\r\n      ctx.fillText(metadataString, 1, 1);\r\n      resolve(canvas.toDataURL(\"image\/png\"));\r\n    };\r\n  });\r\n}\r\n\r\n\/**\r\n * Stores the final encoded image by prompting a download.\r\n * @param {string} encodedImage - The processed image with metadata.\r\n *\/\r\nfunction storeEncodedImage(encodedImage) {\r\n  console.log(\"\ud83d\udcc2 Storing final image...\");\r\n  const link = document.createElement(\"a\");\r\n  link.href = encodedImage;\r\n  link.download = `detected_image_${Date.now()}.png`;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n}\r\n\r\n\/**\r\n * Loads an image from a given URL.\r\n * @param {string} imageUrl - The URL of the image.\r\n * @returns {Promise<string>} - A promise resolving to the image data URL.\r\n *\/\r\nfunction loadImage(imageUrl) {\r\n  console.log(\"\ud83d\uddbc\ufe0f Loading image from URL...\");\r\n  return new Promise(resolve => {\r\n    let img = new Image();\r\n    img.crossOrigin = \"Anonymous\";\r\n    img.src = imageUrl;\r\n    img.onload = function () {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0);\r\n      resolve(canvas.toDataURL(\"image\/png\"));\r\n    };\r\n  });\r\n}\r\n\r\n\/**\r\n * Extracts metadata from an image.\r\n * @param {string} image - The image data URL.\r\n * @returns {Promise<Object|null>} - A promise resolving to the extracted metadata or null.\r\n *\/\r\nfunction extractMetadata(image) {\r\n  console.log(\"\ud83d\udd0d Checking for embedded metadata...\");\r\n  return new Promise(resolve => {\r\n    let img = new Image();\r\n    img.src = image;\r\n    img.onload = function () {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0);\r\n      let pixelData = ctx.getImageData(1, 1, 1, 1).data;\r\n      let hiddenText = String.fromCharCode(pixelData[0], pixelData[1], pixelData[2]);\r\n      try {\r\n        let extractedMetadata = JSON.parse(hiddenText);\r\n        console.log(\"\u2705 Extracted metadata:\", extractedMetadata);\r\n        resolve(extractedMetadata);\r\n      } catch (error) {\r\n        console.log(\"\u274c No embedded metadata found.\");\r\n        resolve(null);\r\n      }\r\n    };\r\n  });\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-05 22:54:55","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1223,"title":"numone-helper-func-js","code":"\/\/ =========================\r\n\/\/ \ud83c\udfa5 UI Helper Functions\r\n\/\/ =========================\r\n\r\n\/**\r\n * Retrieves or creates the camera canvas for video rendering.\r\n * @param {HTMLVideoElement} video - The video element displaying the webcam feed.\r\n * @returns {HTMLCanvasElement} - The canvas element for camera overlay.\r\n *\/\r\nfunction getCameraCanvas(video) {\r\n  const container = createCameraContainer();\r\n  let canvas = container.querySelector(\"#cameraCanvas\");\r\n  if (!canvas) {\r\n    canvas = document.createElement(\"canvas\");\r\n    canvas.id = \"cameraCanvas\";\r\n    canvas.width = video.videoWidth || 640;\r\n    canvas.height = video.videoHeight || 480;\r\n    canvas.style.position = \"absolute\";\r\n    canvas.style.top = \"0\";\r\n    canvas.style.left = \"0\";\r\n    canvas.style.zIndex = \"2\";\r\n    container.appendChild(canvas);\r\n  } else {\r\n    canvas.width = video.videoWidth || 640;\r\n    canvas.height = video.videoHeight || 480;\r\n  }\r\n  return canvas;\r\n}\r\n\r\n\/**\r\n * Returns the appropriate gesture messages based on document title.\r\n * @returns {Object} - Contains emoji, no-gesture text, and success text.\r\n *\/\r\nfunction getGestureInfo() {\r\n    if (document.title.includes(\"NOT\")) {\r\n        return {\r\n            detectionEmoji: \"\ud83d\udd95\",\r\n            noGestureText: \"No Middle Finger Detected.\",\r\n            successText: \"Middle Finger Detected!\"\r\n        };\r\n    } else {\r\n        return {\r\n            detectionEmoji: \"\ud83d\udc4d\",\r\n            noGestureText: \"No Thumbs Up Detected.\",\r\n            successText: \"Thumbs Up Detected!\"\r\n        };\r\n    }\r\n}\r\n\r\n\/**\r\n * Displays detected hand landmarks on the canvas.\r\n * @param {Array} landmarks - The list of detected hand landmarks.\r\n * @param {CanvasRenderingContext2D} ctx - The canvas rendering context.\r\n *\/\r\nfunction displayHandDetections(landmarks, ctx) {\r\n  landmarks.forEach((landmarkSet) => {\r\n    drawConnectors(ctx, landmarkSet, HAND_CONNECTIONS, {\r\n      color: \"#00FF00\", \/\/ Green skeleton\r\n      lineWidth: 5\r\n    });\r\n    drawLandmarks(ctx, landmarkSet, {\r\n      color: \"#FF0000\", \/\/ Red dots\r\n      lineWidth: 2\r\n    });\r\n  });\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-03-05 22:56:21","tags":[],"note":"","cloud_id":false,"custom_shortcode":""}]