[{"id":271,"title":"detection.js","code":"\/\/ Paste Code Below \r\n\/**************************************\r\n * detection.js \u2013 Combined Gesture Detection\r\n **************************************\/\r\n\r\n\/* ========= Global Variables ========= *\/\r\nlet model = null;          \/\/ The handpose model (loaded once)\r\nlet videoStream = null;    \/\/ The live video stream (for live detection)\r\nlet isGestureDetected = false;\r\nlet detectionStartTime = null;\r\nlet detectionStopped = false;\r\n\r\n\/* ========= Gesture-Checking Functions ========= *\/\r\n\r\n\/\/ Checks if the middle finger is extended.\r\nfunction checkMiddleFinger(landmarks) {\r\n  if (!landmarks || landmarks.length < 21) return false;\r\n  const middle_tip = landmarks[12];\r\n  const middle_pip = landmarks[10];\r\n  const middleExtended = middle_tip[1] < middle_pip[1];\r\n  console.log(`Middle Finger Gesture Detected: ${middleExtended}`);\r\n  return middleExtended;\r\n}\r\n\r\n\/\/ Checks if the thumb is extended in a thumbs-up configuration.\r\nfunction checkThumbsUp(landmarks) {\r\n  if (!landmarks || landmarks.length < 21) return false;\r\n  const thumb_tip = landmarks[4];\r\n  const thumb_ip = landmarks[3];\r\n  const thumb_mcp = landmarks[2];\r\n  const thumbExtended = thumb_tip[1] < thumb_ip[1] - 30 && thumb_ip[1] < thumb_mcp[1] - 30;\r\n  console.log(`Thumb Extended: ${thumbExtended}`);\r\n  return thumbExtended;\r\n}\r\n\r\n\/\/ Additional finger-check functions\r\nfunction checkIndexFinger(landmarks) {\r\n  if (!landmarks || landmarks.length < 21) return false;\r\n  const index_tip = landmarks[8];\r\n  const index_pip = landmarks[6];\r\n  return index_tip[1] < index_pip[1];\r\n}\r\n\r\nfunction checkRingFinger(landmarks) {\r\n  if (!landmarks || landmarks.length < 21) return false;\r\n  const ring_tip = landmarks[16];\r\n  const ring_pip = landmarks[14];\r\n  return ring_tip[1] < ring_pip[1];\r\n}\r\n\r\nfunction checkPinkyFinger(landmarks) {\r\n  if (!landmarks || landmarks.length < 21) return false;\r\n  const pinky_tip = landmarks[20];\r\n  const pinky_pip = landmarks[18];\r\n  return pinky_tip[1] < pinky_pip[1];\r\n}\r\n\r\n\/* ========= File Detection Functions ========= *\/\r\n\r\n\/\/ Generic helper to detect a gesture from an image file.\r\nasync function detectGestureFromFileGeneric(filePath, gestureCheck) {\r\n  if (!model) {\r\n    model = await handpose.load();\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    const image = new Image();\r\n    image.src = filePath;\r\n    image.onload = async () => {\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = image.width;\r\n      canvas.height = image.height;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.drawImage(image, 0, 0);\r\n      try {\r\n        const predictions = await model.estimateHands(canvas);\r\n        if (predictions.length > 0) {\r\n          let detected = false;\r\n          predictions.forEach(prediction => {\r\n            if (gestureCheck(prediction.landmarks)) {\r\n              detected = true;\r\n            }\r\n          });\r\n          resolve(detected);\r\n        } else {\r\n          resolve(false); \/\/ No hand detected\r\n        }\r\n      } catch (error) {\r\n        reject(false);\r\n      }\r\n    };\r\n    image.onerror = () => {\r\n      reject(false);\r\n    };\r\n  });\r\n}\r\n\r\n\/\/ Detects a middle finger gesture from an image file.\r\nasync function detectMiddleFingerFromFile(filePath) {\r\n  return detectGestureFromFileGeneric(filePath, checkMiddleFinger);\r\n}\r\n\r\n\/\/ Detects a thumbs-up gesture from an image file.\r\nasync function detectThumbsUpFromFile(filePath) {\r\n  return detectGestureFromFileGeneric(filePath, checkThumbsUp);\r\n}\r\n\r\n\/* ========= Live (Camera) Detection Functions ========= *\/\r\n\r\n\/\/ Returns the gesture parameters based on the document title.\r\nfunction getGestureInfo() {\r\n  if (document.title.indexOf(\"NOT\") > -1) {\r\n    return {\r\n      gestureCheck: checkMiddleFinger,\r\n      detectionEmoji: \"\ud83d\udd95\",\r\n      noGestureText: \"No Middle Finger Detected.\",\r\n      successText: \"Middle Finger Detected!\"\r\n    };\r\n  } else {\r\n    return {\r\n      gestureCheck: checkThumbsUp,\r\n      detectionEmoji: \"\ud83d\udc4d\",\r\n      noGestureText: \"No Thumbs Up Detected.\",\r\n      successText: \"Thumbs Up Detected!\"\r\n    };\r\n  }\r\n}\r\n\r\n\/\/ Starts the camera and begins live gesture detection.\r\nasync function startCamera() {\r\n  const video = document.getElementById(\"webcam\");\r\n  videoStream = await navigator.mediaDevices.getUserMedia({ video: { width: 640, height: 480 } });\r\n  video.srcObject = videoStream;\r\n  video.style.display = \"block\";\r\n  if (!model) {\r\n    model = await handpose.load();\r\n  }\r\n  detectHands();\r\n}\r\n\r\n\/\/ Continuously detects hands from the video stream.\r\nasync function detectHands() {\r\n  if (!model || detectionStopped) return;\r\n  const video = document.getElementById(\"webcam\");\r\n  const { gestureCheck, detectionEmoji, successText, noGestureText } = getGestureInfo();\r\n\r\n  async function detect() {\r\n    if (detectionStopped) return;\r\n    const predictions = await model.estimateHands(video);\r\n    let gestureDetectedLocal = false;\r\n\r\n    if (predictions.length > 0) {\r\n      predictions.forEach(prediction => {\r\n        if (gestureCheck(prediction.landmarks)) {\r\n          gestureDetectedLocal = true;\r\n          if (!isGestureDetected) {\r\n            isGestureDetected = true;\r\n            detectionStartTime = Date.now();\r\n          } else {\r\n            const elapsedTime = (Date.now() - detectionStartTime) \/ 1000;\r\n            document.getElementById(\"result\").innerText = `${detectionEmoji} ${successText} Taking picture in ${3 - Math.floor(elapsedTime)}s...`;\r\n            document.getElementById(\"result\").style.color = \"green\";\r\n            if (elapsedTime >= 3) {\r\n              captureImage();\r\n              detectionStopped = true;\r\n              return;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n    if (!gestureDetectedLocal) {\r\n      resetDetectionMessage();\r\n    }\r\n    requestAnimationFrame(detect);\r\n  }\r\n  detect();\r\n}\r\n\r\n\/\/ Resets the live detection UI and state.\r\nfunction resetDetectionMessage() {\r\n  isGestureDetected = false;\r\n  detectionStartTime = null;\r\n  const { noGestureText } = getGestureInfo();\r\n  document.getElementById(\"result\").innerText = noGestureText;\r\n  document.getElementById(\"result\").style.color = \"red\";\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-23 14:35:01","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":110,"title":"12 hour limit","code":"\/\/<?php\r\nfunction limit_user_submissions() {\r\n    if (!is_user_logged_in()) {\r\n        return; \/\/ Skip for guests\r\n    }\r\n\r\n    $user_id = get_current_user_id();\r\n    $last_submission = get_user_meta($user_id, 'last_submission_time', true);\r\n    $time_limit = 12 * 60 * 60; \/\/ 12 hours in seconds\r\n\r\n    if ($last_submission && (time() - $last_submission) < $time_limit) {\r\n        wp_die('<p style=\"color:red; font-weight:bold;\">You can only submit one post every 12 hours. Try again later.<\/p>', 'Submission Limit Reached', array('back_link' => true));\r\n    }\r\n}\r\nadd_action('user_submitted_posts_pre_insert', 'limit_user_submissions');\r\n\r\nfunction save_user_submission_time($post_ID) {\r\n    if (is_user_logged_in()) {\r\n        $user_id = get_current_user_id();\r\n        update_user_meta($user_id, 'last_submission_time', time());\r\n    }\r\n}\r\nadd_action('wp_insert_post', 'save_user_submission_time');\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-24 02:31:27","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":319,"title":"wrap_text","code":"function wrapText(ctx, text, x, y, maxWidth, lineHeight) {\r\n    \/\/ \u2705 Explicitly apply the current font and styling\r\n    const currentFont = ctx.font;\r\n    const currentFillStyle = ctx.fillStyle;\r\n    const currentStrokeStyle = ctx.strokeStyle;\r\n    const currentLineWidth = ctx.lineWidth;\r\n\r\n    const sentences = text.split(\/(?<=[.!?])\\s+\/); \/\/ Split by sentences\r\n\r\n    sentences.forEach(sentence => {\r\n        if (ctx.measureText(sentence).width <= maxWidth) {\r\n            \/\/ Draw sentence in one line\r\n            ctx.font = currentFont;\r\n            ctx.fillStyle = currentFillStyle;\r\n            ctx.strokeStyle = currentStrokeStyle;\r\n            ctx.lineWidth = currentLineWidth;\r\n\r\n            ctx.fillText(sentence, x, y);\r\n            ctx.strokeText(sentence, x, y);\r\n            y += lineHeight;\r\n        } else {\r\n            \/\/ Break sentence into multiple lines if too long\r\n            const words = sentence.split(' ');\r\n            let line = '';\r\n\r\n            for (let i = 0; i < words.length; i++) {\r\n                const testLine = line + words[i] + ' ';\r\n                const testWidth = ctx.measureText(testLine).width;\r\n\r\n                if (testWidth > maxWidth && i > 0) {\r\n                    ctx.font = currentFont;\r\n                    ctx.fillStyle = currentFillStyle;\r\n                    ctx.strokeStyle = currentStrokeStyle;\r\n                    ctx.lineWidth = currentLineWidth;\r\n\r\n                    ctx.fillText(line, x, y);\r\n                    ctx.strokeText(line, x, y);\r\n                    line = words[i] + ' ';\r\n                    y += lineHeight;\r\n                } else {\r\n                    line = testLine;\r\n                }\r\n            }\r\n\r\n            \/\/ Draw last remaining line\r\n            ctx.fillText(line, x, y);\r\n            ctx.strokeText(line, x, y);\r\n            y += lineHeight;\r\n        }\r\n    });\r\n}\r\n","code_type":"js","location":"site_wide_header","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-20 13:23:12","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":512,"title":"submit-post-meme","code":"\/\/<?php\r\n\r\n\/\/ \u2705 Generate Nonce for Upload Form (Pending Only)\r\nadd_action('wp_ajax_get_meme_nonce', 'generate_meme_nonce');\r\nadd_action('wp_ajax_nopriv_get_meme_nonce', 'generate_meme_nonce');\r\n\r\nfunction generate_meme_nonce() {\r\n    $nonce = wp_create_nonce('get_meme_nonce');\r\n    wp_send_json_success(['nonce' => $nonce]);\r\n}\r\n\r\n\/\/ \u2705 Meme Upload Handler with Rejection on Integrity Check Failure\r\nadd_action('wp_ajax_upload_meme', 'handle_meme_upload');\r\nadd_action('wp_ajax_nopriv_upload_meme', 'handle_meme_upload');\r\n\r\nfunction handle_meme_upload() {\r\n    \/\/ Verify Nonce\r\n    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'get_meme_nonce')) {\r\n        wp_send_json_error(['message' => 'Invalid nonce.']);\r\n        return;\r\n    }\r\n\r\n    \/\/ Check if a file is uploaded\r\n    if (!isset($_FILES['file'])) {\r\n        wp_send_json_error(['message' => 'No file uploaded']);\r\n        return;\r\n    }\r\n\r\n    \/\/ Validate and Upload Image\r\n    $file = $_FILES['file'];\r\n    $allowed_types = ['image\/jpeg', 'image\/png', 'image\/gif'];\r\n    if (!in_array($file['type'], $allowed_types)) {\r\n        wp_send_json_error(['message' => 'Invalid file type.']);\r\n        return;\r\n    }\r\n\r\n    $uploaded_file = wp_handle_upload($file, ['test_form' => false]);\r\n\r\n    if (isset($uploaded_file['error'])) {\r\n        wp_send_json_error(['message' => $uploaded_file['error']]);\r\n        return;\r\n    }\r\n\r\n    $file_url = $uploaded_file['url'];\r\n\r\n    \/\/ Analyze image using Google Vision API\r\n    $image_safe = analyze_image_safety($file_url);\r\n    if ($image_safe !== true) {\r\n        wp_send_json_error(['message' => \"Image rejected: $image_safe\"]);\r\n        return;\r\n    }\r\n\r\n    \/\/ Analyze text for inappropriate language\r\n    $post_content = sanitize_text_field($_POST['post_content']);\r\n    $text_safe = analyze_text_safety($post_content);\r\n    if ($text_safe !== true) {\r\n        wp_send_json_error(['message' => \"Text rejected: Contains inappropriate language.\"]);\r\n        return;\r\n    }\r\n\r\n    \/\/ Create Post (Only if both checks passed)\r\n    $post_status = 'publish';\r\n\r\n    $image_html = '<div style=\"margin-bottom:20px;\"><img src=\"' . esc_url($file_url) . '\" alt=\"User Uploaded Meme\" style=\"max-width:100%; height:auto; border: 2px solid #ddd; padding: 5px; border-radius: 5px;\"><\/div>';\r\n    $post_data = [\r\n        'post_title'    => wp_strip_all_tags(substr($post_content, 0, 50)),\r\n        'post_content'  => $image_html . $post_content,\r\n        'post_status'   => $post_status,\r\n        'post_author'   => get_current_user_id(),\r\n        'post_type'     => 'post',\r\n    ];\r\n$post_id = wp_insert_post($post_data);\r\n\r\nif (is_wp_error($post_id)) {\r\n    wp_send_json_error(['message' => 'Failed to create post']);\r\n    return;\r\n}\r\n\r\n\/\/ \u2705 Upload the image and attach it to the post\r\n$attachment_id = media_handle_sideload([\r\n    'name'     => basename($uploaded_file['file']),\r\n    'tmp_name' => $uploaded_file['file'],\r\n], $post_id);\r\n\r\nif (is_wp_error($attachment_id)) {\r\n    wp_send_json_error(['message' => 'Failed to upload media']);\r\n    return;\r\n}\r\n\r\n\/\/ \u2705 Set the uploaded image as the featured image\r\nset_post_thumbnail($post_id, $attachment_id);\r\n\r\n\/\/ \u2705 Insert the image directly into post content\r\n$image_url = wp_get_attachment_url($attachment_id);\r\n$image_html = wp_get_attachment_image($attachment_id, 'full', false, [\r\n    'class' => 'meme-image',\r\n    'style' => 'max-width:100%; height:auto; border:2px solid #ddd; padding:5px; border-radius:5px;'\r\n]);\r\n\r\n$updated_post_data = [\r\n    'ID' => $post_id,\r\n    'post_content' => $image_html . $post_content \/\/ Automatically adds image before post text\r\n];\r\n\r\nwp_update_post($updated_post_data);\r\n\r\n\/\/ \u2705 Return success response\r\n$post_url = get_permalink($post_id);\r\nwp_send_json_success(['message' => 'Meme uploaded successfully.', 'url' => $post_url]);\r\n\r\n}\r\n\r\n\/\/ \u2705 Analyze Image Content Using Google Cloud Vision API with Specific Feedback\r\nfunction analyze_image_safety($file_url) {\r\n    $credentials = file_get_contents('https:\/\/elonandtrumpnumberone.com\/wp-content\/uploads\/2025\/02\/zee-coach-b0a5a711e22f.json');\r\n    $access_token = get_google_access_token($credentials);\r\n    if (!$access_token) {\r\n        return \"Unable to authenticate with Google Vision.\";\r\n    }\r\n\r\n    $vision_url = 'https:\/\/vision.googleapis.com\/v1\/images:annotate?access_token=' . $access_token;\r\n\r\n    $image_data = file_get_contents($file_url);\r\n    $base64_image = base64_encode($image_data);\r\n\r\n    $request_body = json_encode([\r\n        'requests' => [\r\n            [\r\n                'image' => ['content' => $base64_image],\r\n                'features' => [['type' => 'SAFE_SEARCH_DETECTION']],\r\n            ],\r\n        ],\r\n    ]);\r\n\r\n    $response = wp_remote_post($vision_url, [\r\n        'body'    => $request_body,\r\n        'headers' => ['Content-Type' => 'application\/json'],\r\n    ]);\r\n\r\n    if (is_wp_error($response)) {\r\n        return \"Failed to process image.\";\r\n    }\r\n\r\n    $body = json_decode(wp_remote_retrieve_body($response), true);\r\n    $safe_search = $body['responses'][0]['safeSearchAnnotation'];\r\n\r\n    $allowed_ratings = ['VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE'];\r\n\r\n    if (!in_array($safe_search['adult'], $allowed_ratings)) {\r\n        return \"Image contains adult content.\";\r\n    }\r\n\r\n    if (!in_array($safe_search['violence'], $allowed_ratings)) {\r\n        return \"Image contains violent content.\";\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n\/\/ \u2705 Get Google OAuth Access Token from Service Account JSON\r\nfunction get_google_access_token($credentials_json) {\r\n    $credentials = json_decode($credentials_json, true);\r\n\r\n    $jwt_header = base64_encode(json_encode(['alg' => 'RS256', 'typ' => 'JWT']));\r\n    $now = time();\r\n    $jwt_claim = base64_encode(json_encode([\r\n        'iss'   => $credentials['client_email'],\r\n        'scope' => 'https:\/\/www.googleapis.com\/auth\/cloud-platform',\r\n        'aud'   => 'https:\/\/oauth2.googleapis.com\/token',\r\n        'iat'   => $now,\r\n        'exp'   => $now + 3600\r\n    ]));\r\n\r\n    $signature = '';\r\n    openssl_sign($jwt_header . '.' . $jwt_claim, $signature, $credentials['private_key'], 'sha256');\r\n    $jwt = $jwt_header . '.' . $jwt_claim . '.' . base64_encode($signature);\r\n\r\n    $response = wp_remote_post('https:\/\/oauth2.googleapis.com\/token', [\r\n        'body' => [\r\n            'grant_type' => 'urn:ietf:params:oauth:grant-type:jwt-bearer',\r\n            'assertion'  => $jwt,\r\n        ],\r\n    ]);\r\n\r\n    if (is_wp_error($response)) {\r\n        return false;\r\n    }\r\n\r\n    $body = json_decode(wp_remote_retrieve_body($response), true);\r\n    return $body['access_token'] ?? false;\r\n}\r\n\r\n\/\/ \u2705 Basic Text Content Filter with Rejection Reason\r\nfunction analyze_text_safety($text) {\r\n    $banned_words = ['piss', 'shit', 'fuck', 'cunt', 'cock', 'fag'];\r\n    foreach ($banned_words as $word) {\r\n        if (stripos($text, $word) !== false) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-24 02:34:44","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":535,"title":"allow-json-upload","code":"\/\/<?php\r\n\r\n\/\/ \u2705 Allow JSON and JS file uploads in WordPress\r\nfunction allow_custom_upload_mimes($mimes) {\r\n    $mimes['json'] = 'application\/json'; \/\/ Allow JSON uploads\r\n    $mimes['js'] = 'application\/javascript'; \/\/ Allow JS uploads\r\n    return $mimes;\r\n}\r\nadd_filter('upload_mimes', 'allow_custom_upload_mimes');\r\n\r\n\/\/ \u2705 Verify file type and extension for JS uploads\r\nfunction fix_mime_types($data, $file, $filename, $mimes) {\r\n    $ext = pathinfo($filename, PATHINFO_EXTENSION);\r\n    \r\n    if ($ext === 'js') {\r\n        $data['ext'] = 'js';\r\n        $data['type'] = 'application\/javascript';\r\n    }\r\n\r\n    return $data;\r\n}\r\nadd_filter('wp_check_filetype_and_ext', 'fix_mime_types', 10, 4);\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-24 09:36:17","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":537,"title":"block-json-access","code":"\/\/<?php\r\n\r\n\/\/ \u2705 Block direct access to JSON and JS files for security\r\nfunction block_json_and_js_file_access() {\r\n    if (preg_match('\/\\.(json|js)$\/', $_SERVER['REQUEST_URI'])) {\r\n        wp_die('You are not allowed to access this file.');\r\n    }\r\n}\r\nadd_action('template_redirect', 'block_json_and_js_file_access');\r\n","code_type":"php","location":"everywhere","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-24 09:32:08","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":575,"title":"html-head","code":"<head>\r\n  <meta charset=\"UTF-8\" \/>\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" \/>\r\n  <title>Middle Finger Meme Generator<\/title>\r\n\r\n  <!-- \u2705 TensorFlow.js -->\r\n  <script src=\"https:\/\/cdn.jsdelivr.net\/npm\/@tensorflow\/tfjs\"><\/script>\r\n  <!-- \u2705 HandPose Model -->\r\n  <script src=\"https:\/\/cdn.jsdelivr.net\/npm\/@tensorflow-models\/handpose\"><\/script>\r\n  <!-- \u2705 Fingerpose (for more robust gesture recognition) -->\r\n  <script src=\"https:\/\/cdn.jsdelivr.net\/npm\/fingerpose@0.1.0\/dist\/fingerpose.min.js\"><\/script>\r\n\r\n  <!-- \u2705 Custom Detection Script -->\r\n  <script src=\"detection.js\" defer><\/script>\r\n<\/head>\r\n","code_type":"html","location":"","auto_insert":0,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-23 14:29:01","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":590,"title":"html-body","code":"<body>\r\n<div id=\"container\">\r\n<p id=\"result\">Awaiting gesture...<\/p>\r\n\r\n  <div class=\"image-controls-wrapper\">\r\n    <button id=\"startCameraBtn\" onclick=\"handleStartCamera()\">\ud83c\udfa5 Start Camera<\/button>\r\n    <video id=\"webcam\" autoplay playsinline><\/video>\r\n    <canvas id=\"memeCanvas\" style=\"display:none;\"><\/canvas>\r\n\r\n    <div class=\"preview-container\">\r\n      <img id=\"preview\" style=\"display:none;\" alt=\"Captured Meme\">\r\n      <div id=\"memeEditorBlurb\" style=\"display: none; text-align: center; margin: 20px 0; padding: 10px; background-color: #f9f9f9; border-radius: 8px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\">\r\n        <h2>\ud83c\udfa8 Meme Editor Guide<\/h2>\r\n        <p>Customize your captured meme with top and bottom text, change colors, and add a disclaimer if you like! When you're done, hit <strong>Save Meme<\/strong> to download it and prepare for upload.<\/p>\r\n      <\/div>\r\n\r\n      <div id=\"sticky-footer\" class=\"sticky-footer\" style=\"display: none;\">\r\n        <hr class=\"divider\">\r\n        <h2 class=\"editor-label\">Meme Editor<\/h2>\r\n        <div id=\"button-container\" class=\"button-container\">\r\n          <div class=\"dropdown-wrapper\">\r\n            <div class=\"controls-container\">\r\n              <label for=\"topText\">\ud83d\udcdd Top Text:<\/label>\r\n              <select id=\"topText\" onchange=\"updateMemeText()\"><\/select>\r\n            <\/div>\r\n            <div class=\"controls-container\">\r\n              <label for=\"bottomText\">\ud83d\udcdd Bottom Text:<\/label>\r\n              <select id=\"bottomText\" onchange=\"updateMemeText()\"><\/select>\r\n            <\/div>\r\n          <\/div>\r\n          <div class=\"controls-row-web\">\r\n            <div class=\"controls-container\">\r\n              <label for=\"textColor\">\ud83c\udfa8 Text Color:<\/label>\r\n              <div id=\"colorDisplay\" class=\"color-display\" onclick=\"document.getElementById('textColor').click()\"><\/div>\r\n              <input type=\"color\" id=\"textColor\" value=\"#ffffff\" style=\"display: none;\" oninput=\"updateColor(); updateMemeText();\">\r\n            <\/div>\r\n            <div class=\"controls-container\">\r\n              <label for=\"includeDisclaimer\">\ud83d\udcdc Include Disclaimer:<\/label>\r\n              <input type=\"checkbox\" id=\"includeDisclaimer\" checked onchange=\"updateMemeText()\">\r\n            <\/div>\r\n          <\/div>\r\n          <div class=\"button-row\">\r\n            <button class=\"save-btn\" onclick=\"saveMeme()\">\u2705 Save Meme<\/button>\r\n            <button class=\"retry-btn\" onclick=\"restartDetection()\">\ud83d\udd04 Retry<\/button>\r\n          <\/div>\r\n        <\/div>\r\n      <\/div>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<script>\r\n  let savedImageHeight = 0;\r\n  let savedBorderThickness = 10;\r\n  let savedImage = null;\r\n  let savedVideoWidth = 0;\r\n  let pageConfig = null;\r\n  let disclaimerMessage = [];\r\n  let fileNamePrefix = \"meme_\"; \/\/ Default fallback prefix\r\n\r\n  async function loadPageConfig(configFile) {\r\n\tconsole.log(`Config File Path: ${configFile}`);\r\n    try {\r\n      const response = await fetch(configFile);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load config: ${response.status} - ${response.statusText}`);\r\n      }\r\n      pageConfig = await response.json();\r\n      console.log(\"Config loaded successfully:\", pageConfig);\r\n      fileNamePrefix = pageConfig.fileNamePrefix || fileNamePrefix; \/\/ Use prefix from JSON\r\n      populateDropdowns();\r\n      populateDisclaimerMessages();\r\n\t\tpopulateSection(\"accomplishments-list\", \"accomplishments\");\r\n\t\tpopulateSection(\"title-list\", \"titleList\");\r\n\t\tpopulateSection(\"intro-list\", \"introList\");\r\n\t\tpopulateSection(\"meme-instructions-list\", \"memeInstructionsList\");\r\n    } catch (error) {\r\n      console.error(\"Error loading page config:\", error);\r\n      displayErrorMessage(\"Failed to load configuration. Please try refreshing the page or contact support.\");\r\n    }\r\n  }\r\n\twindow.onload = () => {\r\n\t  const path = window.location.pathname.toLowerCase();\r\n\t  const pageTitle = document.title.toLowerCase();\r\n\r\n\t  console.log(`Current URL Path: ${path}`);\r\n\t  console.log(`Current Page Title: ${pageTitle}`);\r\n\r\n\t  if (path.includes(\"trump\")) {\r\n\t\tconsole.log(\"Detected: Trump page from path.\");\r\n\t\tif (pageTitle.includes(\"not!\")) {\r\n\t\t  console.log(\"Detected from title: 'Not' version for Trump. Loading satirical config.\");\r\n\t\t  loadPageConfig(\"https:\/\/elonandtrumpnumberone.com\/wp-content\/uploads\/2025\/02\/trumpConfigNot-2.json\");\r\n\t\t} else {\r\n\t\t  console.log(\"Detected from title: Team Trump supporter version. Loading team config.\");\r\n\t\t  loadPageConfig(\"https:\/\/elonandtrumpnumberone.com\/wp-content\/uploads\/2025\/02\/trumpConfigTeam-2.json\");\r\n\t\t}\r\n\t  } else if (path.includes(\"musk\") || path.includes(\"elon\")) {\r\n\t\tconsole.log(\"Detected: Musk page from path.\");\r\n\t\tif (pageTitle.includes(\"not!\")) {\r\n\t\t  console.log(\"Detected from title: 'Not' version for Musk. Loading satirical config.\");\r\n\t\t  loadPageConfig(\"https:\/\/elonandtrumpnumberone.com\/wp-content\/uploads\/2025\/02\/muskConfigNot-2.json\");\r\n\t\t} else {\r\n\t\t  console.log(\"Detected from title: Team Musk supporter version. Loading team config.\");\r\n\t\t  loadPageConfig(\"https:\/\/elonandtrumpnumberone.com\/wp-content\/uploads\/2025\/02\/muskConfigTeam-2.json\");\r\n\t\t}\r\n\t  } else {\r\n\t\tconsole.warn(\"No matching page detected from title or path.\");\r\n\t  }\r\n\t};\r\n\r\n\r\n\r\n\tfunction populateSection(divId, jsonSection) {\r\n\t  try {\r\n\t\tconst sectionData = pageConfig[jsonSection];\r\n\r\n\t\t\/\/ Find or create the container to display the list\r\n\t\tconst container = document.getElementById(divId);\r\n\t\tif (!container) {\r\n\t\t  console.error(`No container found with ID '${divId}'.`);\r\n\t\t  return;\r\n\t\t}\r\n\r\n\t\t\/\/ Clear any existing content\r\n\t\tcontainer.innerHTML = '';\r\n\r\n\t\t\/\/ Loop through section data and add div elements\r\n\t\tsectionData.forEach(item => {\r\n\t\t  const div = document.createElement(\"div\");\r\n\t\t  div.classList.add(`${jsonSection}-item`);\r\n\r\n\t\t  \/\/ Generic handling for all sections, including accomplishments\r\n\t\t  if (jsonSection === \"accomplishments\") {\r\n\t\t\t\/\/ Use HTML formatting directly from JSON and add source link\r\n\t\t\tdiv.innerHTML = `${item.text} <a href=\"${item.source || '#'}\" target=\"_blank\">(source)<\/a>`;\r\n\t\t  } else {\r\n\t\t\t\/\/ Render plain or HTML-formatted content for other sections\r\n\t\t\tdiv.innerHTML = item;\r\n\t\t  }\r\n\r\n\t\t  container.appendChild(div);\r\n\t\t});\r\n\r\n\t\tconsole.log(`${jsonSection} populated successfully.`);\r\n\t  } catch (error) {\r\n\t\tconsole.error(`Error populating ${jsonSection}:`, error);\r\n\t\tdisplayErrorMessage(`Error loading ${jsonSection}. Please try again.`);\r\n\t  }\r\n\t}\r\n\r\n\t\r\nfunction populateAccomplishments() {\r\n  try {\r\n    const accomplishments = pageConfig.accomplishments;\r\n\r\n    \/\/ Find or create the container to display the list\r\n    const container = document.getElementById(\"accomplishments-list\");\r\n    if (!container) {\r\n      console.error(\"No container found with ID 'accomplishments-list'.\");\r\n      return;\r\n    }\r\n\r\n    \/\/ Clear any existing content\r\n    container.innerHTML = '';\r\n\r\n    \/\/ Loop through accomplishments and add div elements\r\n    accomplishments.forEach(item => {\r\n      const div = document.createElement(\"div\");\r\n      div.classList.add(\"accomplishment-item\");\r\n\r\n      const text = item.text;\r\n\r\n      \/\/ Find the end of the first sentence based on '. ' occurrence\r\n      const sentenceEnd = text.indexOf('.  ') + 1; \/\/ Include the period\r\n\r\n      let formattedText;\r\n      if (sentenceEnd > 0) {\r\n        const firstSentence = text.substring(0, sentenceEnd + 1); \/\/ Include space after the period\r\n        const restOfText = text.substring(sentenceEnd + 1);\r\n        formattedText = `<strong>${firstSentence}<\/strong>${restOfText}`;\r\n      } else {\r\n        \/\/ If no '. ' found, bold the entire text\r\n        formattedText = `<strong>${text}<\/strong>`;\r\n      }\r\n\r\n      \/\/ Insert the formatted text with the source link\r\n      div.innerHTML = `${formattedText} <a href=\"${item.source || '#'}\" target=\"_blank\">(source)<\/a>`;\r\n      container.appendChild(div);\r\n    });\r\n\r\n    console.log(\"Accomplishments populated successfully.\");\r\n  } catch (error) {\r\n    console.error(\"Error populating accomplishments:\", error);\r\n    displayErrorMessage(\"Error loading accomplishments. Please try again.\");\r\n  }\r\n}\r\n\r\n  function populateDropdowns() {\r\n    try {\r\n      const topTextSelect = document.getElementById(\"topText\");\r\n      const bottomTextSelect = document.getElementById(\"bottomText\");\r\n      topTextSelect.innerHTML = '';\r\n      bottomTextSelect.innerHTML = '';\r\n\r\n      pageConfig.topTexts.forEach(text => {\r\n        const option = document.createElement(\"option\");\r\n        option.text = text;\r\n        topTextSelect.add(option);\r\n      });\r\n\r\n      pageConfig.bottomTexts.forEach(text => {\r\n        const option = document.createElement(\"option\");\r\n        option.text = text;\r\n        bottomTextSelect.add(option);\r\n      });\r\n      console.log(\"Dropdowns populated successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error populating dropdowns:\", error);\r\n      displayErrorMessage(\"Error loading meme options. Please try again.\");\r\n    }\r\n  }\r\n\r\n  function populateDisclaimerMessages() {\r\n    try {\r\n      if (pageConfig.disclaimerMessages) {\r\n        disclaimerMessage = [...pageConfig.disclaimerMessages];\r\n        console.log(\"Disclaimer messages loaded successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading disclaimer messages:\", error);\r\n      displayErrorMessage(\"Error loading disclaimers. Please try again.\");\r\n    }\r\n  }\r\n\r\n  function displayErrorMessage(message) {\r\n    const resultElement = document.getElementById('result');\r\n    resultElement.textContent = message;\r\n    resultElement.style.color = 'red';\r\n  }\r\n\r\n    function updateColor() {\r\n      const colorPicker = document.getElementById(\"textColor\");\r\n      const colorDisplay = document.getElementById(\"colorDisplay\");\r\n      colorDisplay.style.backgroundColor = colorPicker.value;\r\n\t\t}\r\n\r\n\tfunction handleStartCamera() {\r\n\t  document.getElementById(\"startCameraBtn\").style.display = \"none\"; \/\/ Hide the button\r\n\t  startCamera(); \/\/ Start the camera and detection\r\n\r\n\t  \/\/ Scroll to meme-create-section\r\n\t  setTimeout(() => {\r\n\t\tconst memeCreateSection = document.getElementById(\"meme-create-section\");\r\n\t\tif (memeCreateSection) {\r\n\t\t  console.log(\"Element #meme-create-section was found.\");\r\n\t\t  memeCreateSection.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n\t\t} else {\r\n\t\t  console.error(\"Element #meme-create-section not found.\");\r\n\t\t}\r\n\t  }, 500); \/\/ Delay to ensure the camera starts before scrolling\r\n\t}\r\n\r\n\tfunction captureImage() {\r\n\t  const video = document.getElementById(\"webcam\");\r\n\t  const memeCanvas = document.getElementById(\"memeCanvas\");\r\n\t  const ctx = memeCanvas.getContext(\"2d\");\r\n\t  const borderThickness = 10;\r\n\r\n\t  \/\/ \u2705 Set canvas size based on the device's camera resolution\r\n\t  memeCanvas.width = video.videoWidth + 2 * borderThickness;\r\n\t  memeCanvas.height = video.videoHeight + 2 * borderThickness;\r\n\r\n\t  savedImageHeight = video.videoHeight;\r\n\t  savedBorderThickness = borderThickness;\r\n\t  savedVideoWidth = video.videoWidth;\r\n\r\n\t  \/\/ \u2705 Draw black border and white background\r\n\t  ctx.fillStyle = \"black\";\r\n\t  ctx.fillRect(0, 0, memeCanvas.width, memeCanvas.height);\r\n\t  ctx.fillStyle = \"white\";\r\n\t  ctx.fillRect(borderThickness, borderThickness, memeCanvas.width - 2 * borderThickness, memeCanvas.height - 2 * borderThickness);\r\n\r\n\t  \/\/ \u2705 Draw video frame at its natural resolution\r\n\t  ctx.drawImage(video, borderThickness, borderThickness, video.videoWidth, video.videoHeight);\r\n\r\n\t  \/\/ \u2705 Stop the video stream after capturing\r\n\t  videoStream.getTracks().forEach(track => track.stop());\r\n\t  video.style.display = \"none\";\r\n\r\n\t  \/\/ \u2705 Convert captured image to data URL\r\n\t  savedImage = new Image();\r\n\t  savedImage.onload = function () {\r\n\t\tupdateMemeText(); \/\/ Call function to add text\r\n\t  };\r\n\t  savedImage.src = memeCanvas.toDataURL(\"image\/png\");\r\n\r\n\t  \/\/ \u2705 Update result message\r\n\t  const resultMessage = document.getElementById(\"result\");\r\n\t  resultMessage.innerHTML = \"\ud83d\udcf8 <strong>Picture Captured!<\/strong><br>Meme Ready!<br>Customize & Save Below.\";\r\n\t  resultMessage.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n\r\n\t  \/\/ \u2705 Show the meme editor\r\n\t  document.getElementById(\"sticky-footer\").style.display = \"block\";\r\n\t  document.getElementById(\"preview\").style.display = \"block\";\r\n\t  document.getElementById(\"memeEditorBlurb\").style.display = \"block\";\r\n\t}\r\n\r\n    function updateMemeText() {\r\n      const memeCanvas = document.getElementById(\"memeCanvas\");\r\n      const ctx = memeCanvas.getContext(\"2d\");\r\n      const previewImage = document.getElementById(\"preview\");\r\n      const textColor = document.getElementById(\"textColor\").value;\r\n      const topText = document.getElementById(\"topText\").value;\r\n      const bottomText = document.getElementById(\"bottomText\").value;\r\n      const includeDisclaimer = document.getElementById(\"includeDisclaimer\").checked;\r\n\r\n      if (!savedImage) return;\r\n\r\n      const disclaimerLineHeight = 24;\r\n      const fontSize = 50;\r\n      const lineHeight = fontSize * 1.2;\r\n\r\n      function wrapText(ctx, text, maxWidth) {\r\n        const words = text.split(\" \");\r\n        let lines = [];\r\n        let currentLine = \"\";\r\n        words.forEach(word => {\r\n          let testLine = currentLine ? currentLine + \" \" + word : word;\r\n          if (ctx.measureText(testLine).width > maxWidth && currentLine !== \"\") {\r\n            lines.push(currentLine);\r\n            currentLine = word;\r\n          } else {\r\n            currentLine = testLine;\r\n          }\r\n        });\r\n        lines.push(currentLine);\r\n        return lines;\r\n      }\r\n\r\n      memeCanvas.width = savedVideoWidth + 2 * savedBorderThickness;\r\n      const effectiveMaxWidth = memeCanvas.width - 40;\r\n\r\n      let totalDisclaimerLines = 0;\r\n      if (includeDisclaimer) {\r\n        disclaimerMessage.forEach(sentence => {\r\n          totalDisclaimerLines += wrapText(ctx, sentence, effectiveMaxWidth).length;\r\n        });\r\n      }\r\n      let disclaimerHeight = includeDisclaimer ? totalDisclaimerLines * disclaimerLineHeight + 20 : 0;\r\n      if (includeDisclaimer && window.innerWidth <= 768) {\r\n        disclaimerHeight = Math.max(disclaimerHeight, 186);\r\n      }\r\n\r\n      memeCanvas.height = savedImageHeight + 2 * savedBorderThickness + disclaimerHeight;\r\n\r\n      ctx.fillStyle = \"black\";\r\n      ctx.fillRect(0, 0, memeCanvas.width, memeCanvas.height);\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fillRect(savedBorderThickness, savedBorderThickness, memeCanvas.width - 2 * savedBorderThickness, memeCanvas.height - 2 * savedBorderThickness);\r\n      ctx.drawImage(\r\n        savedImage,\r\n        savedBorderThickness, savedBorderThickness,\r\n        savedVideoWidth, savedImageHeight,\r\n        savedBorderThickness, savedBorderThickness,\r\n        savedVideoWidth, savedImageHeight\r\n      );\r\n\r\n      ctx.font = `bold ${fontSize}px Impact`;\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillStyle = textColor;\r\n      ctx.strokeStyle = \"black\";\r\n      ctx.lineWidth = 8;\r\n      ctx.shadowColor = \"rgba(0, 0, 0, 0.7)\";\r\n      ctx.shadowBlur = 6;\r\n      ctx.shadowOffsetX = 3;\r\n      ctx.shadowOffsetY = 3;\r\n\r\n      function drawWrappedText(text, yPosition) {\r\n        if (ctx.measureText(text).width <= (memeCanvas.width - 40)) {\r\n          ctx.strokeText(text, memeCanvas.width \/ 2, yPosition);\r\n          ctx.fillText(text, memeCanvas.width \/ 2, yPosition);\r\n        } else {\r\n          const middleIndex = Math.floor(text.length \/ 2);\r\n          let splitIndex = text.lastIndexOf(' ', middleIndex);\r\n          if (splitIndex === -1) splitIndex = text.indexOf(' ', middleIndex);\r\n          const firstLine = text.substring(0, splitIndex);\r\n          const secondLine = text.substring(splitIndex + 1);\r\n          ctx.strokeText(firstLine, memeCanvas.width \/ 2, yPosition);\r\n          ctx.fillText(firstLine, memeCanvas.width \/ 2, yPosition);\r\n          ctx.strokeText(secondLine, memeCanvas.width \/ 2, yPosition + lineHeight);\r\n          ctx.fillText(secondLine, memeCanvas.width \/ 2, yPosition + lineHeight);\r\n        }\r\n      }\r\n\r\n      drawWrappedText(topText, savedBorderThickness + 60);\r\n      const wrappedBottomText = wrapText(ctx, bottomText, effectiveMaxWidth);\r\n      const bottomY = savedBorderThickness + savedImageHeight - 20 - (wrappedBottomText.length - 1) * lineHeight;\r\n      drawWrappedText(bottomText, bottomY);\r\n\r\n      ctx.shadowColor = \"transparent\";\r\n      ctx.shadowBlur = 0;\r\n      if (includeDisclaimer) {\r\n        ctx.fillStyle = \"black\";\r\n        ctx.font = \"bold 18px Arial\";\r\n        let disclaimerY = savedBorderThickness + savedImageHeight + 35;\r\n        disclaimerMessage.forEach(sentence => {\r\n          wrapText(ctx, sentence, effectiveMaxWidth).forEach(line => {\r\n            ctx.fillText(line, memeCanvas.width \/ 2, disclaimerY);\r\n            disclaimerY += disclaimerLineHeight;\r\n          });\r\n        });\r\n      }\r\n      previewImage.src = memeCanvas.toDataURL(\"image\/png\");\r\n    }\r\n\r\n  function saveMeme() {\r\n    const memeDataUrl = document.getElementById(\"preview\").src;\r\n    const fileName = `${fileNamePrefix}${Date.now()}.png`;\r\n\r\n    \/\/ \u2705 Convert Data URL to Blob\r\n    fetch(memeDataUrl)\r\n      .then(res => res.blob())\r\n      .then(blob => {\r\n        const file = new File([blob], fileName, { type: \"image\/png\" });\r\n\r\n        \/\/ \u2705 Automatically trigger file selection in upload form\r\n        prepopulateMemeUpload(file);\r\n\r\n        \/\/ \u2705 Trigger download for user (optional)\r\n        const link = document.createElement(\"a\");\r\n        link.href = memeDataUrl;\r\n        link.download = fileName;\r\n        link.click();\r\n\r\n        \/\/ \u2705 Smooth scroll to the meme upload section\r\n        scrollToUploadSection();\r\n      });\r\n  }\r\n\r\nfunction prepopulateMemeUpload(file) {\r\n  const dataTransfer = new DataTransfer();\r\n  dataTransfer.items.add(file);\r\n\r\n  const fileInput = document.getElementById(\"memeFile\");\r\n  fileInput.files = dataTransfer.files;\r\n\r\n  previewImage();\r\n}\r\n\r\nfunction scrollToUploadSection() {\r\n  const uploadSection = document.getElementById(\"meme-upload-section\");\r\n\r\n  if (uploadSection) {\r\n    uploadSection.style.display = \"block\"; \/\/ \u2705 Make it visible\r\n    uploadSection.scrollIntoView({ behavior: \"smooth\", block: \"start\" }); \/\/ \u2705 Smooth scroll to it\r\n  }\r\n}\r\n\r\n    function restartDetection() {\r\ndocument.getElementById(\"result\").innerText = \"Awaiting gesture...\";\r\n      document.getElementById(\"result\").style.color = \"red\";\r\n      \/\/ Hide the sticky footer and preview image on retry\r\n      document.getElementById(\"sticky-footer\").style.display = \"none\";\r\n      document.getElementById(\"preview\").style.display = \"none\";\r\n      detectionStopped = false;\r\n      isMiddleFingerDetected = false;\r\n      detectionStartTime = null;\r\n      handleStartCamera();\r\n    }\r\n\r\n    \/\/handleStartCamera();\r\n  <\/script>\r\n<\/body>","code_type":"html","location":"","auto_insert":0,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-23 14:28:42","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":597,"title":"html-upload-form","code":"<!-- \u2705 Custom Meme Upload Form -->\r\n<form id=\"memeUploadForm\">\r\n  <div class=\"form-group\">\r\n    <label for=\"memeFile\">\ud83d\udcc1 Select Your Meme:<\/label>\r\n    <input type=\"file\" id=\"memeFile\" accept=\"image\/png, image\/jpeg, image\/gif\" required onchange=\"previewImage()\">\r\n  <\/div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"postContent\">\ud83d\udcdd Why are you posting this meme?:<\/label>\r\n    <textarea id=\"postContent\" rows=\"3\" placeholder=\"Write something about your meme...\" required><\/textarea>\r\n  <\/div>\r\n\r\n  <!-- \u2705 Hidden Nonce Field -->\r\n  <input type=\"hidden\" id=\"memeUploadNonce\" value=\"\">\r\n\r\n  <!-- Added an id for clarity -->\r\n  <button type=\"button\" id=\"uploadMemeButton\" class=\"save-btn\" onclick=\"uploadMeme()\">\u2705 Upload Meme<\/button>\r\n\r\n  <!-- \u2705 Upload Status -->\r\n  <p id=\"uploadStatus\"><\/p>\r\n\r\n  <!-- \u2705 Image Thumbnail Preview -->\r\n  <div id=\"imagePreviewContainer\" style=\"display: none; margin-top: 10px;\">\r\n    <img id=\"imagePreview\" src=\"\" style=\"width: 150px; height: auto; border: 2px solid #ddd; padding: 5px; border-radius: 5px;\">\r\n  <\/div>\r\n<\/form>\r\n\r\n<style>\r\n  \/* \u2705 Ensure fields stack in vertical order *\/\r\n  .form-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 10px;\r\n  }\r\n  textarea {\r\n    resize: vertical;\r\n  }\r\n  \/* \u2705 Style for disabled button *\/\r\n  .save-btn:disabled {\r\n    background-color: #ccc;\r\n    color: #666;\r\n    cursor: not-allowed;\r\n    opacity: 0.6;\r\n  }\r\n<\/style>\r\n\r\n<script>\r\n\/\/ \u2705 Get a fresh Nonce when the page loads\r\nfetch('\/wp-admin\/admin-ajax.php?action=get_meme_nonce')\r\n  .then(response => response.json())\r\n  .then(data => {\r\n    if (data.success) {\r\n      document.getElementById(\"memeUploadNonce\").value = data.data.nonce;\r\n    }\r\n  })\r\n  .catch(error => console.error(\"Nonce Error:\", error));\r\n\r\n\/**\r\n * Detects the appropriate gesture based on the document title.\r\n * If the title contains \"NOT\", it uses middle finger detection,\r\n * otherwise it uses thumbs up detection.\r\n * @param {string} fileURL - The object URL for the file.\r\n * @returns {Promise<boolean>} - Resolves to true if the gesture is detected.\r\n *\/\r\nfunction detectGestureFromFile(fileURL) {\r\n  if (document.title.indexOf(\"NOT\") > -1) {\r\n    console.log(\"Using Middle Finger detection based on document title.\");\r\n    return detectMiddleFingerFromFile(fileURL);\r\n  } else {\r\n    console.log(\"Using Thumbs Up detection based on document title.\");\r\n    return detectThumbsUpFromFile(fileURL);\r\n  }\r\n}\r\n\r\n\/**\r\n * Helper function to attempt gesture detection up to 2 times.\r\n * @param {File} file - The file selected by the user.\r\n * @param {number} attempt - The current attempt number.\r\n * @returns {Promise<boolean>} - Resolves to true if detection succeeds.\r\n *\/\r\nfunction attemptDetection(file, attempt) {\r\n  \/\/ Create a fresh Blob each time for a new object URL.\r\n  const fileBlob = new Blob([file], { type: file.type });\r\n  const fileURL = URL.createObjectURL(fileBlob);\r\n  console.log(`Attempt ${attempt}: Generated file URL:`, fileURL);\r\n\r\n  return detectGestureFromFile(fileURL)\r\n    .then((isDetected) => {\r\n      console.log(`Attempt ${attempt}: Detection result:`, isDetected);\r\n      URL.revokeObjectURL(fileURL);\r\n      if (isDetected) {\r\n        return true;\r\n      } else if (attempt < 2) {\r\n        console.log(`Detection failed on attempt ${attempt}. Retrying...`);\r\n        return attemptDetection(file, attempt + 1);\r\n      } else {\r\n        console.log(\"Detection failed on final attempt.\");\r\n        return false;\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(`Attempt ${attempt}: Error during detection:`, error);\r\n      URL.revokeObjectURL(fileURL);\r\n      if (attempt < 2) {\r\n        console.log(`Error on attempt ${attempt}. Retrying detection...`);\r\n        return attemptDetection(file, attempt + 1);\r\n      } else {\r\n        throw error;\r\n      }\r\n    });\r\n}\r\n\r\nfunction uploadMeme() {\r\n  const uploadButton = document.getElementById(\"uploadMemeButton\");\r\n  uploadButton.disabled = true;\r\n\r\n  const fileInput = document.getElementById(\"memeFile\");\r\n  const file = fileInput.files[0];\r\n  console.log(\"Selected file:\", file);\r\n\r\n  const postContent = document.getElementById(\"postContent\").value.trim();\r\n  const nonce = document.getElementById(\"memeUploadNonce\").value;\r\n\r\n  if (!file) {\r\n    console.error(\"No file selected.\");\r\n    document.getElementById(\"uploadStatus\").innerText = \"\u274c Please select a file.\";\r\n    uploadButton.disabled = false;\r\n    return;\r\n  }\r\n  if (!postContent) {\r\n    console.error(\"No post content provided.\");\r\n    document.getElementById(\"uploadStatus\").innerText = \"\u274c Please enter some text for your post.\";\r\n    uploadButton.disabled = false;\r\n    return;\r\n  }\r\n\r\n  \/\/ Use the helper function to attempt detection (up to 2 times).\r\n  attemptDetection(file, 1)\r\n    .then((isGestureDetected) => {\r\n      console.log(\"Final detection result:\", isGestureDetected);\r\n      if (!isGestureDetected) {\r\n        console.error(\"Gesture not detected after 2 attempts.\");\r\n        \/\/ The error message now reflects the type of gesture expected.\r\n        let gestureType = document.title.indexOf(\"NOT\") > -1 ? \"middle finger\" : \"thumbs up\";\r\n        document.getElementById(\"uploadStatus\").innerText = `\u274c Upload rejected: No ${gestureType} detected.`;\r\n        uploadButton.disabled = false;\r\n        return;\r\n      }\r\n\r\n      console.log(\"Gesture detected. Proceeding to upload...\");\r\n      performUpload(file, postContent, nonce, 1, uploadButton);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during gesture detection process:\", error);\r\n      document.getElementById(\"uploadStatus\").innerText = \"\u274c Error during gesture detection.\";\r\n      uploadButton.disabled = false;\r\n    });\r\n}\r\n\r\n\/\/ Helper function to perform the AJAX upload with a single retry.\r\nfunction performUpload(file, postContent, nonce, attempt, uploadButton) {\r\n  console.log(\"Uploading file. Attempt:\", attempt, \"File:\", file);\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n  formData.append(\"post_content\", postContent);\r\n  formData.append(\"action\", \"upload_meme\");\r\n  formData.append(\"nonce\", nonce);\r\n\r\n  fetch(\"\/wp-admin\/admin-ajax.php\", {\r\n    method: \"POST\",\r\n    body: formData,\r\n  })\r\n    .then(response => {\r\n      console.log(\"Upload response received on attempt\", attempt, \":\", response);\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      console.log(\"Upload JSON data:\", data);\r\n      if (data.success) {\r\n        document.getElementById(\"uploadStatus\").innerHTML = `\u2705 Meme uploaded successfully! <br> <a href=\"${data.data.url}\" target=\"_blank\">View Meme<\/a>`;\r\n        \/\/ Clear the file input upon successful upload.\r\n        document.getElementById(\"memeFile\").value = \"\";\r\n      } else {\r\n        if (attempt < 2) {\r\n          console.warn(\"Upload failed on attempt\", attempt, \"retrying silently.\");\r\n          performUpload(file, postContent, nonce, attempt + 1, uploadButton);\r\n        } else {\r\n          console.error(\"Final upload attempt failed:\", data.data.message);\r\n          document.getElementById(\"uploadStatus\").innerText = `\u274c Upload failed: ${data.data.message || \"Unknown error\"}`;\r\n          uploadButton.disabled = false;\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Upload error on attempt\", attempt, \":\", error);\r\n      if (attempt < 2) {\r\n        performUpload(file, postContent, nonce, attempt + 1, uploadButton);\r\n      } else {\r\n        document.getElementById(\"uploadStatus\").innerText = `\u274c Error: ${error.message}`;\r\n        uploadButton.disabled = false;\r\n      }\r\n    });\r\n}\r\n\r\n\/\/ \u2705 Show the image preview as a small thumbnail.\r\nfunction previewImage() {\r\n  const fileInput = document.getElementById(\"memeFile\");\r\n  const previewContainer = document.getElementById(\"imagePreviewContainer\");\r\n  const previewImage = document.getElementById(\"imagePreview\");\r\n\r\n  if (!fileInput.files || fileInput.files.length === 0) {\r\n    previewContainer.style.display = \"none\";\r\n    return;\r\n  }\r\n\r\n  const file = fileInput.files[0];\r\n\r\n  if (!file.type.startsWith(\"image\/\")) {\r\n    document.getElementById(\"uploadStatus\").innerText = \"\u274c Please select a valid image file.\";\r\n    previewContainer.style.display = \"none\";\r\n    return;\r\n  }\r\n\r\n  const reader = new FileReader();\r\n  reader.onload = function (e) {\r\n    previewImage.src = e.target.result;\r\n    previewContainer.style.display = \"block\";\r\n  };\r\n\r\n  reader.readAsDataURL(file);\r\n}\r\n\r\n\/\/ \u2705 Re-enable the upload button (and clear uploadStatus) if the user changes the file or text.\r\ndocument.getElementById(\"memeFile\").addEventListener(\"change\", function() {\r\n  const uploadButton = document.getElementById(\"uploadMemeButton\");\r\n  uploadButton.disabled = false;\r\n  document.getElementById(\"uploadStatus\").innerText = \"\";\r\n});\r\ndocument.getElementById(\"postContent\").addEventListener(\"input\", function() {\r\n  const uploadButton = document.getElementById(\"uploadMemeButton\");\r\n  uploadButton.disabled = false;\r\n  document.getElementById(\"uploadStatus\").innerText = \"\";\r\n});\r\n<\/script>\r\n","code_type":"html","location":"","auto_insert":0,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-23 19:02:06","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":738,"title":"meme-gallery","code":"\/\/ Meme gallery shortcode with masonry layout using actual photo sizes and fallback to post content images\r\n?>\r\n\r\n<div id=\"meme-gallery\" class=\"masonry-layout\">\r\n    <script>console.log(\"Meme gallery shortcode triggered.\");<\/script>\r\n    <?php\r\n    $args = array(\r\n        'post_type' => 'post', \/\/ Assuming memes are uploaded as posts\r\n        'posts_per_page' => -1\r\n    );\r\n    $meme_query = new WP_Query($args);\r\n\r\n    if ($meme_query->have_posts()) :\r\n        echo \"<script>console.log('Meme posts found: \" . $meme_query->found_posts . \"');<\/script>\";\r\n\r\n        while ($meme_query->have_posts()) : $meme_query->the_post();\r\n            $image_url = get_the_post_thumbnail_url(get_the_ID(), 'full'); \/\/ Use full-size images\r\n\r\n            \/\/ Fallback: Extract first image from post content\r\n            if (!$image_url) {\r\n                $content = get_the_content();\r\n                preg_match('\/<img.+src=[\\'\"]([^\\'\"]+)[\\'\"].*>\/i', $content, $matches);\r\n                if (isset($matches[1])) {\r\n                    $image_url = $matches[1];\r\n                    echo \"<script>console.log('Fallback image found for post ID: \" . get_the_ID() . \"');<\/script>\";\r\n                }\r\n            }\r\n\r\n            if ($image_url) :\r\n                echo \"<script>console.log('Meme image found for post ID: \" . get_the_ID() . \"');<\/script>\";\r\n    ?>\r\n                <div class=\"meme-item\">\r\n                    <img src=\"<?php echo esc_url($image_url); ?>\" alt=\"<?php the_title(); ?>\">\r\n                    <p><?php the_title(); ?><\/p>\r\n                <\/div>\r\n    <?php\r\n            else :\r\n                echo \"<script>console.log('No image found for post ID: \" . get_the_ID() . \"');<\/script>\";\r\n            endif;\r\n        endwhile;\r\n\r\n        wp_reset_postdata();\r\n    else :\r\n        echo \"<script>console.log('No meme posts found.');<\/script>\";\r\n        echo \"<p>No memes found.<\/p>\";\r\n    endif;\r\n    ?>\r\n<\/div>\r\n\r\n<?php\r\n","code_type":"php","location":"","auto_insert":0,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-23 19:00:16","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":999,"title":"extend-wpcode","code":"\/\/<?php\r\n\/\/\r\nfunction my_wpcode_extension_enqueue($hook) {\r\n    \/\/ Only load on WPCode snippet editor pages\r\n    if (strpos($hook, 'wpcode') === false) {\r\n        return;\r\n    }\r\n\r\n    wp_enqueue_script('jquery');\r\n\r\n    $custom_js = <<<JS\r\njQuery(document).ready(function($) {\r\n    \/\/ Function to determine the correct file extension based on snippet type\r\n    function getFileExtension(snippetType) {\r\n        switch (snippetType.toLowerCase()) {\r\n            case 'php':\r\n            case 'php_code':\r\n                return 'php';\r\n            case 'js':\r\n            case 'javascript':\r\n            case 'javascript_code':\r\n                return 'js';\r\n            case 'css':\r\n            case 'css_code':\r\n                return 'css';\r\n            case 'html':\r\n            case 'html_code':\r\n                return 'html';\r\n            default:\r\n                return 'txt'; \/\/ Default fallback\r\n        }\r\n    }\r\n\r\n    \/\/ Always prompt user for file save location with correct extension\r\n    async function manualFileSave(fileName, fileContent) {\r\n        try {\r\n            const options = {\r\n                suggestedName: fileName,\r\n                types: [{\r\n                    description: 'Code Files',\r\n                    accept: { 'text\/plain': ['.txt', '.js', '.php', '.html', '.css'] }\r\n                }]\r\n            };\r\n            const handle = await window.showSaveFilePicker(options);\r\n            const writable = await handle.createWritable();\r\n\r\n            await writable.write(fileContent);\r\n            await writable.close();\r\n\r\n            wpcodeShowMessage(`File successfully saved as \\${fileName}`);\r\n        } catch (error) {\r\n            console.error('Failed to manually save file:', error);\r\n            wpcodeShowMessage('Manual save failed or was canceled.');\r\n        }\r\n    }\r\n\r\n    \/\/ Poll for the WPCode editor container until it appears\r\n    var checkExist = setInterval(function() {\r\n        var editorContainer = $('.wpcode-code-textarea');\r\n        if (editorContainer.length) {\r\n            clearInterval(checkExist);\r\n\r\n            \/\/ Add custom buttons for clipboard and file together without Dummy button\r\n            var customButtons = '<div id=\"my-custom-buttons\" style=\"margin-bottom: 10px;\">' +\r\n                '<div style=\"display: flex; gap: 10px; align-items: center;\">' +\r\n                    '<button id=\"import-clipboard\" class=\"button\">Import from Clipboard<\/button>' +\r\n                    '<button id=\"export-clipboard\" class=\"button\">Copy to Clipboard<\/button>' +\r\n                    '<button id=\"export-file-picker\" class=\"button\">Export to File<\/button>' +\r\n                    '<button id=\"import-file\" class=\"button\">Import from File<\/button>' +\r\n                '<\/div>' +\r\n                '<\/div>';\r\n            editorContainer.prepend(customButtons);\r\n\r\n            \/\/ Prevent auto-save from triggering when clicking custom buttons\r\n            wpcodePreventAutoSave('#export-clipboard');\r\n            wpcodePreventAutoSave('#import-clipboard');\r\n            wpcodePreventAutoSave('#export-file-picker');\r\n            wpcodePreventAutoSave('#import-file');\r\n\r\n            \/\/ Import from Clipboard\r\n            $('#import-clipboard').on('click', function() {\r\n                navigator.clipboard.readText().then(function(clipboardText) {\r\n                    if (clipboardText.trim() === \"\") {\r\n                        wpcodeShowMessage('Clipboard is empty. Nothing to import.');\r\n                        return;\r\n                    }\r\n                    insertCodeIntoEditor(clipboardText);\r\n                }).catch(function(err) {\r\n                    console.error('Failed to read clipboard: ', err);\r\n                    var manualPaste = prompt('Clipboard access denied by browser. Please paste your code manually:');\r\n                    if (manualPaste && manualPaste.trim() !== \"\") {\r\n                        insertCodeIntoEditor(manualPaste);\r\n                    } else {\r\n                        wpcodeShowMessage('No code imported.');\r\n                    }\r\n                });\r\n            });\r\n\r\n            \/\/ Export to Clipboard\r\n            $('#export-clipboard').on('click', function() {\r\n                var code = $('#wpcode_snippet_code').val();\r\n                navigator.clipboard.writeText(code).then(function() {\r\n                    wpcodeShowMessage('Code copied to clipboard!');\r\n                }).catch(function(err) {\r\n                    wpcodeShowMessage('Error copying code: ' + err);\r\n                });\r\n            });\r\n\r\n            \/\/ Export using File Picker with correct file extension\r\n            $('#export-file-picker').on('click', async function () {\r\n                var code = $('#wpcode_snippet_code').val();\r\n                var snippetName = $('input[name=\"wpcode_snippet_title\"]').val() || 'extend_wpcode';\r\n                var snippetType = $('#wpcode_snippet_type').val() || 'custom_code';\r\n                var extension = getFileExtension(snippetType);\r\n\r\n                var fileName = snippetName + '.' + extension;\r\n\r\n                await manualFileSave(fileName, code);\r\n            });\r\n\r\n            \/\/ Import from File (read file content and insert directly into editor)\r\n            $('#import-file').on('click', function() {\r\n                var input = $('<input type=\"file\" accept=\".txt,.js,.php,.html,.css\" style=\"display: none;\">');\r\n                $('body').append(input);\r\n                input.trigger('click');\r\n                input.on('change', function(event) {\r\n                    var file = event.target.files[0];\r\n                    if (!file) {\r\n                        wpcodeShowMessage('No file selected.');\r\n                        return;\r\n                    }\r\n\r\n                    var reader = new FileReader();\r\n\r\n                    reader.onload = function(e) {\r\n                        var importedCode = e.target.result;\r\n                        insertCodeIntoEditor(importedCode); \/\/ Directly insert the file contents\r\n                    };\r\n\r\n                    reader.onerror = function() {\r\n                        wpcodeShowMessage('Error reading the file.');\r\n                    };\r\n\r\n                    reader.readAsText(file);\r\n                    input.remove();\r\n                });\r\n            });\r\n\r\n            \/\/ Directly insert code into editor\r\n            function insertCodeIntoEditor(code) {\r\n                $('#wpcode_snippet_code').val(code);\r\n                var cmElement = $('#wpcode_snippet_code').next('.CodeMirror')[0];\r\n                if (cmElement && cmElement.CodeMirror) {\r\n                    cmElement.CodeMirror.setValue(code);\r\n                    cmElement.CodeMirror.refresh();\r\n                }\r\n                wpcodeShowMessage('Code successfully imported!');\r\n            }\r\n        }\r\n    }, 500);\r\n});\r\nJS;\r\n\r\n    wp_add_inline_script('jquery', $custom_js);\r\n}\r\nadd_action('admin_enqueue_scripts', 'my_wpcode_extension_enqueue');\r\n","code_type":"php","location":"admin_only","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-24 10:18:08","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1000,"title":"extend-wpcode-search","code":"\/\/<?php\r\n\/\/\r\nfunction my_wpcode_search_extension_enqueue($hook) {\r\n    \/\/ Only load on WPCode snippet editor pages\r\n    if (strpos($hook, 'wpcode') === false) {\r\n        return;\r\n    }\r\n\r\n    wp_enqueue_script('jquery');\r\n\r\n    $custom_js = <<<'JS'\r\njQuery(document).ready(function($) {\r\n    let folderHandle = null; \/\/ Store the folder handle for the session\r\n    let mappingData = {};\r\n\r\n    \/\/ Load saved mapping from localStorage\r\n    function loadMappingFromStorage() {\r\n        const savedMapping = localStorage.getItem('wpcodeMappingData');\r\n        if (savedMapping) {\r\n            mappingData = JSON.parse(savedMapping);\r\n            console.log(\"[WPCode Search]: Mapping data loaded from localStorage.\");\r\n            populateMappingDropdown();\r\n        }\r\n    }\r\n\r\n\r\n    \/\/ Save mapping to localStorage\r\n    function saveMappingToStorage() {\r\n        localStorage.setItem('wpcodeMappingData', JSON.stringify(mappingData));\r\n        console.log(\"[WPCode Mapping]: Mapping data saved to localStorage.\");\r\n    }\r\n\r\n    \/\/ Populate the dropdown with the current mapping data\r\n    function populateMappingDropdown() {\r\n        let $dropdown = $('#mapping-dropdown');\r\n        $dropdown.empty();\r\n        $dropdown.append('<option value=\"\">Select a Code Snippet to load<\/option>');\r\n        $.each(mappingData, function(filename, snippetId) {\r\n            $dropdown.append('<option value=\"'+ snippetId +'\">'+ filename +'<\/option>');\r\n        });\r\n    }\r\n\r\n    \/\/ Function to import mapping file\r\n    async function importMappingFile() {\r\n        try {\r\n            mappingData = {};\r\n            const [fileHandle] = await window.showOpenFilePicker();\r\n            const file = await fileHandle.getFile();\r\n            const content = await file.text();\r\n            const jsonData = JSON.parse(content);\r\n\r\n            jsonData.forEach(snippet => {\r\n                if (snippet.title && snippet.id && snippet.code_type) {\r\n                    let fileExtension = snippet.code_type.toLowerCase();\r\n                    mappingData[`${snippet.title}.${fileExtension}`] = snippet.id;\r\n                }\r\n            });\r\n\r\n            saveMappingToStorage();\r\n            populateMappingDropdown();\r\n            wpcodeShowMessage('Mapping data imported successfully.');\r\n        } catch (error) {\r\n            console.error('[WPCode Mapping]: Error importing file:', error);\r\n            wpcodeShowMessage('Failed to import mapping.');\r\n        }\r\n    }\r\n\r\n    \/\/ Function to display mappings\r\n    function showMappings() {\r\n        if (Object.keys(mappingData).length === 0) {\r\n            wpcodeShowMessage('No mapping data loaded.');\r\n            return;\r\n        }\r\n\r\n        let mappingInfo = 'Current Snippet Mappings:\\n\\n';\r\n        for (let [file, id] of Object.entries(mappingData)) {\r\n            mappingInfo += `${file} -> Snippet ID: ${id}\\n`;\r\n        }\r\n\r\n        alert(mappingInfo);\r\n    }\r\n\r\n    \/\/ Function to select folder using File Picker\r\n    async function selectSearchFolder() {\r\n        try {\r\n            folderHandle = await window.showDirectoryPicker();\r\n            wpcodeShowMessage('Search folder set successfully.');\r\n        } catch (error) {\r\n            console.error('[WPCode Search]: Error selecting folder:', error);\r\n            wpcodeShowMessage('Failed to set search folder.');\r\n        }\r\n    }\r\n\r\n    \/\/ Function to clear search results and hide the container and button\r\n    function clearSearchResults() {\r\n        $('#wpcode-search-results').empty().hide();\r\n        $('#clear-results').hide();\r\n    }\r\n\r\n    \/\/ Function to search snippets in selected folder\r\n    async function searchSnippetsInFolder() {\r\n        if (!folderHandle) {\r\n            try {\r\n                folderHandle = await window.showDirectoryPicker();\r\n                wpcodeShowMessage('Search folder selected successfully.');\r\n            } catch (error) {\r\n                wpcodeShowMessage('Search canceled. No folder selected.');\r\n                return;\r\n            }\r\n        }\r\n\r\n        let searchAllFiles = $('#all-files-checkbox').is(':checked');\r\n        let matchCase = $('#match-case-checkbox').is(':checked');\r\n\r\n        let searchTerm = prompt('Enter search term:');\r\n        if (!searchTerm || searchTerm.trim() === '') {\r\n            wpcodeShowMessage('No search term entered.');\r\n            return;\r\n        }\r\n\r\n        let results = [];\r\n\r\n        for await (const entry of folderHandle.values()) {\r\n            if (entry.kind === 'file') {\r\n                if (!searchAllFiles && !(entry.name in mappingData)) {\r\n                    continue;\r\n                }\r\n\r\n                const file = await entry.getFile();\r\n                const content = await file.text();\r\n                const lines = content.split('\\n');\r\n\r\n                lines.forEach((line, lineIndex) => {\r\n                    const effectiveLine = matchCase ? line : line.toLowerCase();\r\n                    const effectiveSearchTerm = matchCase ? searchTerm : searchTerm.toLowerCase();\r\n                    let columnIndex = effectiveLine.indexOf(effectiveSearchTerm);\r\n                    while (columnIndex !== -1) {\r\n                        let contextSnippet = line.substring(Math.max(0, columnIndex - 30), Math.min(line.length, columnIndex + searchTerm.length + 30));\r\n                        results.push({\r\n                            name: entry.name,\r\n                            handle: entry,\r\n                            file,\r\n                            context: contextSnippet.replace(\/\\n\/g, ' '),\r\n                            line: lineIndex + 1,\r\n                            column: columnIndex + 1\r\n                        });\r\n                        columnIndex = effectiveLine.indexOf(effectiveSearchTerm, columnIndex + effectiveSearchTerm.length);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        const resultsContainer = $('#wpcode-search-results');\r\n        resultsContainer.empty();\r\n\r\n        if (results.length > 0) {\r\n            let resultsHTML = '<h3>Search Results<\/h3><ul>';\r\n            for (let result of results) {\r\n                let snippetId = mappingData[result.name];\r\n                if (snippetId) {\r\n                    let snippetUrl = `${window.location.origin}\/wp-admin\/admin.php?page=wpcode-snippet-manager&snippet_id=${snippetId}`;\r\n                    resultsHTML += `<li><a href=\"${snippetUrl}\" target=\"_blank\">${result.name} (Line ${result.line}, Column ${result.column})<\/a><br><small>...${result.context}...<\/small><\/li>`;\r\n                }\r\n            }\r\n            resultsHTML += '<\/ul>';\r\n            resultsContainer.html(resultsHTML).show();\r\n            $('#clear-results').show();\r\n        } else {\r\n            wpcodeShowMessage('No matching snippets found.');\r\n        }\r\n    }\r\n\r\n    \/\/ Add custom buttons, checkboxes, dropdown, and result container\r\n    var searchSection = '<div id=\"wpcode-search-section\" style=\"margin-bottom: 20px;\">' +\r\n        '<div style=\"display: flex; flex-wrap: wrap; gap: 10px; align-items: center; margin-bottom: 10px;\">' +\r\n            '<button id=\"search-folder\" class=\"button\">Search Snippets<\/button>' +\r\n            '<button id=\"select-folder\" class=\"button\">Set Search Folder<\/button>' +\r\n            '<button id=\"clear-results\" class=\"button\" style=\"display: none;\">Clear Search Results<\/button>' +\r\n            '<label style=\"display: flex; align-items: center; gap: 5px;\">' +\r\n                '<input type=\"checkbox\" id=\"all-files-checkbox\"> All Files' +\r\n            '<\/label>' +\r\n            '<label style=\"display: flex; align-items: center; gap: 5px;\">' +\r\n                '<input type=\"checkbox\" id=\"match-case-checkbox\"> Match Case' +\r\n            '<\/label>' +\r\n            '<select id=\"mapping-dropdown\" class=\"button\">' +\r\n                '<option value=\"\">Select a snippet<\/option>' +\r\n            '<\/select>' +\r\n            '<button id=\"show-mappings\" class=\"button\">Show Mappings<\/button>' +\r\n            '<button id=\"import-mapping\" class=\"button\">Import Mapping<\/button>' +\r\n        '<\/div>' +\r\n        '<div id=\"wpcode-search-results\" style=\"display: none; background: #f1f1f1; padding: 15px; border: 1px solid #ccc; border-radius: 5px; max-height: 300px; overflow-y: auto;\"><\/div>' +\r\n    '<\/div>';\r\n    $('.wpcode-code-textarea').prepend(searchSection);\r\n\r\n    wpcodePreventAutoSave('#search-folder');\r\n    wpcodePreventAutoSave('#select-folder');\r\n    wpcodePreventAutoSave('#clear-results');\r\n    wpcodePreventAutoSave('#import-mapping');\r\n    wpcodePreventAutoSave('#show-mappings');\r\n\r\n    \/\/ Event listener for dropdown change\r\n    $(document).on('change', '#mapping-dropdown', function() {\r\n        var snippetId = $(this).val();\r\n        if (snippetId) {\r\n            var snippetUrl = `${window.location.origin}\/wp-admin\/admin.php?page=wpcode-snippet-manager&snippet_id=${snippetId}`;\r\n            window.open(snippetUrl, '_blank');\r\n            $(this).val('');\r\n        }\r\n    });\r\n\r\n    \/\/ Attach event listeners for buttons\r\n    $('#search-folder').on('click', function() {\r\n        searchSnippetsInFolder();\r\n    });\r\n\r\n    $('#select-folder').on('click', function() {\r\n        selectSearchFolder();\r\n    });\r\n\r\n    $('#clear-results').on('click', function() {\r\n        clearSearchResults();\r\n    });\r\n\r\n    $('#import-mapping').on('click', function() {\r\n        importMappingFile();\r\n    });\r\n\r\n    $('#show-mappings').on('click', function() {\r\n        showMappings();\r\n    });\r\n\r\n    \/\/ Load mappings on page load\r\n    loadMappingFromStorage();\r\n});\r\nJS;\r\n\r\n    wp_add_inline_script('jquery', $custom_js);\r\n}\r\nadd_action('admin_enqueue_scripts', 'my_wpcode_search_extension_enqueue');\r\n","code_type":"php","location":"admin_only","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-24 10:17:36","tags":[],"note":"","cloud_id":false,"custom_shortcode":""},{"id":1013,"title":"extend-wpcode-common","code":"\/\/<?php\r\n\/\/\r\nadd_action('admin_enqueue_scripts', 'wpcode_common_enqueue');\r\n\r\nfunction wpcode_common_enqueue($hook) {\r\n    \/\/ Only load on WPCode snippet editor pages\r\n    if (strpos($hook, 'wpcode') === false) {\r\n        return;\r\n    }\r\n\r\n    wp_enqueue_script('jquery');\r\n\r\n    \/\/ Inject common JavaScript functions\r\n    $common_js = <<<JS\r\njQuery(document).ready(function($) {\r\n    \/\/ Function to display temporary messages\r\n    function showMessage(message, source = 'WPCode Common') {\r\n        console.log(\"[\" + source + \"]: \" + message);\r\n        var messageBox = $('<div class=\"my-temp-message\">' + message + '<\/div>');\r\n        $('body').append(messageBox);\r\n        messageBox.css({\r\n            position: 'fixed',\r\n            bottom: '20px',\r\n            right: '20px',\r\n            background: '#007cba',\r\n            color: '#fff',\r\n            padding: '10px 20px',\r\n            borderRadius: '5px',\r\n            boxShadow: '0 2px 6px rgba(0, 0, 0, 0.2)',\r\n            zIndex: 9999\r\n        }).fadeIn();\r\n\r\n        setTimeout(function() {\r\n            messageBox.fadeOut(function() {\r\n                $(this).remove();\r\n            });\r\n        }, 3000);\r\n    }\r\n\r\n    \/\/ Function to prevent WPCode auto-save from triggering during custom actions\r\n    function preventAutoSaveOnButtonClick(buttonSelector) {\r\n        $(buttonSelector).on('mousedown click focus', function(event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        });\r\n    }\r\n\r\n    \/\/ Expose the functions globally for use in other snippets\r\n    window.wpcodeShowMessage = showMessage;\r\n    window.wpcodePreventAutoSave = preventAutoSaveOnButtonClick;\r\n});\r\nJS;\r\n\r\n    wp_add_inline_script('jquery', $common_js);\r\n}\r\n","code_type":"php","location":"admin_only","auto_insert":1,"insert_number":1,"use_rules":false,"rules":[],"priority":10,"location_extra":"","shortcode_attributes":[],"compiled_code":"","modified":"2025-02-24 10:22:07","tags":[],"note":"","cloud_id":false,"custom_shortcode":""}]